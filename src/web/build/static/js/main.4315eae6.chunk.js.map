{"version":3,"sources":["Dashboard/ServerSummary.js","Dashboard/PlayerListItem.js","Dashboard/PlayersSummary.js","Dashboard/Dashboard.js","Players/PlayerListItem.js","Players/Players.js","ServerControls/ActionInProgressDialog.js","ServerControls/ConfirmVersionDialog.js","ServerControls/ConfirmRestartDialog.js","ServerControls/ServerProperties.js","ServerControls/ServerControls.js","ServerControls/BackupBeforeNewDialog.js","ServerControls/RawMinecraftCommandDialog.js","ServerControls/BackupItem.js","ServerControls/RestoreBackupDialog.js","ServerControls/WorldControls.js","Preferences/Preferences.js","About/About.js","App.js","registerServiceWorker.js","index.js"],"names":["styles","container","margin","fontFamily","fontSize","ServerSummary","minecraftProperties","this","props","acceptedEula","Tooltip","title","started","updateAvailable","detectedVersion","major","TableCell","Typography","minor","release","rightNow","Date","now","uptime","startTime","seconds","h","Math","floor","m","s","filter","join","formatTime","style","variant","Table","size","TableBody","TableRow","minecraftOnline","minecraftUpdate","minecraftEulaAcceptedStatus","minecraftVersion","ipInfo","address","port","minecraftUptime","React","Component","PlayerListItem","player","name","PlayersSummary","online","key","playerInfo","players","summary","TableHead","map","displayPlayerListItems","Dashboard","opped","banned","whitelisted","IconButton","onClick","pardonPlayer","banPlayer","kickPlayer","deopPlayer","opPlayer","whitelistPlayer","Players","bind","found","forEach","p","axios","method","url","params","command","then","err","console","log","ActionInProgressDialog","onClose","other","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","color","autoFocus","ConfirmVersionDialog","selectedVersionToInstall","onNo","onYes","version","full","ConfirmRestartDialog","ServerProperties","currentMinecraftProperties","Object","assign","serverProperties","useState","dirtyProps","setDirtyProps","progressDialogOpen","setProgressDialogOpen","restartDialogOpen","setRestartDialogOpen","setServerProperties","openProgressDialog","closeRestartDialog","refreshProperties","res","data","properties","updatePropertyType","event","property","newMinecraftProps","changed","length","target","id","value","open","newProperties","JSON","stringify","disabled","maxHeight","overflow","FormControl","fullWidth","InputLabel","htmlFor","Input","onChange","onKeyPress","ServerControls","state","versionDialogOpen","versionToInstall","checkVersionToInstall","closeProgressDialog","closeVersionDialog","handleVersionConfirmation","installMinecraft","restartMinecraft","selectVersionToInstall","startMinecraft","stopMinecraft","setState","MenuItem","catch","error","startMinecraftStatus","releaseVersions","versions","releaseVersion","settings","javaHome","javaPath","Select","displayReleaseVersions","handleAcceptEula","installed","BackupBeforeNewDialog","cancelDialog","newOnly","backupAndNew","RawMinecraftCommandDialog","closeDialog","listCommands","updateRawCommandField","ListItem","button","ListItemText","primary","Divider","fullScreen","List","dense","minecraftCommands","BackupItem","backup","fileName","worldName","date","time","RestoreBackupDialog","backupValue","potentialBackups","native","inputProps","displayBackupItems","FormHelperText","WorldControls","backupDialogOpen","commandOutput","helpDialogOpen","rawMinecraftCommandDialogOpen","rawCommand","restoreDialogOpen","restoreBackup","backupAndNewMinecraftWorld","backupAndRestoreMinecraftWorld","backupMinecraftWorld","closeBackupDialog","closeRawCommandDialog","closeRestoreDialog","getMinecraftWorldBackups","newMinecraftWorld","onClearCommand","onClearOutput","onSendCommand","openBackupBeforeNewDialog","openRawCommandDialog","openRestoreDialog","restoreMinecraftWorld","updateRawCommandDialog","updateRawCommandType","worldBackup","filename","backupList","response","output","backupFile","fullHelp","TextField","label","multiline","rows","Preferences","apiSettings","setApiSettings","FormControlLabel","control","Checkbox","checked","autoStartMinecraft","oldApiSettings","newApiSettings","ipAddress","ipPort","About","GB","mem","nodeInfo","href","eulaUrl","rel","cpus","model","App","debug","minecraftStatus","minecraftStatusMessage","eulaOpen","handleDeclineEula","getIpInfo","getMinecraftServerProperties","getMinecraftStatus","stopMinecraftStatus","handleChange","createMuiTheme","tableRowColumn","height","overrides","MuiButton","root","pingWait","pingTime","statusTimerId","clearTimeout","setTimeout","minecraftServerProperties","e","runOnce","playersTimerId","theme","getTheme","AppBar","position","Tabs","centered","Tab","Snackbar","anchorOrigin","vertical","horizontal","message","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4315eae6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport 'typeface-roboto';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\n\nimport CheckCircle from '@material-ui/icons/CheckCircle';\nimport Error from '@material-ui/icons/Error';\nimport AssignmentLate from '@material-ui/icons/AssignmentLate';\n\nconst styles = {\n  container: {\n    margin: 10,\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    fontSize: '0.95rem'\n  }\n};\n\nfunction formatTime (seconds) {\n  const h = Math.floor(seconds / 3600);\n  const m = Math.floor((seconds % 3600) / 60);\n  const s = Math.floor(seconds % 60);\n  return [\n    h,\n    m > 9 ? m : '0' + m,\n    s > 9 ? s : '0' + s\n  ].filter(s => s).join(':');\n}\n\nclass ServerSummary extends React.Component {\n  minecraftEulaAcceptedStatus () {\n    const minecraftProperties = this.props.minecraftProperties;\n\n    if (minecraftProperties && minecraftProperties.acceptedEula) {\n      return (\n        <div>\n          <Tooltip title='Accepted'>\n            <CheckCircle />\n          </Tooltip>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <Tooltip title='Not accepted'>\n            <Error />\n          </Tooltip>\n        </div>\n      );\n    }\n  }\n\n  minecraftOnline () {\n    const minecraftProperties = this.props.minecraftProperties;\n\n    if (minecraftProperties && minecraftProperties.started) {\n      return (\n        <div>\n          <Tooltip title='Running'>\n            <CheckCircle />\n          </Tooltip>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <Tooltip title='Minecraft is not running'>\n            <Error />\n          </Tooltip>\n        </div>\n      );\n    }\n  }\n\n  minecraftUpdate () {\n    const minecraftProperties = this.props.minecraftProperties;\n\n    if (minecraftProperties && minecraftProperties.updateAvailable) {\n      return (\n        <div>\n          <Tooltip title='Update Available'>\n            <AssignmentLate />\n          </Tooltip>\n        </div>\n      );\n    } else {\n      return <div />;\n    }\n  }\n\n  minecraftVersion () {\n    const minecraftProperties = this.props.minecraftProperties;\n\n    if (minecraftProperties && minecraftProperties.detectedVersion && minecraftProperties.detectedVersion.major) {\n      return (\n        <TableCell>\n          <Typography>\n            {minecraftProperties.detectedVersion.major + '.' + minecraftProperties.detectedVersion.minor + '.' + minecraftProperties.detectedVersion.release}\n          </Typography>\n        </TableCell>\n      );\n    } else {\n      return <TableCell />;\n    }\n  }\n\n  minecraftUptime () {\n    const minecraftProperties = this.props.minecraftProperties;\n    const rightNow = Date.now();\n    let uptime = 0;\n\n    if (minecraftProperties && minecraftProperties.started && minecraftProperties.startTime > 0) {\n      uptime = (rightNow - minecraftProperties.startTime) / 1000;\n      return (\n        <TableCell>\n          <Typography>\n            {formatTime(uptime)}\n          </Typography>\n        </TableCell>\n      );\n    } else {\n      return (\n        <TableCell />\n      );\n    }\n  }\n\n  render () {\n    return (\n      <div style={styles.container}>\n        <Typography variant='subtitle1'>\n                    Server Information\n        </Typography>\n        <Table size='small'>\n          <TableBody>\n            <TableRow>\n              <TableCell>\n                <Typography variant='subtitle2'>\n                                    Minecraft Status\n                </Typography>\n              </TableCell>\n              <TableCell>\n                {this.minecraftOnline()}\n              </TableCell>\n              <TableCell>\n                {this.minecraftUpdate()}\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>\n                <Typography variant='subtitle2'>\n                                    EULA Accepted\n                </Typography>\n              </TableCell>\n              <TableCell>\n                {this.minecraftEulaAcceptedStatus()}\n              </TableCell>\n              <TableCell />\n            </TableRow>\n            <TableRow>\n              <TableCell>\n                <Typography variant='subtitle2'>\n                                    Minecraft Version\n                </Typography>\n              </TableCell>\n              {this.minecraftVersion()}\n              <TableCell />\n            </TableRow>\n            <TableRow>\n              <TableCell>\n                <Typography variant='subtitle2'>\n                                    Server Address\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <Typography>\n                  {this.props.ipInfo.address ? this.props.ipInfo.address + ':' + this.props.ipInfo.port : 'Not known.'}\n                </Typography>\n              </TableCell>\n              <TableCell />\n            </TableRow>\n            <TableRow>\n              <TableCell>\n                <Typography variant='subtitle2'>\n                                    Server Uptime\n                </Typography>\n              </TableCell>\n              {this.minecraftUptime()}\n              <TableCell />\n            </TableRow>\n          </TableBody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nServerSummary.propTypes = {\n  ipInfo: PropTypes.object.isRequired,\n  minecraftProperties: PropTypes.object.isRequired\n};\n\nexport default ServerSummary;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport 'typeface-roboto';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\n\nexport default class PlayerListItem extends React.Component {\n  render () {\n    const player = this.props.player || {};\n\n    return (\n      <TableRow>\n        <TableCell>\n          <Typography>\n            {player.name}\n          </Typography>\n        </TableCell>\n      </TableRow>\n    );\n  }\n}\n\nPlayerListItem.propTypes = {\n  player: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport 'typeface-roboto';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\n\nimport PlayerListItem from './PlayerListItem';\n\nconst styles = {\n  container: {\n    margin: 10,\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    fontSize: '0.95rem'\n  }\n};\n\nexport default class PlayersSummary extends React.Component {\n  displayPlayerListItems (player) {\n    if (player.online) {\n      return (\n        <PlayerListItem\n          key={player.key}\n          player={player}\n        />\n      );\n    }\n  }\n\n  render () {\n    const minecraftProperties = this.props.minecraftProperties;\n    const playerInfo = minecraftProperties.playerInfo;\n    let players = [];\n    let summary = '';\n\n    if (playerInfo) {\n      players = playerInfo.players;\n      summary = playerInfo.summary;\n    }\n\n    return (\n      <div style={styles.container}>\n        <Typography variant='subtitle1'>\n                    Connected Players\n        </Typography>\n        <Table size='small'>\n          <TableHead>\n            <TableRow>\n              <TableCell>\n                <Typography variant='subtitle2'>\n                  {summary || 'Waiting on Minecraft server...'}\n                </Typography>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n        </Table>\n        <Table>\n          <TableBody>\n            {players.map(this.displayPlayerListItems)}\n          </TableBody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nPlayersSummary.propTypes = {\n  minecraftProperties: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ServerSummary from './ServerSummary.js';\nimport PlayersSummary from './PlayersSummary.js';\n\nconst styles = {\n  container: {\n    margin: 10,\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    fontSize: '0.95rem'\n  }\n};\n\nclass Dashboard extends React.Component {\n  render () {\n    return (\n      <div style={styles.container}>\n        <ServerSummary ipInfo={this.props.ipInfo} minecraftProperties={this.props.minecraftProperties} />\n        <PlayersSummary minecraftProperties={this.props.minecraftProperties} />\n      </div>\n    );\n  }\n}\n\nDashboard.propTypes = {\n  ipInfo: PropTypes.object.isRequired,\n  minecraftProperties: PropTypes.object.isRequired\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport 'typeface-roboto';\nimport Ban from '@material-ui/icons/Error';\nimport IconButton from '@material-ui/core/IconButton';\nimport Kick from '@material-ui/icons/Error';\nimport NetworkOnline from '@material-ui/icons/SignalWifi4Bar';\nimport NetworkOffline from '@material-ui/icons/SignalWifiOff';\nimport OpStatus from '@material-ui/icons/VerifiedUser';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport WhitelistIcon from '@material-ui/icons/PlaylistAdd';\n\nexport default function PlayerListItem (props) {\n  const banPlayer = () => {\n    props.banPlayer(props.player.name);\n  };\n  const pardonPlayer = () => {\n    props.pardonPlayer(props.player.name);\n  };\n  const kickPlayer = () => {\n    props.kickPlayer(props.player.name);\n  };\n  const opPlayer = () => {\n    props.opPlayer(props.player.name);\n  };\n  const deopPlayer = () => {\n    props.deopPlayer(props.player.name);\n  };\n  const whitelistPlayer = () => {\n    props.whitelistPlayer(props.player.name);\n  };\n\n  return (\n    <TableRow>\n      <TableCell>\n        <Typography>\n          {props.player.name}\n        </Typography>\n      </TableCell>\n      <TableCell>{props.player.online\n        ? (\n          <Tooltip title='Online'>\n            <NetworkOnline />\n          </Tooltip>\n        )\n        : (\n          <Tooltip title='Offline'>\n            <NetworkOffline />\n          </Tooltip>\n        )}{props.player.opped\n        ? (\n          <Tooltip title='Opped'>\n            <OpStatus />\n          </Tooltip>\n        ) : <span />}{props.player.banned\n        ? (\n          <Tooltip title='Banned'>\n            <Ban />\n          </Tooltip>\n        ) : <span />}{props.player.whitelisted\n        ? (\n          <Tooltip title='Whitelisted'>\n            <WhitelistIcon />\n          </Tooltip>\n        ) : <span />}\n      </TableCell>\n      <TableCell>\n        {props.player.banned\n          ? (\n            <IconButton onClick={pardonPlayer}>\n              <Tooltip title='Pardon'>\n                <Ban />\n              </Tooltip>\n            </IconButton>\n          )\n          : (\n            <IconButton onClick={banPlayer}>\n              <Tooltip title='Ban'>\n                <Ban />\n              </Tooltip>\n            </IconButton>\n          )}\n        <IconButton onClick={kickPlayer}>\n          <Tooltip title='Kick'>\n            <Kick />\n          </Tooltip>\n        </IconButton>\n        {props.player.opped\n          ? (\n            <IconButton onClick={deopPlayer}>\n              <Tooltip title='De Op'>\n                <OpStatus />\n              </Tooltip>\n            </IconButton>\n          )\n          : (\n            <IconButton onClick={opPlayer}>\n              <Tooltip title='Op'>\n                <OpStatus />\n              </Tooltip>\n            </IconButton>\n          )}\n        {!props.player.whitelisted\n          ? (\n            <IconButton onClick={whitelistPlayer}>\n              <Tooltip title='Whitelist'>\n                <WhitelistIcon />\n              </Tooltip>\n            </IconButton>\n          ) : <div />}\n      </TableCell>\n    </TableRow>\n  );\n}\n\nPlayerListItem.propTypes = {\n  player: PropTypes.object.isRequired,\n  whitelistPlayer: PropTypes.func.isRequired,\n  deopPlayer: PropTypes.func.isRequired,\n  opPlayer: PropTypes.func.isRequired,\n  kickPlayer: PropTypes.func.isRequired,\n  pardonPlayer: PropTypes.func.isRequired,\n  banPlayer: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport axios from 'axios';\n\nimport 'typeface-roboto';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\n\nimport PlayerListItem from './PlayerListItem';\n\nconst styles = {\n  container: {\n    margin: 10,\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    fontSize: '0.95rem'\n  }\n};\n\nexport default class Players extends React.Component {\n  constructor (props) {\n    super(props);\n    this.banPlayer = this.banPlayer.bind(this);\n    this.deopPlayer = this.deopPlayer.bind(this);\n    this.displayPlayerListItems = this.displayPlayerListItems.bind(this);\n    this.kickPlayer = this.kickPlayer.bind(this);\n    this.opPlayer = this.opPlayer.bind(this);\n    this.pardonPlayer = this.pardonPlayer.bind(this);\n    this.whitelistPlayer = this.whitelistPlayer.bind(this);\n  }\n\n  banPlayer (player) {\n    let found = false;\n    const players = this.props.minecraftProperties.playerInfo.players;\n\n    players.forEach(p => {\n      if (p.name === player) {\n        found = true;\n      }\n    });\n\n    if (found) {\n      axios({\n        method: 'post',\n        url: '/api/command',\n        params: {\n          command: '/ban ' + player\n        }\n      }).then(() => {\n\n      },\n      err => {\n        console.log('An error occurred contacting the Minecraft server.', err);\n      });\n    }\n  }\n\n  pardonPlayer (player) {\n    let found = false;\n    const players = this.props.minecraftProperties.playerInfo.players;\n\n    players.forEach(p => {\n      if (p.name === player) {\n        found = true;\n      }\n    });\n\n    if (found) {\n      axios({\n        method: 'post',\n        url: '/api/command',\n        params: {\n          command: '/pardon ' + player\n        }\n      }).then(() => {\n\n      },\n      err => {\n        console.log('An error occurred contacting the Minecraft server.', err);\n      });\n    }\n  }\n\n  kickPlayer (player) {\n    let found = false;\n    const players = this.props.minecraftProperties.playerInfo.players;\n\n    players.forEach(p => {\n      if (p.name === player) {\n        found = true;\n      }\n    });\n\n    if (found) {\n      axios({\n        method: 'post',\n        url: '/api/command',\n        params: {\n          command: '/kick ' + player\n        }\n      }).then(() => {\n\n      },\n      err => {\n        console.log('An error occurred contacting the Minecraft server.', err);\n      });\n    }\n  }\n\n  opPlayer (player) {\n    let found = false;\n    const players = this.props.minecraftProperties.playerInfo.players;\n\n    players.forEach(p => {\n      if (p.name === player) {\n        found = true;\n      }\n    });\n\n    if (found) {\n      axios({\n        method: 'post',\n        url: '/api/command',\n        params: {\n          command: '/op ' + player\n        }\n      }).then(() => {\n\n      },\n      err => {\n        console.log('An error occurred contacting the Minecraft server.', err);\n      });\n    }\n  }\n\n  deopPlayer (player) {\n    let found = false;\n    const players = this.props.minecraftProperties.playerInfo.players;\n\n    players.forEach(p => {\n      if (p.name === player) {\n        found = true;\n      }\n    });\n\n    if (found) {\n      axios({\n        method: 'post',\n        url: '/api/command',\n        params: {\n          command: '/deop ' + player\n        }\n      }).then(() => {\n\n      },\n      err => {\n        console.log('An error occurred contacting the Minecraft server.', err);\n      });\n    }\n  }\n\n  whitelistPlayer (player) {\n    let found = false;\n    const players = this.props.minecraftProperties.playerInfo.players;\n\n    players.forEach(p => {\n      if (p.name === player) {\n        found = true;\n      }\n    });\n\n    if (found) {\n      axios({\n        method: 'post',\n        url: '/api/command',\n        params: {\n          command: '/whitelist ' + player\n        }\n      }).then(() => {\n\n      },\n      err => {\n        console.log('An error occurred contacting the Minecraft server.', err);\n      });\n    }\n  }\n\n  displayPlayerListItems (player) {\n    return (\n      <PlayerListItem\n        key={player.key}\n        player={player}\n        banPlayer={this.banPlayer}\n        pardonPlayer={this.pardonPlayer}\n        kickPlayer={this.kickPlayer}\n        opPlayer={this.opPlayer}\n        deopPlayer={this.deopPlayer}\n        whitelistPlayer={this.whitelistPlayer}\n      />\n    );\n  }\n\n  render () {\n    const minecraftProperties = this.props.minecraftProperties;\n    const playerInfo = minecraftProperties.playerInfo;\n    let players = [];\n    let summary = '';\n\n    if (playerInfo && playerInfo.players) {\n      summary = playerInfo.summary;\n      players = playerInfo.players;\n    }\n\n    return (\n      <div style={styles.container}>\n        <Typography variant='subtitle1'>\n          {summary || 'Waiting on Minecraft server...'}\n        </Typography>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>\n                <Typography variant='subtitle2'>\n                                    Player\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <Typography variant='subtitle2'>\n                                    Status\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <Typography variant='subtitle2'>\n                                    Actions\n                </Typography>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {players.map(this.displayPlayerListItems)}\n          </TableBody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nPlayers.propTypes = {\n  minecraftProperties: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\n\nexport default function ActionInProgressDialog (props) {\n  const { onClose, ...other } = props;\n  return (\n    <Dialog {...other}>\n      <DialogTitle>Please Wait</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n                    Requested action in progress...\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={onClose}\n          variant='contained'\n          color='primary'\n          autoFocus\n        >\n                    Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nActionInProgressDialog.propTypes = {\n  onClose: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\n\nexport default function ConfirmVersionDialog (props) {\n  const { detectedVersion, selectedVersionToInstall, onNo, onYes, ...other } = props;\n  // console.log('props:', props);\n  let version = '';\n\n  if (detectedVersion && detectedVersion.full) {\n    version = detectedVersion.full;\n  }\n  // TODO: Detect \"downgrade\".\n  return (\n    <Dialog {...other}>\n      <DialogTitle>Confirm Version Change</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n                    The current running version is {version}, but the\n                    selected version is {selectedVersionToInstall ? selectedVersionToInstall.full : 'unknown'}. Changing\n                    to a lower version may delete the current world.\n        </DialogContentText>\n        <DialogContentText>\n                    Continue?\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={onNo}\n          color='primary'\n          variant='contained'\n          autoFocus\n        >\n                    No\n        </Button>\n        <Button\n          onClick={onYes}\n          color='primary'\n          variant='contained'\n        >\n                    Yes\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nConfirmVersionDialog.propTypes = {\n  detectedVersion: PropTypes.object,\n  selectedVersionToInstall: PropTypes.object,\n  onNo: PropTypes.func.isRequired,\n  onYes: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\n\nexport default function ConfirmRestartDialog (props) {\n  const { onNo, onYes, ...other } = props;\n\n  return (\n    <Dialog {...other}>\n      <DialogTitle>Confirm Minecraft Restart</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n                    Saving new properties will restart the Minecraft server.\n        </DialogContentText>\n        <DialogContentText>\n                    Continue?\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={onNo}\n          color='primary'\n          variant='contained'\n          autoFocus\n        >\n                    No\n        </Button>\n        <Button\n          onClick={onYes}\n          color='primary'\n          variant='contained'\n        >\n                    Yes\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nConfirmRestartDialog.propTypes = {\n  onNo: PropTypes.func.isRequired,\n  onYes: PropTypes.func.isRequired\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport axios from 'axios';\n\nimport 'typeface-roboto';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Refresh from '@material-ui/icons/Cached';\nimport Save from '@material-ui/icons/Save';\nimport Undo from '@material-ui/icons/Undo';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Typography from '@material-ui/core/Typography';\n\nimport ActionInProgressDialog from './ActionInProgressDialog.js';\nimport ConfirmRestartDialog from './ConfirmRestartDialog.js';\n\nexport default function ServerProperties (props) {\n  let currentMinecraftProperties = Object.assign([], props.minecraftProperties.serverProperties);\n  const [dirtyProps, setDirtyProps] = useState(false);\n  const [progressDialogOpen, setProgressDialogOpen] = useState(false);\n  const [restartDialogOpen, setRestartDialogOpen] = useState(false);\n  const [serverProperties, setServerProperties] = useState(props.minecraftProperties.serverProperties);\n\n  const openProgressDialog = () => {\n    setProgressDialogOpen(true);\n  };\n\n  const closeProgressDialog = () => {\n    setProgressDialogOpen(false);\n  };\n\n  const openRestartDialog = () => {\n    setRestartDialogOpen(true);\n  };\n\n  const closeRestartDialog = () => {\n    setRestartDialogOpen(false);\n  };\n\n  const refreshProperties = () => {\n    openProgressDialog();\n    axios({\n      method: 'get',\n      url: '/api/refreshServerProperties'\n    }).then(res => {\n      setServerProperties(res.data.properties);\n      currentMinecraftProperties = Object.assign({}, res.data.properties);\n      setDirtyProps(false);\n      setProgressDialogOpen(false);\n    }, err => {\n      console.log('An error occurred contacting the Minecraft server.', err);\n      setProgressDialogOpen(false);\n    });\n  };\n\n  const saveProperties = () => {\n    closeRestartDialog();\n    openProgressDialog();\n    const newProperties = JSON.stringify(serverProperties);\n    axios({\n      method: 'post',\n      url: '/api/saveMinecraftProperties',\n      params: {\n        newProperties: newProperties\n      }\n    }).then(() => {\n      refreshProperties();\n    }, err => {\n      console.log('An error occurred contacting the Minecraft server.', err);\n      refreshProperties();\n    });\n  };\n\n  const undoPropertyEdits = () => {\n    setServerProperties(currentMinecraftProperties);\n    setDirtyProps(false);\n  };\n\n  const updatePropertyType = (event) => {\n    const newMinecraftProps = Object.assign([], serverProperties);\n    let changed = false;\n    let property;\n    for (let p = 0; p < newMinecraftProps.length; p++) {\n      property = newMinecraftProps[p];\n      if (property.name === event.target.id) {\n        if (property.value !== event.target.value) {\n          property.value = event.target.value;\n          changed = true;\n        }\n        break;\n      }\n    }\n    if (changed) {\n      setServerProperties(newMinecraftProps);\n      setDirtyProps(true);\n    }\n  };\n\n  return (\n    <div>\n      <ActionInProgressDialog\n        open={progressDialogOpen}\n        onClose={closeProgressDialog}\n      />\n      <ConfirmRestartDialog\n        open={restartDialogOpen}\n        onNo={closeRestartDialog}\n        onYes={saveProperties}\n      />\n      <Typography variant='subtitle1'>\n                Server Properties\n      </Typography>\n      <Typography>\n                Change Minecraft server properties. When finished, click <strong>Save</strong>.&nbsp;\n        <Typography variant='caption'>\n                    (Saving changes will require a Minecraft restart.)\n        </Typography>\n      </Typography>\n      <Typography>\n        <strong>Undo</strong> will reset all fields to the current running settings.\n      </Typography>\n      <Typography>\n        <strong>Refresh</strong> reads current values from the Minecraft server files.\n      </Typography>\n      <Button\n        variant='contained'\n        color='primary'\n        onClick={refreshProperties}\n      >\n        <Refresh />\n                Refresh\n      </Button>\n      <Button\n        disabled={!dirtyProps}\n        variant='contained'\n        color='primary'\n        onClick={openRestartDialog}\n      >\n        <Save />\n                Save\n      </Button>\n      <Button\n        disabled={!dirtyProps}\n        variant='contained'\n        color='primary'\n        onClick={undoPropertyEdits}\n      >\n        <Undo />\n                Undo\n      </Button>\n      <div style={{ maxHeight: '100vh', overflow: 'auto' }}>\n        <Table size='small'>\n          <TableBody>\n            <TableRow><TableCell /></TableRow>\n            {serverProperties && serverProperties.length ? serverProperties.map(property => {\n              return (\n                <TableRow key={property.name}>\n                  <TableCell>\n                    <FormControl fullWidth>\n                      <InputLabel\n                        htmlFor='{ property.name }'\n                      >\n                        {property.name}\n                      </InputLabel>\n                      <Input\n                        id={property.name}\n                        value={property.value}\n                        fullWidth\n                        onChange={updatePropertyType}\n                        onKeyPress={updatePropertyType}\n                      />\n                    </FormControl>\n                  </TableCell>\n                </TableRow>\n              );\n            }) : <TableRow><TableCell>Waiting on Minecraft server...</TableCell></TableRow>}\n          </TableBody>\n        </Table>\n      </div>\n    </div>\n  );\n}\n\nServerProperties.propTypes = {\n  minecraftProperties: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport axios from 'axios';\n\nimport 'typeface-roboto';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Restart from '@material-ui/icons/Autorenew';\nimport Select from '@material-ui/core/Select';\nimport Start from '@material-ui/icons/PlayArrow';\nimport Stop from '@material-ui/icons/Stop';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport UpdateAvailable from '@material-ui/icons/AssignmentLate';\n\nimport ActionInProgressDialog from './ActionInProgressDialog.js';\nimport ConfirmVersionDialog from './ConfirmVersionDialog.js';\nimport ServerProperties from './ServerProperties.js';\nimport { Tooltip } from '@material-ui/core';\n\nconst styles = {\n  container: {\n    margin: 10,\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    fontSize: '0.95rem'\n  }\n};\n\nclass ServerControls extends React.Component {\n  constructor (props) {\n    super(props);\n\n    let detectedVersion = props.minecraftProperties.detectedVersion;\n    if (!detectedVersion || !detectedVersion.full) {\n      detectedVersion = { full: 'latest' };\n    }\n\n    this.state = {\n      progressDialogOpen: false,\n      versionDialogOpen: false,\n      versionToInstall: detectedVersion\n    };\n    this.checkVersionToInstall = this.checkVersionToInstall.bind(this);\n    this.closeProgressDialog = this.closeProgressDialog.bind(this);\n    this.closeVersionDialog = this.closeVersionDialog.bind(this);\n    this.handleVersionConfirmation = this.handleVersionConfirmation.bind(this);\n    this.openProgressDialog = this.openProgressDialog.bind(this);\n    this.installMinecraft = this.installMinecraft.bind(this);\n    this.restartMinecraft = this.restartMinecraft.bind(this);\n    this.selectVersionToInstall = this.selectVersionToInstall.bind(this);\n    this.startMinecraft = this.startMinecraft.bind(this);\n    this.stopMinecraft = this.stopMinecraft.bind(this);\n  }\n\n  openProgressDialog () {\n    this.setState({ progressDialogOpen: true });\n  }\n\n  closeProgressDialog () {\n    this.setState({ progressDialogOpen: false });\n  }\n\n  closeVersionDialog () {\n    this.setState({ versionToInstall: this.props.minecraftProperties.detectedVersion });\n    this.setState({ versionDialogOpen: false });\n  }\n\n  checkVersionToInstall () {\n    if (this.props.minecraftProperties.detectedVersion.full && this.state.versionToInstall.full !== this.props.minecraftProperties.detectedVersion.full) {\n      this.setState({ versionDialogOpen: true });\n    } else {\n      this.installMinecraft();\n    }\n  }\n\n  displayReleaseVersions (version) {\n    return (\n      <MenuItem\n        key={version.id}\n        value={version.id}\n      >\n        {version.id}\n      </MenuItem>\n    );\n  }\n\n  handleAcceptEula () {\n    axios({\n      method: 'post',\n      url: '/api/acceptEula'\n    }).catch(error => {\n      console.log('An error occurred accepting the EULA:', error);\n    });\n  }\n\n  handleVersionConfirmation (value) {\n    if (value && typeof value === 'string') {\n      this.setState({ versionToInstall: { full: value } });\n    }\n    this.setState({ versionDialogOpen: false });\n    this.installMinecraft();\n  }\n\n  installMinecraft () {\n    this.setState({ progressDialogOpen: true });\n    // this.props.stopMinecraftStatus();\n    axios({\n      method: 'post',\n      url: '/api/install',\n      params: {\n        version: this.state.versionToInstall.full\n      }\n    }).then(() => {\n      this.props.startMinecraftStatus();\n      this.setState({ progressDialogOpen: false });\n      this.selectVersionToInstall({ target: { value: this.props.minecraftProperties.detectedVersion } });\n    },\n    err => {\n      console.log('An error occurred contacting the Minecraft server.', err);\n    });\n  }\n\n  restartMinecraft () {\n    this.setState({ progressDialogOpen: true });\n    // this.props.stopMinecraftStatus();\n    axios({\n      method: 'post',\n      url: '/api/restart'\n    }).then(() => {\n      this.props.startMinecraftStatus();\n      this.setState({ progressDialogOpen: false });\n    },\n    err => {\n      console.log('An error occurred contacting the Minecraft server.', err);\n    });\n  }\n\n  selectVersionToInstall (selectedVersionToInstall) {\n    const minecraftProperties = this.props.minecraftProperties;\n    let releaseVersions = {};\n    let versionToInstall = '';\n\n    if (minecraftProperties.versions) {\n      releaseVersions = minecraftProperties.versions.release;\n    }\n\n    if (releaseVersions && releaseVersions.length) {\n      for (const releaseVersion of releaseVersions) {\n        if (releaseVersion.id === selectedVersionToInstall.target.value) {\n          versionToInstall = { full: releaseVersion.id };\n          break;\n        }\n      }\n      if (!versionToInstall) {\n        versionToInstall = { full: 'latest' };\n      }\n      this.setState({ versionToInstall });\n    }\n  }\n\n  startMinecraft () {\n    this.setState({ progressDialogOpen: true });\n    axios({\n      method: 'post',\n      url: '/api/start'\n    }).then(() => {\n      this.props.startMinecraftStatus();\n      this.setState({ progressDialogOpen: false });\n    },\n    err => {\n      console.log('An error occurred contacting the Minecraft server.', err);\n    });\n  }\n\n  stopMinecraft () {\n    this.setState({ progressDialogOpen: true });\n    axios({\n      method: 'post',\n      url: '/api/stop'\n    }).then(() => {\n      // this.props.stopMinecraftStatus();\n      this.setState({ progressDialogOpen: false });\n    },\n    err => {\n      console.log('An error occurred contacting the Minecraft server.', err);\n    });\n  }\n\n  render () {\n    const minecraftProperties = this.props.minecraftProperties;\n\n    return (\n      <div style={styles.container}>\n        <ActionInProgressDialog\n          open={this.state.progressDialogOpen}\n          onClose={this.closeProgressDialog}\n        />\n        <ConfirmVersionDialog\n          open={this.state.versionDialogOpen}\n          onNo={this.closeVersionDialog}\n          onYes={this.handleVersionConfirmation}\n          detectedVersion={minecraftProperties.detectedVersion}\n          selectedVersionToInstall={this.state.versionToInstall}\n        />\n        <Typography variant='subtitle1'>\n                    Server Controls\n        </Typography>\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>\n                <Button\n                  onClick={this.startMinecraft}\n                  disabled={!minecraftProperties.settings.javaHome || !minecraftProperties.settings.javaPath || minecraftProperties.started}\n                  variant='contained'\n                  color='primary'\n                >\n                  <Start />\n                                    Start\n                </Button>\n                <Button\n                  onClick={this.stopMinecraft}\n                  disabled={!minecraftProperties.started}\n                  variant='contained'\n                  color='primary'\n                >\n                  <Stop />\n                                    Stop\n                </Button>\n                <Button\n                  onClick={this.restartMinecraft}\n                  disabled={!minecraftProperties.started}\n                  variant='contained'\n                  color='primary'\n                >\n                  <Restart />\n                                    Restart\n                </Button>\n              </TableCell>\n              <TableCell>\n                <Button\n                  onClick={this.checkVersionToInstall}\n                  variant='contained'\n                  color='primary'\n                >\n                                    Install\n                </Button>\n                <Select\n                  value={this.state.versionToInstall.full}\n                  onChange={this.selectVersionToInstall}\n                >\n                  <MenuItem key='latest' value='latest'>\n                    <em>latest</em>\n                  </MenuItem>\n                  {minecraftProperties.versions && minecraftProperties.versions.release ? minecraftProperties.versions.release.map(this.displayReleaseVersions) : <div />}\n                </Select>\n              </TableCell>\n              <TableCell>\n                <Button\n                  onClick={this.handleAcceptEula}\n                  disabled={!minecraftProperties.installed || minecraftProperties.acceptedEula}\n                  variant='contained'\n                  color='primary'\n                >\n                                    Accept EULA\n                </Button>\n              </TableCell>\n              <TableCell>\n                {minecraftProperties.updateAvailable\n                  ? (\n                    <Tooltip\n                      title='Update Available'\n                    >\n                      <Button>\n                        <UpdateAvailable />\n                      </Button>\n                    </Tooltip>\n                  ) : <div />}\n                <Button\n                  disabled\n                  variant='contained'\n                  color='primary'\n                >\n                                    Check for updates\n                </Button>\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n        <ServerProperties minecraftProperties={minecraftProperties} />\n      </div>\n    );\n  }\n}\n\nServerControls.propTypes = {\n  minecraftProperties: PropTypes.object.isRequired,\n  startMinecraftStatus: PropTypes.func.isRequired,\n  stopMinecraftStatus: PropTypes.func.isRequired\n};\n\nexport default ServerControls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Button from '@material-ui/core/Button';\n\nexport default class BackupBeforeNewDialog extends React.Component {\n  render () {\n    return (\n      <Dialog open={this.props.open}>\n        <DialogContent>\n          <DialogContentText>\n                        Would you like to backup the world first?\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.props.cancelDialog} color='primary'>\n                        Cancel\n          </Button>\n          <Button onClick={this.props.newOnly} color='primary'>\n                        No\n          </Button>\n          <Button onClick={this.props.backupAndNew} color='primary' autoFocus>\n                        Yes\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nBackupBeforeNewDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  cancelDialog: PropTypes.func.isRequired,\n  newOnly: PropTypes.func.isRequired,\n  backupAndNew: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '@material-ui/core/Button';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nconst styles = {\n  container: {\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    fontSize: '0.95rem'\n  }\n};\n\nexport default class RawMinecraftCommandDialog extends React.Component {\n  constructor (props) {\n    super(props);\n\n    this.closeDialog = this.closeDialog.bind(this);\n    this.listCommands = this.listCommands.bind(this);\n  }\n\n  closeDialog (command) {\n    this.props.updateRawCommandField(command);\n    this.props.onClose();\n  }\n\n  listCommands (command) {\n    return (\n      <ListItem key={command.key} button onClick={() => { this.closeDialog(command.command); }}>\n        <ListItemText primary={command.command} />\n        <Divider />\n      </ListItem>\n    );\n  }\n\n  render () {\n    return (\n      <Dialog fullScreen open={this.props.open} style={styles.container}>\n        <DialogTitle>\n          <IconButton onClick={this.props.onClose}>\n            <CloseIcon />\n          </IconButton>\n                    Available Minecraft Commands\n        </DialogTitle>\n        <DialogContent>\n          <List dense>\n            {this.props.minecraftCommands ? this.props.minecraftCommands.map(this.listCommands) : <div />}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.props.onClose} color='primary'>\n                        Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nRawMinecraftCommandDialog.propTypes = {\n  minecraftCommands: PropTypes.array.isRequired,\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  updateRawCommandField: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class BackupItem extends React.Component {\n  render () {\n    const backup = this.props.backup;\n\n    return (\n      <option value={backup.fileName}>{backup.worldName}: Taken {backup.date} at {backup.time}</option>\n    );\n  }\n}\n\nBackupItem.propTypes = {\n  backup: PropTypes.object.isRequired\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Select from '@material-ui/core/Select';\n\nimport BackupItem from './BackupItem';\n\nexport default class RestoreBackupDialog extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      backupValue: ''\n    };\n  }\n\n  displayBackupItems (backup) {\n    return (\n      <BackupItem\n        key={backup.fileName}\n        backup={backup}\n      />\n    );\n  }\n\n  render () {\n    const potentialBackups = this.props.potentialBackups;\n\n    return (\n      <Dialog\n        open={this.props.open}\n      >\n        <DialogContent>\n          <FormControl>\n            <Select\n              native\n              inputProps={{\n                id: 'backup'\n              }}\n              value={this.state.backupValue}\n            >\n              {potentialBackups.map(this.displayBackupItems)}\n            </Select>\n          </FormControl>\n          <FormHelperText>Choose a backup to restore</FormHelperText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.props.onClose} color='primary'>\n                        Cancel\n          </Button>\n          <Button onClick={this.props.onClose} color='primary' autoFocus>\n                        Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nRestoreBackupDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  potentialBackups: PropTypes.array.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport axios from 'axios';\n\nimport 'typeface-roboto';\nimport Backup from '@material-ui/icons/Backup';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport FormControl from '@material-ui/core/FormControl';\nimport Help from '@material-ui/icons/Help';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport New from '@material-ui/icons/Public';\nimport Restore from '@material-ui/icons/Restore';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\n\nimport BackupBeforeNewDialog from './BackupBeforeNewDialog.js';\nimport ActionInProgressDialog from './ActionInProgressDialog.js';\nimport RawMinecraftCommandDialog from './RawMinecraftCommandDialog.js';\nimport RestoreBackupDialog from './RestoreBackupDialog.js';\n\nconst styles = {\n  container: {\n    margin: 10,\n    fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n    fontSize: '0.95rem'\n  }\n};\n\nexport default class WorldControls extends React.Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      backupDialogOpen: false,\n      commandOutput: '',\n      helpDialogOpen: false,\n      potentialBackups: [],\n      progressDialogOpen: false,\n      rawMinecraftCommandDialogOpen: false,\n      rawCommand: '',\n      restoreDialogOpen: false,\n      restoreBackup: { }\n    };\n    this.backupAndNewMinecraftWorld = this.backupAndNewMinecraftWorld.bind(this);\n    this.backupAndRestoreMinecraftWorld = this.backupAndRestoreMinecraftWorld.bind(this);\n    this.backupMinecraftWorld = this.backupMinecraftWorld.bind(this);\n    this.closeBackupDialog = this.closeBackupDialog.bind(this);\n    this.closeProgressDialog = this.closeProgressDialog.bind(this);\n    this.closeRawCommandDialog = this.closeRawCommandDialog.bind(this);\n    this.closeRestoreDialog = this.closeRestoreDialog.bind(this);\n    this.getMinecraftWorldBackups = this.getMinecraftWorldBackups.bind(this);\n    this.newMinecraftWorld = this.newMinecraftWorld.bind(this);\n    this.onClearCommand = this.onClearCommand.bind(this);\n    this.onClearOutput = this.onClearOutput.bind(this);\n    this.onSendCommand = this.onSendCommand.bind(this);\n    this.openBackupBeforeNewDialog = this.openBackupBeforeNewDialog.bind(this);\n    this.openProgressDialog = this.openProgressDialog.bind(this);\n    this.openRawCommandDialog = this.openRawCommandDialog.bind(this);\n    this.openRestoreDialog = this.openRestoreDialog.bind(this);\n    this.restoreMinecraftWorld = this.restoreMinecraftWorld.bind(this);\n    this.updateRawCommandDialog = this.updateRawCommandDialog.bind(this);\n    this.updateRawCommandType = this.updateRawCommandType.bind(this);\n  }\n\n  backupAndNewMinecraftWorld () {\n    // TODO Fix issue of if failed backup then don't nuke\n    this.backupMinecraftWorld();\n    this.newMinecraftWorld();\n  }\n\n  backupAndRestoreMinecraftWorld () {\n    // TODO Fix issue of if failed backup then don't nuke\n    this.backupMinecraftWorld();\n    this.restoreMinecraftWorld();\n  }\n\n  backupMinecraftWorld () {\n    this.setState({ backupDialogOpen: false, progressDialogOpen: true, restoreDialogOpen: false });\n    axios({\n      method: 'post',\n      url: '/api/backupWorld'\n    }).then(() => {\n      this.setState({ progressDialogOpen: false });\n    },\n    err => {\n      console.log('An error occurred contacting the Minecraft server.', err);\n      this.setState({ progressDialogOpen: false });\n    });\n  }\n\n  closeBackupDialog () {\n    this.setState({ backupDialogOpen: false });\n  }\n\n  closeProgressDialog () {\n    this.setState({ progressDialogOpen: false });\n  }\n\n  closeRawCommandDialog () {\n    this.setState({ rawMinecraftCommandDialogOpen: false });\n  }\n\n  closeRestoreDialog (worldBackup) {\n    if (worldBackup.filename) {\n      this.setState({ restoreBackup: worldBackup });\n      console.log('Would restore world: ', worldBackup);\n      this.setState({ restoreDialogOpen: false });\n      this.restoreMinecraftWorld(worldBackup);\n    } else {\n      this.setState({ restoreDialogOpen: false });\n    }\n  }\n\n  getMinecraftWorldBackups () {\n    axios({\n      method: 'get',\n      url: '/api/listWorldBackups'\n    }).then(res => {\n      const backupList = res.data.backupList;\n      console.log('backupList response:', backupList);\n      if (backupList.length) {\n        this.setState({ potentialBackups: backupList });\n        this.setState({ restoreDialogOpen: true });\n      } else {\n        // TODO: Show error\n        this.setState({ potentialBackups: [{ key: 'nothingtoseehere', fileName: 'nope', worldName: '', date: '' }] });\n        console.log('An error occurred getting backups from the Minecraft server.', backupList);\n      }\n    },\n    err => {\n      console.log('An error occurred contacting the Minecraft server.', err);\n      this.setState({ restoreDialogOpen: false });\n    });\n  }\n\n  newMinecraftWorld () {\n    this.setState({ backupDialogOpen: false, progressDialogOpen: true, restoreDialogOpen: false });\n    axios({\n      method: 'post',\n      url: '/api/newWorld',\n      params: {\n        backup: false\n      }\n    }).then(() => {\n      this.setState({ progressDialogOpen: false });\n    },\n    err => {\n      console.log('An error occurred contacting the Minecraft server.', err);\n      this.setState({ progressDialogOpen: false });\n    });\n  }\n\n  onClearCommand () {\n    this.setState({ rawCommand: '' });\n  }\n\n  onClearOutput () {\n    this.setState({ commandOutput: '' });\n  }\n\n  onSendCommand () {\n    if (this.state.rawCommand) {\n      axios({\n        method: 'post',\n        url: '/api/command',\n        params: {\n          command: this.state.rawCommand\n        }\n      }).then(response => {\n        const commandOutput = response.data.output;\n        this.setState({ rawCommand: '' });\n        this.setState({ commandOutput });\n      },\n      err => {\n        console.log('An error occurred contacting the Minecraft server.', err);\n        this.setState({ progressDialogOpen: false });\n      });\n    }\n  }\n\n  openBackupBeforeNewDialog () {\n    this.setState({ backupDialogOpen: true, progressDialogOpen: false, rawMinecraftCommandDialogOpen: false });\n  }\n\n  openProgressDialog () {\n    this.setState({ backupDialogOpen: false, progressDialogOpen: true, rawMinecraftCommandDialogOpen: false });\n  }\n\n  openRawCommandDialog () {\n    this.setState({ backupDialogOpen: false, progressDialogOpen: false, rawMinecraftCommandDialogOpen: true });\n  }\n\n  openRestoreDialog () {\n    this.getMinecraftWorldBackups();\n    this.setState({ backupDialogOpen: false, progressDialogOpen: false, rawMinecraftCommandDialogOpen: false, restoreDialogOpen: true });\n  }\n\n  restoreMinecraftWorld (worldBackup) {\n    this.setState({ backupDialogOpen: false, progressDialogOpen: true, restoreDialogOpen: false });\n    axios({\n      method: 'post',\n      url: '/api/command',\n      params: {\n        command: '/restoreWorld',\n        backupFile: worldBackup,\n        backup: false\n      }\n    }).then(() => {\n      this.setState({ backupDialogOpen: false, progressDialogOpen: false, restoreDialogOpen: false });\n      this.setState({ restoreBackup: {} });\n    },\n    err => {\n      console.log('An error occurred contacting the Minecraft server.', err);\n      this.setState({ restoreDialogOpen: false });\n    });\n  }\n\n  updateRawCommandType (event) {\n    if (event.key === 'Enter') {\n      this.onSendCommand();\n    } else {\n      this.setState({ rawCommand: event.target.value });\n    }\n  }\n\n  updateRawCommandDialog (command) {\n    this.setState({ rawCommand: command });\n  }\n\n  render () {\n    return (\n      <div style={styles.container}>\n        <BackupBeforeNewDialog\n          backupAndNew={this.backupAndNewMinecraftWorld}\n          newOnly={this.newMinecraftWorld}\n          cancelDialog={this.closeBackupDialog}\n          open={this.state.backupDialogOpen}\n        />\n        <ActionInProgressDialog\n          open={this.state.progressDialogOpen}\n          onClose={this.closeProgressDialog}\n        />\n        <RawMinecraftCommandDialog\n          open={this.state.rawMinecraftCommandDialogOpen}\n          onClose={this.closeRawCommandDialog}\n          minecraftCommands={this.props.minecraftProperties.fullHelp}\n          updateRawCommandField={this.updateRawCommandDialog}\n        />\n        <RestoreBackupDialog\n          open={this.state.restoreDialogOpen}\n          onClose={this.closeRestoreDialog}\n          potentialBackups={this.state.potentialBackups}\n        />\n        <Typography variant='subtitle1'>\n                    World Controls\n        </Typography>\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>\n                <Button\n                  variant='contained'\n                  color='primary'\n                  onClick={this.backupMinecraftWorld}\n                >\n                  <Backup />\n                                    Backup World\n                </Button>\n                <Button\n                  variant='contained'\n                  color='primary'\n                  onClick={this.openRestoreDialog} disabled\n                >\n                  <Restore />\n                                    Restore World\n                </Button>\n                <Button\n                  variant='contained'\n                  color='primary'\n                  onClick={this.openBackupBeforeNewDialog}\n                >\n                  <New />\n                                    New World\n                </Button>\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n        <Typography variant='subtitle1'>\n                    Send Minecraft Command\n        </Typography>\n        <FormControl fullWidth>\n          <InputLabel htmlFor='rawCommand'>\n                        Enter command. Click the Help icon for a full list of supported commands.\n          </InputLabel>\n          <Input id='rawCommand' fullWidth value={this.state.rawCommand} onChange={this.updateRawCommandType} onKeyPress={this.updateRawCommandType} />\n          <Divider />\n        </FormControl>\n        <Tooltip title='List available Minecraft commands'>\n          <Button\n            variant='contained'\n            color='primary'\n            onClick={this.openRawCommandDialog}\n          >\n            <Help />\n          </Button>\n        </Tooltip>\n        <Button\n          variant='contained'\n          color='primary'\n          onClick={this.onClearCommand}\n        >Clear Command\n        </Button>\n        <Button\n          variant='contained'\n          color='primary'\n          disabled={!this.props.minecraftProperties.started && !this.state.rawCommand === ''}\n          onClick={this.onSendCommand}\n        >Send Command\n        </Button>\n        <FormControl fullWidth>\n          <TextField\n            label='Command Output'\n            multiline\n            rows='6'\n            margin='normal'\n            variant='outlined'\n            value={this.state.commandOutput}\n          />\n        </FormControl>\n        <Button\n          variant='contained'\n          color='primary'\n          onClick={this.onClearOutput}\n        >Clear Output\n        </Button>\n      </div>\n    );\n  }\n}\n\nWorldControls.propTypes = {\n  minecraftProperties: PropTypes.object.isRequired\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport axios from 'axios';\n\nimport 'typeface-roboto';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Save from '@material-ui/icons/Save';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\n\nexport default function Preferences (props) {\n  const [apiSettings, setApiSettings] = useState(props.apiSettings);\n  // console.log(apiSettings);\n\n  const savePreferences = () => {\n    axios({\n      method: 'post',\n      url: '/api/saveApiPreferences',\n      params: {\n        settings: JSON.stringify(apiSettings)\n      }\n    }, err => {\n      console.log('An error occurred contacting the Minecraft server.', err);\n    });\n  };\n\n  const handleChange = (event, value) => {\n    const oldApiSettings = Object.assign({}, apiSettings);\n    let newApiSettings = { autoStartMinecraft: value };\n    newApiSettings = Object.assign(oldApiSettings, newApiSettings);\n    setApiSettings(newApiSettings);\n  };\n\n  return (\n    <div>\n      <Button\n        variant='contained'\n        color='primary'\n        onClick={savePreferences}\n      >\n        <Save />\n                Save\n      </Button>\n      <Table size='small'>\n        <TableBody>\n          <TableRow>\n            <TableCell>\n              <FormControl fullWidth>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={apiSettings.autoStartMinecraft}\n                      onChange={handleChange}\n                    />\n                  } label='Auto-start Minecraft with this website?'\n                />\n              </FormControl>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>\n              <FormControl fullWidth>\n                <InputLabel\n                  htmlFor='{ ipAddress }'\n                >\n                                    The IP address to listen on.\n                </InputLabel>\n                <Input\n                  id='ipAddress'\n                  value={apiSettings.ipAddress}\n                  fullWidth\n                />\n              </FormControl>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>\n              <FormControl fullWidth>\n                <InputLabel\n                  htmlFor='{ ipPort }'\n                >\n                                    The IP port to listen on.\n                </InputLabel>\n                <Input\n                  id='ipPort'\n                  value={apiSettings.ipPort}\n                  fullWidth\n                />\n              </FormControl>\n            </TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n\nPreferences.propTypes = {\n  apiSettings: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport 'typeface-roboto';\nimport Help from '@material-ui/icons/Help';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\n\nclass About extends React.Component {\n  render () {\n    const minecraftProperties = this.props.minecraftProperties;\n    const GB = 1024 ** 3;\n    const mem = minecraftProperties.nodeInfo ? minecraftProperties.nodeInfo.mem / GB : 'Unknown';\n\n    return (\n      <div>\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>\n                <Typography variant='h6'>\n                  <a href={minecraftProperties.eulaUrl} target='_blank' rel='noopener noreferrer'>Minecraft End User License Agreement</a>\n                </Typography>\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n        <Table size='small'>\n          <TableBody>\n            <TableRow>\n              <TableCell>\n                <Typography variant='subtitle2'>\n                  Project Owner\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <Typography>\n                  nickrnet\n                </Typography>\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>\n                <Typography variant='subtitle2'>\n                  Contributors\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <Typography>\n                  DevBonBon\n                </Typography>\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n        <p></p>\n        <Table size='small'>\n          <TableHead>\n            <TableRow>\n              <TableCell>\n                <Typography variant='subtitle2'>\n                  System Information\n                </Typography>\n              </TableCell>\n              <TableCell> </TableCell>\n              <TableCell> </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            <TableRow>\n              <TableCell>\n                <Typography variant='subtitle2'>\n                  CPU\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <Typography>\n                  {minecraftProperties.nodeInfo ? minecraftProperties.nodeInfo.cpus[0].model + ', ' + minecraftProperties.nodeInfo.cpus.length + ' cores' : 'Unknown'}\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <Tooltip title='Logical CPUs, both physical and virtual'>\n                  <Help />\n                </Tooltip>\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>\n                <Typography variant='subtitle2'>\n                  RAM\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <Typography>\n                  {mem} GB\n                </Typography>\n              </TableCell>\n              <TableCell> </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>\n                <Typography variant='subtitle2'>\n                  NodeJS Version\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <Typography>\n                  {minecraftProperties.nodeInfo ? minecraftProperties.nodeInfo.version : 'Unknown'}\n                </Typography>\n              </TableCell>\n              <TableCell> </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n        {/* <div>\n                    <script type=\"text/javascript\">\n                        amzn_assoc_ad_type = \"banner\";\n                        amzn_assoc_marketplace = \"amazon\";\n                        amzn_assoc_region = \"US\";\n                        amzn_assoc_placement = \"assoc_banner_placement_default\";\n                        amzn_assoc_banner_type = \"ez\";\n                        amzn_assoc_p = \"9\";\n                        amzn_assoc_width = \"180\";\n                        amzn_assoc_height = \"150\";\n                        amzn_assoc_tracking_id = \"nickrnet-20\";\n                        amzn_assoc_linkid = \"2c598468f363378d5fb52de183d72a89\";\n                    </script>\n                    <script src=\"https://z-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&Operation=GetScript&ID=OneJS&WS=1\"></script>\n                </div>\n                <p>\n                    Support this project by making purchases from Amazon.\n                </p>\n                <iframe src=\"https://rcm-na.amazon-adsystem.com/e/cm?o=1&p=9&l=ez&f=ifr&linkID=94a6a8bcf4c0832533e2ed9b53ea4ccc&t=nickrnet-20&tracking_id=nickrnet-20\" width=\"180\" height=\"150\" scrolling=\"no\" border=\"1\" marginWidth=\"0\" title=\"Amazon\" style={ styles.container } frameBorder=\"0\"></iframe> */}\n      </div>\n    );\n  }\n}\n\nAbout.propTypes = {\n  minecraftProperties: PropTypes.object.isRequired\n};\n\nexport default About;\n","import React from 'react';\n\nimport axios from 'axios';\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport AppBar from '@material-ui/core/AppBar';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nimport Dashboard from './Dashboard/Dashboard.js';\nimport Players from './Players/Players.js';\nimport ServerControls from './ServerControls/ServerControls.js';\nimport WorldControls from './ServerControls/WorldControls.js';\nimport Preferences from './Preferences/Preferences.js';\nimport About from './About/About.js';\n\nconst debug = false;\n\nexport default class App extends React.Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      debug: debug,\n      ipInfo: {},\n      apiSettings: {},\n      minecraftStatus: {},\n      minecraftStatusMessage: '',\n      eulaOpen: false,\n      minecraftProperties: {},\n      playerInfo: {},\n      value: 0\n    };\n    if (debug) {\n      console.log('App state:', this.state);\n    }\n    this.handleAcceptEula = this.handleAcceptEula.bind(this);\n    this.handleDeclineEula = this.handleDeclineEula.bind(this);\n    this.getIpInfo = this.getIpInfo.bind(this);\n    this.getMinecraftServerProperties = this.getMinecraftServerProperties.bind(this);\n    this.getMinecraftStatus = this.getMinecraftStatus.bind(this);\n    this.startMinecraftStatus = this.startMinecraftStatus.bind(this);\n    this.stopMinecraftStatus = this.stopMinecraftStatus.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.stopMinecraftStatus = this.stopMinecraftStatus.bind(this);\n\n    this.startMinecraftStatus();\n  }\n\n  getTheme () {\n    const theme = createMuiTheme({\n      tableRowColumn: {\n        height: 60\n      },\n      container: {\n        margin: 10,\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontSize: '0.95rem'\n      },\n      overrides: {\n        MuiButton: {\n          root: {\n            margin: '10px'\n          }\n        }\n      }\n    });\n\n    return theme;\n  }\n\n  componentWillUnmount () {\n    if (debug) {\n      console.log('Application shutting down.');\n    }\n    this.stopMinecraftStatus();\n  }\n\n  handleChange (event, value) {\n    this.setState({ value });\n  }\n\n  getIpInfo () {\n    let ipInfo;\n\n    axios('/api/ipInfo').then(res => {\n      ipInfo = res.data;\n      this.setState({ ipInfo });\n    });\n  }\n\n  getMinecraftStatus (pingWait) {\n    let minecraftStatusMessage = '';\n    const normalPingTime = 5 * 1000;\n    const appendTime = 5 * 1000;\n    const maxTime = 120 * 1000;\n    let pingTime;\n\n    // normally ping every 5 seconds\n    // if a fast ping was requested (from constructor/DidMount), honor it\n    // once trouble hits, add 5 seconds until 2 minutes is reached, then reset to 60 seconds\n    // once re/successful, reset to 60 seconds\n    if (!pingWait) {\n      pingTime = normalPingTime;\n    } else if (pingWait < 1000) {\n      pingTime = pingWait;\n    } else if (pingWait > maxTime) {\n      pingTime = normalPingTime;\n    } else {\n      pingTime = pingWait;\n    }\n\n    if (this.statusTimerId) {\n      clearTimeout(this.statusTimerId);\n    }\n\n    this.statusTimerId = setTimeout(() => {\n      axios('/api/status').then(res => {\n        const apiSettings = res.data.apiSettings;\n        const minecraftProperties = res.data.minecraftProperties;\n        this.setState({ apiSettings });\n        this.setState({ minecraftProperties });\n        if (!minecraftProperties.settings.javaHome || !minecraftProperties.settings.javaPath) {\n          minecraftStatusMessage = 'Java is not properly installed.';\n        } else if (!minecraftProperties.started) {\n          minecraftStatusMessage = 'Minecraft is not running.';\n        } else if (!minecraftProperties.acceptedEula) {\n          minecraftStatusMessage = 'The Minecraft EULA needs to be accepted.';\n        }\n        this.setState({ minecraftStatusMessage });\n\n        if (debug) {\n          console.log('Setting Minecraft status poller to run in', pingTime / 1000, 'seconds.');\n        }\n        this.getMinecraftStatus();\n      },\n      err => {\n        const minecraftStatus = {};\n\n        this.setState({ minecraftStatus });\n        pingTime = pingTime + appendTime;\n\n        if (debug) {\n          console.log('Error occurred:', err);\n          console.log('Application state:', this.state);\n          console.log('Setting Minecraft status poller to run in', pingTime / 1000, 'seconds.');\n        }\n        this.getMinecraftStatus(pingTime);\n      });\n    }, pingTime);\n  }\n\n  getMinecraftServerProperties () {\n    if (debug) {\n      console.log('Retrieving Minecraft Server properties.');\n    }\n\n    axios('/api/properties').then(res => {\n      let minecraftServerProperties = res.data;\n      minecraftServerProperties = minecraftServerProperties.properties;\n      this.setState({ minecraftServerProperties });\n      if (debug) {\n        console.log('MinecraftServer properties:', minecraftServerProperties);\n      }\n    },\n    err => {\n      console.log('An error occurred contacting the Minecraft server.', err);\n    }).catch(e => {\n      console.log('An error occurred getting the server properties:', e);\n    });\n  }\n\n  handleAcceptEula () {\n    axios({\n      method: 'post',\n      url: '/api/acceptEula'\n    }).then(() => {\n      this.setState({ eulaOpen: false });\n    }, error => {\n      console.log('error:', error);\n      this.setState({ eulaOpen: false });\n    }).catch(error => {\n      console.log('error:', error);\n      this.setState({ eulaOpen: false });\n    });\n  }\n\n  handleDeclineEula () {\n    axios({\n      method: 'post',\n      url: '/api/stop'\n    }).then(() => {\n      this.setState({ eulaOpen: false });\n    }, error => {\n      console.log('error:', error);\n      this.setState({ eulaOpen: false });\n    }).catch(error => {\n      console.log('error:', error);\n      this.setState({ eulaOpen: false });\n    });\n  }\n\n  runOnce () {\n    this.getIpInfo();\n    this.getMinecraftServerProperties();\n  }\n\n  startMinecraftStatus () {\n    this.runOnce();\n    this.getMinecraftStatus(25);\n  }\n\n  stopMinecraftStatus () {\n    if (debug) {\n      console.log('Stopping Minecraft server poller.');\n    }\n\n    if (this.statusTimerId) {\n      clearTimeout(this.statusTimerId);\n    }\n\n    if (this.playersTimerId) {\n      clearTimeout(this.playersTimerId);\n    }\n  }\n\n  render () {\n    const minecraftProperties = this.state.minecraftProperties;\n\n    return (\n      <MuiThemeProvider theme={this.getTheme()}>\n        <AppBar position='static'>\n          <Tabs\n            value={this.state.value}\n            onChange={this.handleChange}\n            centered\n          >\n            <Tab label='Dashboard' />\n            <Tab label='Players' />\n            <Tab label='World Controls' />\n            <Tab label='Server Controls' />\n            <Tab label='Preferences' />\n            <Tab label='About' />\n          </Tabs>\n        </AppBar>\n        {this.state.value === 0 && <Dashboard\n          ipInfo={this.state.ipInfo}\n          minecraftProperties={minecraftProperties}\n                                   />}\n        {this.state.value === 1 && <Players\n          minecraftProperties={minecraftProperties}\n                                   />}\n        {this.state.value === 2 && <WorldControls\n          minecraftProperties={minecraftProperties}\n          startMinecraftStatus={this.startMinecraftStatus}\n          stopMinecraftStatus={this.stopMinecraftStatus}\n                                   />}\n        {this.state.value === 3 && <ServerControls\n          minecraftProperties={minecraftProperties}\n          startMinecraftStatus={this.startMinecraftStatus}\n          stopMinecraftStatus={this.stopMinecraftStatus}\n                                   />}\n        {this.state.value === 4 && <Preferences\n          apiSettings={this.state.apiSettings}\n                                   />}\n        {this.state.value === 5 && <About\n          minecraftProperties={minecraftProperties}\n                                   />}\n        <Snackbar\n          anchorOrigin={\n            {\n              vertical: 'bottom',\n              horizontal: 'left'\n          }\n          }\n          open={!minecraftProperties.started}\n          message={this.state.minecraftStatusMessage}\n        />\n      </MuiThemeProvider>\n    );\n  }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register () {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW (swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker (swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}