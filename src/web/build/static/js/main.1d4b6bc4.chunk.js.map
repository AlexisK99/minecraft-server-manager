{"version":3,"sources":["Dashboard/ServerSummary.js","Dashboard/PlayerListItem.js","Dashboard/PlayersSummary.js","Dashboard/Dashboard.js","Players/PlayerListItem.js","Players/Players.js","ServerControls/ActionInProgressDialog.js","ServerControls/ConfirmVersionDialog.js","ServerControls/ConfirmRestartDialog.js","ServerControls/ServerProperties.js","ServerControls/ServerControls.js","ServerControls/BackupBeforeNewDialog.js","ServerControls/RawMinecraftCommandDialog.js","ServerControls/BackupItem.js","ServerControls/RestoreBackupDialog.js","ServerControls/WorldControls.js","Preferences/Preferences.js","About/About.js","App.js","registerServiceWorker.js","index.js"],"names":["styles","container","margin","fontFamily","fontSize","ServerSummary","minecraftProperties","this","props","acceptedEula","Tooltip","title","started","updateAvailable","detectedVersion","major","TableCell","Typography","minor","release","rightNow","Date","now","uptime","startTime","seconds","h","Math","floor","m","s","filter","join","formatTime","style","variant","Table","size","TableBody","TableRow","minecraftOnline","minecraftUpdate","minecraftEulaAcceptedStatus","minecraftVersion","ipInfo","address","port","minecraftUptime","React","Component","PlayerListItem","player","name","PlayersSummary","online","key","playerInfo","players","summary","TableHead","map","displayPlayerListItems","Dashboard","opped","banned","whitelisted","IconButton","onClick","pardonPlayer","banPlayer","kickPlayer","deopPlayer","opPlayer","whitelistPlayer","Players","bind","found","forEach","p","axios","method","url","params","command","then","err","console","log","ActionInProgressDialog","onClose","other","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","color","autoFocus","ConfirmVersionDialog","selectedVersionToInstall","onNo","onYes","version","full","ConfirmRestartDialog","ServerProperties","currentMinecraftProperties","Object","assign","serverProperties","useState","dirtyProps","setDirtyProps","progressDialogOpen","setProgressDialogOpen","restartDialogOpen","setRestartDialogOpen","setServerProperties","openProgressDialog","closeRestartDialog","refreshProperties","res","data","properties","updatePropertyType","event","property","newMinecraftProps","changed","length","target","id","value","open","newProperties","JSON","stringify","disabled","maxHeight","overflow","FormControl","fullWidth","InputLabel","htmlFor","Input","onChange","onKeyPress","ServerControls","state","versionDialogOpen","versionToInstall","checkVersionToInstall","closeProgressDialog","closeVersionDialog","handleVersionConfirmation","installMinecraft","restartMinecraft","selectVersionToInstall","startMinecraft","stopMinecraft","setState","MenuItem","catch","error","startMinecraftStatus","releaseVersions","versions","releaseVersion","settings","javaHome","javaPath","Select","displayReleaseVersions","handleAcceptEula","installed","BackupBeforeNewDialog","cancelDialog","newOnly","backupAndNew","RawMinecraftCommandDialog","closeDialog","listCommands","updateRawCommandField","ListItem","button","ListItemText","primary","Divider","fullScreen","List","dense","minecraftCommands","BackupItem","backup","fileName","worldName","date","time","RestoreBackupDialog","backupValue","potentialBackups","native","inputProps","displayBackupItems","FormHelperText","WorldControls","backupDialogOpen","commandOutput","helpDialogOpen","rawMinecraftCommandDialogOpen","rawCommand","restoreDialogOpen","restoreBackup","backupAndNewMinecraftWorld","backupAndRestoreMinecraftWorld","backupMinecraftWorld","closeBackupDialog","closeRawCommandDialog","closeRestoreDialog","getMinecraftWorldBackups","newMinecraftWorld","onClearCommand","onClearOutput","onSendCommand","openBackupBeforeNewDialog","openRawCommandDialog","openRestoreDialog","restoreMinecraftWorld","updateRawCommandDialog","updateRawCommandType","worldBackup","filename","backupList","response","output","backupFile","fullHelp","TextField","label","multiline","rows","Preferences","apiSettings","setApiSettings","FormControlLabel","control","Checkbox","checked","autoStartMinecraft","oldApiSettings","newApiSettings","ipAddress","ipPort","About","GB","mem","nodeInfo","href","eulaUrl","rel","cpus","model","debug","App","minecraftStatus","minecraftStatusMessage","eulaOpen","handleDeclineEula","getIpInfo","getMinecraftServerProperties","getMinecraftStatus","stopMinecraftStatus","handleChange","createMuiTheme","MuiButton","root","pingWait","pingTime","statusTimerId","clearTimeout","setTimeout","minecraftServerProperties","e","runOnce","playersTimerId","MuiThemeProvider","theme","getTheme","AppBar","position","Tabs","centered","Tab","Snackbar","anchorOrigin","vertical","horizontal","message","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.1d4b6bc4.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport 'typeface-roboto';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\n\nimport CheckCircle from '@material-ui/icons/CheckCircle';\nimport Error from '@material-ui/icons/Error';\nimport AssignmentLate from '@material-ui/icons/AssignmentLate';\n\nconst styles = {\n    container: {\n        margin: 10,\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontSize: '0.95rem'\n    }\n};\n\nfunction formatTime (seconds) {\n    const h = Math.floor(seconds / 3600);\n    const m = Math.floor((seconds % 3600) / 60);\n    const s = Math.floor(seconds % 60);\n    return [\n        h,\n        m > 9 ? m : '0' + m,\n        s > 9 ? s : '0' + s,\n    ].filter(s => s).join(':');\n}\n\nclass ServerSummary extends React.Component {\n    minecraftEulaAcceptedStatus () {\n        let minecraftProperties = this.props.minecraftProperties;\n        \n        if (minecraftProperties && minecraftProperties.acceptedEula) {\n            return (\n                <div>\n                    <Tooltip title=\"Accepted\">\n                        <CheckCircle />\n                    </Tooltip>\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    <Tooltip title=\"Not accepted\">\n                        <Error />\n                    </Tooltip>\n                </div>\n            );\n        }\n    }\n\n    minecraftOnline () {\n        let minecraftProperties = this.props.minecraftProperties;\n        \n        if (minecraftProperties && minecraftProperties.started) {\n            return (\n                <div>\n                    <Tooltip title=\"Running\">\n                        <CheckCircle />\n                    </Tooltip>\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    <Tooltip title=\"Minecraft is not running\">\n                        <Error />\n                    </Tooltip>\n                </div>\n            );\n        }\n    }\n    \n    minecraftUpdate () {\n        let minecraftProperties = this.props.minecraftProperties;\n    \n        if (minecraftProperties && minecraftProperties.updateAvailable) {\n            return (\n                <div>\n                    <Tooltip title=\"Update Available\">\n                        <AssignmentLate />\n                    </Tooltip>\n                </div>\n            );\n        } else {\n            return <div></div>;\n        }\n    }\n    \n    minecraftVersion () {\n        let minecraftProperties = this.props.minecraftProperties;\n    \n        if (minecraftProperties && minecraftProperties.detectedVersion && minecraftProperties.detectedVersion.major) {\n            return (\n                <TableCell>\n                    <Typography>\n                        { minecraftProperties.detectedVersion.major + '.' + minecraftProperties.detectedVersion.minor + '.' + minecraftProperties.detectedVersion.release }\n                    </Typography>\n                </TableCell>\n            );\n        } else {\n            return <TableCell></TableCell>;\n        }\n    }\n\n    minecraftUptime () {\n        let minecraftProperties = this.props.minecraftProperties;\n        let rightNow = Date.now();\n        let uptime = 0;\n    \n        if (minecraftProperties && minecraftProperties.started && minecraftProperties.startTime > 0) {\n            uptime = (rightNow - minecraftProperties.startTime)/1000;\n            return (\n                <TableCell>\n                    <Typography>\n                        { formatTime(uptime) }\n                    </Typography>\n                </TableCell>\n            );\n        } else {\n            return(\n                <TableCell></TableCell>\n            );\n        }\n    }\n\n    render () {\n        return (\n            <div style={ styles.container }>\n                <Typography variant=\"subtitle1\">\n                    Server Information\n                </Typography>\n                <Table size=\"small\">\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Minecraft Status\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                { this.minecraftOnline() }\n                            </TableCell>\n                            <TableCell>\n                                { this.minecraftUpdate() }\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    EULA Accepted\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                { this.minecraftEulaAcceptedStatus() }\n                            </TableCell>\n                            <TableCell></TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Minecraft Version\n                                </Typography>\n                            </TableCell>\n                            { this.minecraftVersion() }\n                            <TableCell></TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Server Address\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography>\n                                    { this.props.ipInfo.address ? this.props.ipInfo.address + ':' + this.props.ipInfo.port : 'Not known.' }\n                                </Typography>\n                            </TableCell>\n                            <TableCell></TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Server Uptime\n                                </Typography>\n                            </TableCell>\n                            { this.minecraftUptime() }\n                            <TableCell></TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nServerSummary.propTypes = {\n    ipInfo: PropTypes.object.isRequired,\n    minecraftProperties: PropTypes.object.isRequired\n};\n\nexport default ServerSummary;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport 'typeface-roboto';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\n\nexport default class PlayerListItem extends React.Component {\n\n    render () {\n        let player = this.props.player || {};\n\n        return (\n            <TableRow>\n                <TableCell>\n                    <Typography>\n                        { player.name }\n                    </Typography>\n                </TableCell>\n            </TableRow>\n        );\n    }\n}\n\nPlayerListItem.propTypes = {\n    player: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport 'typeface-roboto';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\n\nimport PlayerListItem from './PlayerListItem';\n\nconst styles = {\n    container: {\n        margin: 10,\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontSize: '0.95rem'\n    }\n};\n\nexport default class PlayersSummary extends React.Component {\n    displayPlayerListItems (player) {\n        if (player.online) {\n            return (\n                <PlayerListItem\n                    key = { player.key }\n                    player = { player }\n                />\n            );\n        }\n    }\n\n    render () {\n        let minecraftProperties = this.props.minecraftProperties;\n        let playerInfo = minecraftProperties.playerInfo;\n        let players = [];\n        let summary = '';\n\n        if (playerInfo) {\n            players = playerInfo.players;\n            summary = playerInfo.summary;\n        }\n        \n        return (\n            <div style = { styles.container }>\n                <Typography variant=\"subtitle1\">\n                    Connected Players\n                </Typography>\n                <Table size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    { summary ? summary : 'Waiting on Minecraft server...' }\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n                </Table>\n                <Table>\n                    <TableBody>\n                        { players.map(this.displayPlayerListItems) }\n                    </TableBody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nPlayersSummary.propTypes = {\n    minecraftProperties: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ServerSummary from './ServerSummary.js';\nimport PlayersSummary from './PlayersSummary.js';\n\nconst styles = {\n    container: {\n        margin: 10,\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontSize: '0.95rem'\n    }\n};\n\nclass Dashboard extends React.Component {\n    render () {\n        return (\n            <div style={ styles.container }>\n                <ServerSummary ipInfo = { this.props.ipInfo } minecraftProperties = { this.props.minecraftProperties } />\n                <PlayersSummary minecraftProperties = { this.props.minecraftProperties } />\n            </div>\n        );\n    }\n}\n\nDashboard.propTypes = {\n    ipInfo: PropTypes.object.isRequired,\n    minecraftProperties: PropTypes.object.isRequired\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport 'typeface-roboto';\nimport Ban from '@material-ui/icons/Error';\nimport IconButton from '@material-ui/core/IconButton';\nimport Kick from '@material-ui/icons/Error';\nimport NetworkOnline from '@material-ui/icons/SignalWifi4Bar';\nimport NetworkOffline from '@material-ui/icons/SignalWifiOff';\nimport OpStatus from '@material-ui/icons/VerifiedUser';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport WhitelistIcon from '@material-ui/icons/PlaylistAdd';\n\nexport default function PlayerListItem (props) {\n\n    const banPlayer = () => {\n        props.banPlayer(props.player.name);\n    };\n    const pardonPlayer = () => {\n        props.pardonPlayer(props.player.name);\n    };\n    const kickPlayer = () => {\n        props.kickPlayer(props.player.name);\n    };\n    const opPlayer = () => {\n        props.opPlayer(props.player.name);\n    };\n    const deopPlayer = () => {\n        props.deopPlayer(props.player.name);\n    };\n    const whitelistPlayer = () => {\n        props.whitelistPlayer(props.player.name);\n    };\n\n    return (\n        <TableRow>\n            <TableCell>\n                <Typography>\n                    { props.player.name }\n                </Typography>\n            </TableCell>\n            <TableCell>{ props.player.online ? \n                <Tooltip title=\"Online\">\n                    <NetworkOnline />\n                </Tooltip> : \n                <Tooltip title=\"Offline\">\n                    <NetworkOffline />\n                </Tooltip>\n            }{ props.player.opped ?\n                <Tooltip title=\"Opped\">\n                    <OpStatus />\n                </Tooltip> : <span></span>\n            }{ props.player.banned ?\n                <Tooltip title=\"Banned\">\n                    <Ban />\n                </Tooltip> : <span></span>\n            }{ props.player.whitelisted ?\n                <Tooltip title=\"Whitelisted\">\n                    <WhitelistIcon />\n                </Tooltip> : <span></span>\n            }</TableCell>\n            <TableCell>\n                { props.player.banned ?\n                    <IconButton onClick = { pardonPlayer }>\n                        <Tooltip title=\"Pardon\">\n                            <Ban />\n                        </Tooltip>\n                    </IconButton> : \n                    <IconButton onClick = { banPlayer }>\n                        <Tooltip title=\"Ban\">\n                            <Ban />\n                        </Tooltip>\n                    </IconButton>\n                }\n                <IconButton onClick = { kickPlayer }>\n                    <Tooltip title=\"Kick\">\n                        <Kick />\n                    </Tooltip>\n                </IconButton>\n                { props.player.opped ?\n                    <IconButton onClick = { deopPlayer }>\n                        <Tooltip title=\"De Op\">\n                            <OpStatus />\n                        </Tooltip>\n                    </IconButton> : \n                    <IconButton onClick = { opPlayer }>\n                        <Tooltip title=\"Op\">\n                            <OpStatus />\n                        </Tooltip>\n                    </IconButton>\n                }\n                { !props.player.whitelisted ?\n                    <IconButton onClick = { whitelistPlayer }>\n                        <Tooltip title=\"Whitelist\">\n                            <WhitelistIcon />\n                        </Tooltip>\n                    </IconButton> : <div></div>\n                }\n            </TableCell>\n        </TableRow>\n    );\n}\n\nPlayerListItem.propTypes = {\n    player: PropTypes.object.isRequired,\n    whitelistPlayer: PropTypes.func.isRequired,\n    deopPlayer: PropTypes.func.isRequired,\n    opPlayer: PropTypes.func.isRequired,\n    kickPlayer: PropTypes.func.isRequired,\n    pardonPlayer: PropTypes.func.isRequired,\n    banPlayer: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport axios from 'axios';\n\nimport 'typeface-roboto';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\n\nimport PlayerListItem from './PlayerListItem';\n\nconst styles = {\n    container: {\n        margin: 10,\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontSize: '0.95rem'\n    }\n};\n\nexport default class Players extends React.Component {\n    constructor(props) {\n        super(props);\n        this.banPlayer = this.banPlayer.bind(this);\n        this.deopPlayer = this.deopPlayer.bind(this);\n        this.displayPlayerListItems = this.displayPlayerListItems.bind(this);\n        this.kickPlayer = this.kickPlayer.bind(this);\n        this.opPlayer = this.opPlayer.bind(this);\n        this.pardonPlayer = this.pardonPlayer.bind(this);\n        this.whitelistPlayer = this.whitelistPlayer.bind(this);\n    }\n\n    banPlayer (player) {\n        let found = false,\n            players = this.props.minecraftProperties.playerInfo.players;\n\n        players.forEach(p => {\n            if (p.name === player) {\n                found = true;\n            }\n        });\n        \n        if (found) {\n            axios({\n                method: 'post',\n                url: '/api/command',\n                params: {\n                    command: '/ban ' + player\n                }\n            }).then(() => {\n                return;\n            },\n            err => {\n                console.log('An error occurred contacting the Minecraft server.', err);\n            });\n        }\n    }\n\n    pardonPlayer (player) {\n        let found = false,\n            players = this.props.minecraftProperties.playerInfo.players;\n\n        players.forEach(p => {\n            if (p.name === player) {\n                found = true;\n            }\n        });\n\n        if (found) {\n            axios({\n                method: 'post',\n                url: '/api/command',\n                params: {\n                    command: '/pardon ' + player\n                }\n            }).then(() => {\n                return;\n            },\n            err => {\n                console.log('An error occurred contacting the Minecraft server.', err);\n            });\n        }\n    }\n\n    kickPlayer (player) {\n        let found = false,\n            players = this.props.minecraftProperties.playerInfo.players;\n\n        players.forEach(p => {\n            if (p.name === player) {\n                found = true;\n            }\n        });\n\n        if (found) {\n            axios({\n                method: 'post',\n                url: '/api/command',\n                params: {\n                    command: '/kick ' + player\n                }\n            }).then(() => {\n                return;\n            },\n            err => {\n                console.log('An error occurred contacting the Minecraft server.', err);\n            });\n        }\n    }\n\n    opPlayer (player) {\n        let found = false,\n            players = this.props.minecraftProperties.playerInfo.players;\n\n        players.forEach(p => {\n            if (p.name === player) {\n                found = true;\n            }\n        });\n\n        if (found) {\n            axios({\n                method: 'post',\n                url: '/api/command',\n                params: {\n                    command: '/op ' + player\n                }\n            }).then(() => {\n                return;\n            },\n            err => {\n                console.log('An error occurred contacting the Minecraft server.', err);\n            });\n        }\n    }\n\n    deopPlayer (player) {\n        let found = false,\n            players = this.props.minecraftProperties.playerInfo.players;\n\n        players.forEach(p => {\n            if (p.name === player) {\n                found = true;\n            }\n        });\n\n        if (found) {\n            axios({\n                method: 'post',\n                url: '/api/command',\n                params: {\n                    command: '/deop ' + player\n                }\n            }).then(() => {\n                return;\n            },\n            err => {\n                console.log('An error occurred contacting the Minecraft server.', err);\n            });\n        }\n    }\n\n    whitelistPlayer (player) {\n        let found = false,\n            players = this.props.minecraftProperties.playerInfo.players;\n\n        players.forEach(p => {\n            if (p.name === player) {\n                found = true;\n            }\n        });\n\n        if (found) {\n            axios({\n                method: 'post',\n                url: '/api/command',\n                params: {\n                    command: '/whitelist ' + player\n                }\n            }).then(() => {\n                return;\n            },\n            err => {\n                console.log('An error occurred contacting the Minecraft server.', err);\n            });\n        }\n    }\n\n    displayPlayerListItems (player) {\n        return (\n            <PlayerListItem\n                key = { player.key }\n                player = { player }\n                banPlayer = { this.banPlayer }\n                pardonPlayer = { this.pardonPlayer }\n                kickPlayer = { this.kickPlayer }\n                opPlayer = { this.opPlayer }\n                deopPlayer = { this.deopPlayer }\n                whitelistPlayer = { this.whitelistPlayer }\n            />\n        );\n    }\n\n    render () {\n        let minecraftProperties = this.props.minecraftProperties;\n        let playerInfo = minecraftProperties.playerInfo;\n        let players = [];\n        let summary = '';\n        \n        if (playerInfo && playerInfo.players) {\n            summary = playerInfo.summary;\n            players = playerInfo.players;\n        }\n        \n        return (\n            <div style = { styles.container }>\n                <Typography variant=\"subtitle1\">\n                    { summary ? summary : 'Waiting on Minecraft server...' }\n                </Typography>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Player\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Status\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Actions\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        { players.map(this.displayPlayerListItems) }\n                    </TableBody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nPlayers.propTypes = {\n    minecraftProperties: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\n\nexport default function ActionInProgressDialog (props) {\n    const { onClose, ...other } = props;\n    return (\n        <Dialog { ...other }>\n            <DialogTitle>Please Wait</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Requested action in progress...\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    onClick = { onClose }\n                    variant=\"contained\"\n                    color = \"primary\"\n                    autoFocus>\n                    Close\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nActionInProgressDialog.propTypes = {\n    onClose: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\n\nexport default function ConfirmVersionDialog (props) {\n    const { detectedVersion, selectedVersionToInstall, onNo, onYes, ...other } = props;\n    // console.log('props:', props);\n    let version = \"\";\n\n    if (detectedVersion && detectedVersion.full) {\n        version = detectedVersion.full;\n    }\n    // TODO: Detect \"downgrade\".\n    return (\n        <Dialog { ...other }>\n            <DialogTitle>Confirm Version Change</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    The current running version is { version }, but the\n                    selected version is { selectedVersionToInstall ? selectedVersionToInstall.full : 'unknown' }. Changing\n                    to a lower version may delete the current world.\n                </DialogContentText>\n                <DialogContentText>\n                    Continue?\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    onClick = { onNo }\n                    color = \"primary\"\n                    variant=\"contained\"\n                    autoFocus>\n                    No\n                </Button>\n                <Button\n                    onClick = { onYes }\n                    color = \"primary\"\n                    variant=\"contained\">\n                    Yes\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nConfirmVersionDialog.propTypes = {\n    detectedVersion: PropTypes.object,\n    selectedVersionToInstall: PropTypes.object,\n    onNo: PropTypes.func.isRequired,\n    onYes: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\n\nexport default function ConfirmRestartDialog (props) {\n    const { onNo, onYes, ...other } = props;\n\n    return (\n        <Dialog { ...other }>\n            <DialogTitle>Confirm Minecraft Restart</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Saving new properties will restart the Minecraft server.\n                </DialogContentText>\n                <DialogContentText>\n                    Continue?\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    onClick = { onNo }\n                    color = \"primary\"\n                    variant=\"contained\"\n                    autoFocus>\n                    No\n                </Button>\n                <Button\n                    onClick = { onYes }\n                    color = \"primary\"\n                    variant=\"contained\">\n                    Yes\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nConfirmRestartDialog.propTypes = {\n    onNo: PropTypes.func.isRequired,\n    onYes: PropTypes.func.isRequired\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport axios from 'axios';\n\nimport 'typeface-roboto';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Refresh from '@material-ui/icons/Cached';\nimport Save from '@material-ui/icons/Save';\nimport Undo from '@material-ui/icons/Undo';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Typography from '@material-ui/core/Typography';\n\nimport ActionInProgressDialog from './ActionInProgressDialog.js';\nimport ConfirmRestartDialog from './ConfirmRestartDialog.js';\n\nexport default function ServerProperties (props) {\n    let currentMinecraftProperties = Object.assign([], props.minecraftProperties.serverProperties);\n    const [dirtyProps, setDirtyProps] = useState(false);\n    const [progressDialogOpen, setProgressDialogOpen] = useState(false);\n    const [restartDialogOpen, setRestartDialogOpen] = useState(false);\n    const [serverProperties, setServerProperties] = useState(props.minecraftProperties.serverProperties);\n    \n    const openProgressDialog = () => {\n        setProgressDialogOpen(true);\n    };\n    \n    const closeProgressDialog = () => {\n        setProgressDialogOpen(false);\n    };\n    \n    const openRestartDialog = () => {\n        setRestartDialogOpen(true);\n    };\n    \n    const closeRestartDialog = () => {\n        setRestartDialogOpen(false);\n    };\n\n    const refreshProperties = () => {\n        openProgressDialog();\n        axios({\n            method: 'get',\n            url: `/api/refreshServerProperties`\n        }).then(res => {\n            setServerProperties(res.data.properties);\n            currentMinecraftProperties = Object.assign({}, res.data.properties);\n            setDirtyProps(false);\n            setProgressDialogOpen(false);\n        }, err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n            setProgressDialogOpen(false);\n        });\n    };\n\n    const saveProperties = () => {\n        closeRestartDialog();\n        openProgressDialog();\n        let newProperties = JSON.stringify(serverProperties);\n        axios({\n            method: 'post',\n            url: `/api/saveMinecraftProperties`,\n            params: {\n                newProperties: newProperties\n            }\n        }).then(() => {\n            refreshProperties();\n        }, err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n            refreshProperties();\n        });\n    };\n\n    const undoPropertyEdits = () => {\n        setServerProperties(currentMinecraftProperties);\n        setDirtyProps(false);\n    };\n\n    const updatePropertyType = (event) => {\n        let newMinecraftProps = Object.assign([], serverProperties);\n        let changed = false;\n        let property;\n        for (let p = 0; p < newMinecraftProps.length; p++) {\n            property = newMinecraftProps[p];\n            if (property.name === event.target.id) {\n                if (property.value !== event.target.value) {\n                    property.value = event.target.value;\n                    changed = true;\n                }\n                break;\n            }\n        }\n        if (changed){\n            setServerProperties(newMinecraftProps);\n            setDirtyProps(true);\n        }\n    };\n\n    return (\n        <div>\n            <ActionInProgressDialog\n                open = { progressDialogOpen }\n                onClose = { closeProgressDialog }\n            />\n            <ConfirmRestartDialog\n                open = { restartDialogOpen }\n                onNo = { closeRestartDialog }\n                onYes = { saveProperties }\n            />\n            <Typography variant=\"subtitle1\">\n                Server Properties\n            </Typography>\n            <Typography>\n                Change Minecraft server properties. When finished, click <strong>Save</strong>.&nbsp;\n                <Typography variant=\"caption\">\n                    (Saving changes will require a Minecraft restart.)\n                </Typography>\n            </Typography>\n            <Typography>\n                <strong>Undo</strong> will reset all fields to the current running settings.\n            </Typography>\n            <Typography>\n                <strong>Refresh</strong> reads current values from the Minecraft server files.\n            </Typography>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={ refreshProperties }>\n                <Refresh />\n                Refresh\n            </Button>\n            <Button\n                disabled = { !dirtyProps }\n                variant=\"contained\"\n                color=\"primary\"\n                onClick = { openRestartDialog }>\n                <Save />\n                Save\n            </Button>\n            <Button\n                disabled = { !dirtyProps }\n                variant=\"contained\"\n                color=\"primary\"\n                onClick = { undoPropertyEdits }>\n                <Undo />\n                Undo\n            </Button>\n            <div style={{maxHeight: \"100vh\", overflow: \"auto\"}}>\n                <Table size=\"small\">\n                    <TableBody>\n                        <TableRow><TableCell></TableCell></TableRow>\n                        { serverProperties && serverProperties.length ? serverProperties.map(property => {\n                            return (\n                                <TableRow key={ property.name }>\n                                    <TableCell>\n                                        <FormControl fullWidth>\n                                            <InputLabel\n                                                htmlFor=\"{ property.name }\">\n                                                { property.name }\n                                            </InputLabel>\n                                            <Input\n                                                id = { property.name }\n                                                value = { property.value }\n                                                fullWidth\n                                                onChange = { updatePropertyType }\n                                                onKeyPress = { updatePropertyType }/>\n                                        </FormControl>\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        }) : <TableRow><TableCell>Waiting on Minecraft server...</TableCell></TableRow> }\n                    </TableBody>\n                </Table>\n            </div>\n        </div>\n    );\n}\n\nServerProperties.propTypes = {\n    minecraftProperties: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport axios from 'axios';\n\nimport 'typeface-roboto';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Restart from '@material-ui/icons/Autorenew';\nimport Select from '@material-ui/core/Select';\nimport Start from '@material-ui/icons/PlayArrow';\nimport Stop from '@material-ui/icons/Stop';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport UpdateAvailable from '@material-ui/icons/AssignmentLate';\n\nimport ActionInProgressDialog from './ActionInProgressDialog.js';\nimport ConfirmVersionDialog from './ConfirmVersionDialog.js';\nimport ServerProperties from './ServerProperties.js';\nimport { Tooltip } from '@material-ui/core';\n\nconst styles = {\n    container: {\n        margin: 10,\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontSize: '0.95rem'\n    }\n};\n\nclass ServerControls extends React.Component {\n    constructor (props) {\n        super(props);\n\n        let detectedVersion = props.minecraftProperties.detectedVersion;\n        if (!detectedVersion || !detectedVersion.full) {\n            detectedVersion = { full: 'latest' };\n        }\n        \n        this.state = {\n            progressDialogOpen: false,\n            versionDialogOpen: false,\n            versionToInstall: detectedVersion\n        };\n        this.checkVersionToInstall = this.checkVersionToInstall.bind(this);\n        this.closeProgressDialog = this.closeProgressDialog.bind(this);\n        this.closeVersionDialog = this.closeVersionDialog.bind(this);\n        this.handleVersionConfirmation = this.handleVersionConfirmation.bind(this);\n        this.openProgressDialog = this.openProgressDialog.bind(this);\n        this.installMinecraft = this.installMinecraft.bind(this);\n        this.restartMinecraft = this.restartMinecraft.bind(this);\n        this.selectVersionToInstall = this.selectVersionToInstall.bind(this);\n        this.startMinecraft = this.startMinecraft.bind(this);\n        this.stopMinecraft = this.stopMinecraft.bind(this);\n    }\n    \n    openProgressDialog () {\n        this.setState({ progressDialogOpen: true });\n    }\n    \n    closeProgressDialog () {\n        this.setState({ progressDialogOpen: false });\n    }\n\n    closeVersionDialog () {\n        this.setState({ versionToInstall: this.props.minecraftProperties.detectedVersion });\n        this.setState({ versionDialogOpen: false });\n    }\n    \n    checkVersionToInstall () {\n        if (this.props.minecraftProperties.detectedVersion.full && this.state.versionToInstall.full !== this.props.minecraftProperties.detectedVersion.full) {\n            this.setState({ versionDialogOpen: true });\n        } else {\n            this.installMinecraft();\n        }\n    }\n\n    displayReleaseVersions (version) {\n        return (\n            <MenuItem\n                key={ version.id }\n                value={ version.id }>\n                { version.id }\n            </MenuItem>\n        );\n    }\n    \n    handleAcceptEula () {\n        axios({\n            method: 'post',\n            url: '/api/acceptEula'\n        }).catch(error => {\n            console.log('An error occurred accepting the EULA:', error);\n        });\n    }\n\n    handleVersionConfirmation (value) {\n        if (value && typeof value === 'string') {\n            this.setState({ versionToInstall: {full: value} });\n        }\n        this.setState({ versionDialogOpen: false });\n        this.installMinecraft();\n    }\n\n    installMinecraft () {\n        this.setState({ progressDialogOpen: true });\n        // this.props.stopMinecraftStatus();\n        axios({\n            method: 'post',\n            url: `/api/install`,\n            params: {\n                version: this.state.versionToInstall.full\n            }\n        }).then(() => {\n            this.props.startMinecraftStatus();\n            this.setState({ progressDialogOpen: false });\n            this.selectVersionToInstall({target: {value: this.props.minecraftProperties.detectedVersion}});\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n        });\n    }\n\n    restartMinecraft () {\n        this.setState({ progressDialogOpen: true });\n        // this.props.stopMinecraftStatus();\n        axios({\n            method: 'post',\n            url: `/api/restart`\n        }).then(() => {\n            this.props.startMinecraftStatus();\n            this.setState({ progressDialogOpen: false });\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n        });\n    }\n\n    selectVersionToInstall (selectedVersionToInstall) {\n        let minecraftProperties = this.props.minecraftProperties,\n            releaseVersions = {},\n            versionToInstall = '';\n\n        if (minecraftProperties.versions) {\n            releaseVersions = minecraftProperties.versions.release;\n        }\n        \n        if (releaseVersions && releaseVersions.length) {\n            for (let releaseVersion of releaseVersions) {\n                if (releaseVersion.id === selectedVersionToInstall.target.value) {\n                    versionToInstall = { full: releaseVersion.id };\n                    break;\n                }\n            }\n            if (!versionToInstall) {\n                versionToInstall = { full: 'latest' };\n            }\n            this.setState({ versionToInstall });\n        }\n    }\n    \n    startMinecraft () {\n        this.setState({ progressDialogOpen: true });\n        axios({\n            method: 'post',\n            url: `/api/start`\n        }).then(() => {\n            this.props.startMinecraftStatus();\n            this.setState({ progressDialogOpen: false });\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n        });\n    }\n  \n    stopMinecraft () {\n        this.setState({ progressDialogOpen: true });\n        axios({\n            method: 'post',\n            url: `/api/stop`\n        }).then(() => {\n            // this.props.stopMinecraftStatus();\n            this.setState({ progressDialogOpen: false });\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n        });\n    }\n\n    render () {\n        let minecraftProperties = this.props.minecraftProperties;\n\n        return (\n            <div style={ styles.container }>\n                <ActionInProgressDialog\n                    open = { this.state.progressDialogOpen }\n                    onClose = { this.closeProgressDialog }\n                />\n                <ConfirmVersionDialog\n                    open = { this.state.versionDialogOpen }\n                    onNo = { this.closeVersionDialog }\n                    onYes = { this.handleVersionConfirmation }\n                    detectedVersion = { minecraftProperties.detectedVersion }\n                    selectedVersionToInstall = { this.state.versionToInstall }\n                />\n                <Typography variant=\"subtitle1\">\n                    Server Controls\n                </Typography>\n                <Table>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <Button\n                                    onClick={ this.startMinecraft }\n                                    disabled={ !minecraftProperties.settings.javaHome || !minecraftProperties.settings.javaPath || minecraftProperties.started }\n                                    variant=\"contained\"\n                                    color=\"primary\">\n                                    <Start />\n                                    Start\n                                </Button>\n                                <Button\n                                    onClick = { this.stopMinecraft }\n                                    disabled = { !minecraftProperties.started }\n                                    variant=\"contained\"\n                                    color=\"primary\">\n                                    <Stop />\n                                    Stop\n                                </Button>\n                                <Button\n                                    onClick = { this.restartMinecraft }\n                                    disabled = { !minecraftProperties.started }\n                                    variant=\"contained\"\n                                    color=\"primary\">\n                                    <Restart />\n                                    Restart\n                                </Button>\n                            </TableCell>\n                            <TableCell>\n                                <Button\n                                    onClick = { this.checkVersionToInstall }\n                                    variant=\"contained\"\n                                    color=\"primary\">\n                                    Install\n                                </Button>\n                                <Select\n                                    value={ this.state.versionToInstall.full }\n                                    onChange={ this.selectVersionToInstall }>\n                                    <MenuItem key=\"latest\" value=\"latest\">\n                                        <em>latest</em>\n                                    </MenuItem>\n                                    { minecraftProperties.versions && minecraftProperties.versions.release ? minecraftProperties.versions.release.map(this.displayReleaseVersions) : <div></div> }\n                                </Select>\n                            </TableCell>\n                            <TableCell>\n                                <Button\n                                    onClick = { this.handleAcceptEula }\n                                    disabled = { !minecraftProperties.installed || minecraftProperties.acceptedEula }\n                                    variant=\"contained\"\n                                    color=\"primary\">\n                                    Accept EULA\n                                </Button>\n                            </TableCell>\n                            <TableCell>\n                                { minecraftProperties.updateAvailable ?\n                                    <Tooltip\n                                        title=\"Update Available\">\n                                        <Button>\n                                            <UpdateAvailable />\n                                        </Button>\n                                    </Tooltip> : <div></div>\n                                }\n                                <Button\n                                    disabled\n                                    variant=\"contained\"\n                                    color=\"primary\">\n                                    Check for updates\n                                </Button>\n                            </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n                <ServerProperties minecraftProperties = { minecraftProperties }/>\n            </div>\n        );\n    }\n}\n\nServerControls.propTypes = {\n    minecraftProperties: PropTypes.object.isRequired,\n    startMinecraftStatus: PropTypes.func.isRequired,\n    stopMinecraftStatus: PropTypes.func.isRequired\n};\n\nexport default ServerControls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Button from '@material-ui/core/Button';\n    \nexport default class BackupBeforeNewDialog extends React.Component {\n\n    render () {\n        return (\n            <Dialog open = { this.props.open }>\n                <DialogContent>\n                    <DialogContentText>\n                        Would you like to backup the world first?\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick = { this.props.cancelDialog } color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick = { this.props.newOnly } color=\"primary\">\n                        No\n                    </Button>\n                    <Button onClick = { this.props.backupAndNew } color=\"primary\" autoFocus>\n                        Yes\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nBackupBeforeNewDialog.propTypes = {\n    open: PropTypes.bool.isRequired,\n    cancelDialog: PropTypes.func.isRequired,\n    newOnly: PropTypes.func.isRequired,\n    backupAndNew: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '@material-ui/core/Button';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nconst styles = {\n    container: {\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontSize: '0.95rem'\n    }\n};\n    \nexport default class RawMinecraftCommandDialog extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.closeDialog = this.closeDialog.bind(this);\n        this.listCommands = this.listCommands.bind(this);\n    }\n\n    closeDialog (command) {\n        this.props.updateRawCommandField(command);\n        this.props.onClose();\n    }\n\n    listCommands (command) {\n        return (\n            <ListItem key = { command.key } button onClick = { () => { this.closeDialog(command.command); } }>\n                <ListItemText primary = { command.command } />\n                <Divider />\n            </ListItem>\n        );\n    }\n\n    render () {\n        return (\n            <Dialog fullScreen open = { this.props.open } style = { styles.container } >\n                <DialogTitle>\n                    <IconButton onClick = { this.props.onClose }>\n                        <CloseIcon />\n                    </IconButton>\n                    Available Minecraft Commands\n                </DialogTitle>\n                <DialogContent>\n                    <List dense={ true }>\n                        { this.props.minecraftCommands ? this.props.minecraftCommands.map(this.listCommands) : <div></div> }\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick = { this.props.onClose } color=\"primary\">\n                        Cancel\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nRawMinecraftCommandDialog.propTypes = {\n    minecraftCommands: PropTypes.array.isRequired,\n    open: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    updateRawCommandField: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class BackupItem extends React.Component {\n    render () {\n        let backup = this.props.backup;\n\n        return (\n            <option value = { backup.fileName }>{ backup.worldName }: Taken { backup.date } at { backup.time }</option>\n        );\n    }\n}\n\nBackupItem.propTypes = {\n    backup: PropTypes.object.isRequired\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Select from '@material-ui/core/Select';\n\nimport BackupItem from './BackupItem';\n\nexport default class RestoreBackupDialog extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            backupValue: \"\"\n        };\n    }\n\n    displayBackupItems (backup) {\n        return (\n            <BackupItem\n                key = { backup.fileName }\n                backup = { backup }\n            />\n        );\n    }\n\n    render () {\n        let potentialBackups = this.props.potentialBackups;\n        \n        return (\n            <Dialog\n                open = { this.props.open }>\n                <DialogContent>\n                    <FormControl>\n                        <Select\n                            native\n                            inputProps = {{\n                                id: 'backup',\n                            }}\n                            value = { this.state.backupValue } >\n                            { potentialBackups.map(this.displayBackupItems) }\n                        </Select>\n                    </FormControl>\n                    <FormHelperText>Choose a backup to restore</FormHelperText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick = { this.props.onClose } color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick = { this.props.onClose } color=\"primary\" autoFocus>\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nRestoreBackupDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n    potentialBackups: PropTypes.array.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport axios from 'axios';\n\nimport 'typeface-roboto';\nimport Backup from '@material-ui/icons/Backup';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport FormControl from '@material-ui/core/FormControl';\nimport Help from '@material-ui/icons/Help';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport New from '@material-ui/icons/Public';\nimport Restore from '@material-ui/icons/Restore';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\n\nimport BackupBeforeNewDialog from './BackupBeforeNewDialog.js';\nimport ActionInProgressDialog from './ActionInProgressDialog.js';\nimport RawMinecraftCommandDialog from './RawMinecraftCommandDialog.js';\nimport RestoreBackupDialog from './RestoreBackupDialog.js';\n\nconst styles = {\n    container: {\n        margin: 10,\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontSize: '0.95rem'\n    }\n};\n    \nexport default class WorldControls extends React.Component {\n    constructor (props) {\n        super(props);\n        \n        this.state = {\n            backupDialogOpen: false,\n            commandOutput: '',\n            helpDialogOpen: false,\n            potentialBackups: [],\n            progressDialogOpen: false,\n            rawMinecraftCommandDialogOpen: false,\n            rawCommand: '',\n            restoreDialogOpen: false,\n            restoreBackup: {  }\n        };\n        this.backupAndNewMinecraftWorld = this.backupAndNewMinecraftWorld.bind(this);\n        this.backupAndRestoreMinecraftWorld = this.backupAndRestoreMinecraftWorld.bind(this);\n        this.backupMinecraftWorld = this.backupMinecraftWorld.bind(this);\n        this.closeBackupDialog = this.closeBackupDialog.bind(this);\n        this.closeProgressDialog = this.closeProgressDialog.bind(this);\n        this.closeRawCommandDialog = this.closeRawCommandDialog.bind(this);\n        this.closeRestoreDialog = this.closeRestoreDialog.bind(this);\n        this.getMinecraftWorldBackups = this.getMinecraftWorldBackups.bind(this);\n        this.newMinecraftWorld = this.newMinecraftWorld.bind(this);\n        this.onClearCommand = this.onClearCommand.bind(this);\n        this.onClearOutput = this.onClearOutput.bind(this);\n        this.onSendCommand = this.onSendCommand.bind(this);\n        this.openBackupBeforeNewDialog = this.openBackupBeforeNewDialog.bind(this);\n        this.openProgressDialog = this.openProgressDialog.bind(this);\n        this.openRawCommandDialog = this.openRawCommandDialog.bind(this);\n        this.openRestoreDialog = this.openRestoreDialog.bind(this);\n        this.restoreMinecraftWorld = this.restoreMinecraftWorld.bind(this);\n        this.updateRawCommandDialog = this.updateRawCommandDialog.bind(this);\n        this.updateRawCommandType = this.updateRawCommandType.bind(this);\n    }\n\n    backupAndNewMinecraftWorld () {\n        // TODO Fix issue of if failed backup then don't nuke\n        this.backupMinecraftWorld();\n        this.newMinecraftWorld();\n    }\n\n    backupAndRestoreMinecraftWorld () {\n        // TODO Fix issue of if failed backup then don't nuke\n        this.backupMinecraftWorld();\n        this.restoreMinecraftWorld();\n    }\n      \n    backupMinecraftWorld () {\n        this.setState({ backupDialogOpen: false, progressDialogOpen: true,  restoreDialogOpen: false });\n        axios({\n            method: 'post',\n            url: '/api/backupWorld'\n        }).then(() => {\n            this.setState({ progressDialogOpen: false });\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n            this.setState({ progressDialogOpen: false });\n        });\n    }\n    \n    closeBackupDialog () {\n        this.setState({ backupDialogOpen: false });\n    }\n    \n    closeProgressDialog () {\n        this.setState({ progressDialogOpen: false });\n    }\n\n    closeRawCommandDialog () {\n        this.setState({ rawMinecraftCommandDialogOpen: false });\n    }\n    \n    closeRestoreDialog (worldBackup) {\n        if (worldBackup.filename) {\n            this.setState({ restoreBackup: worldBackup });\n            console.log('Would restore world: ', worldBackup);\n            this.setState({ restoreDialogOpen: false });\n            this.restoreMinecraftWorld(worldBackup);\n        } else {\n            this.setState({ restoreDialogOpen: false });\n        }\n    }\n\n    getMinecraftWorldBackups () {\n        axios({\n            method: 'get',\n            url: `/api/listWorldBackups`\n        }).then(res => {\n            let backupList = res.data.backupList;\n            console.log('backupList response:', backupList);\n            if (backupList.length) {\n                this.setState({ potentialBackups: backupList });\n                this.setState({ restoreDialogOpen: true });\n            } else {\n                // TODO: Show error\n                this.setState({ potentialBackups: [{key: 'nothingtoseehere', fileName: 'nope', worldName: '', date: ''}] });\n                console.log('An error occurred getting backups from the Minecraft server.', backupList);\n            }\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n            this.setState({ restoreDialogOpen: false });\n        });\n    }\n    \n    newMinecraftWorld () {\n        this.setState({ backupDialogOpen: false, progressDialogOpen: true,  restoreDialogOpen: false });\n        axios({\n            method: 'post',\n            url: '/api/newWorld',\n            params: {\n                backup: false\n            }\n        }).then(() => {\n            this.setState({ progressDialogOpen: false });\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n            this.setState({ progressDialogOpen: false });\n        });\n    }\n\n    onClearCommand () {\n        this.setState({ rawCommand: '' });\n    }\n\n    onClearOutput () {\n        this.setState({ commandOutput: '' });\n    }\n    \n    onSendCommand () {\n        if (this.state.rawCommand) {\n            axios({\n                method: 'post',\n                url: '/api/command',\n                params: {\n                    command: this.state.rawCommand\n                }\n            }).then(response => {\n                let commandOutput = response.data.output;\n                this.setState({ rawCommand: '' });\n                this.setState({ commandOutput });\n            },\n            err => {\n                console.log('An error occurred contacting the Minecraft server.', err);\n                this.setState({ progressDialogOpen: false });\n            });\n        }\n    }\n    \n    openBackupBeforeNewDialog () {\n        this.setState({ backupDialogOpen: true, progressDialogOpen: false, rawMinecraftCommandDialogOpen: false });\n    }\n    \n    openProgressDialog () {\n        this.setState({ backupDialogOpen: false, progressDialogOpen: true, rawMinecraftCommandDialogOpen: false });\n    }\n\n    openRawCommandDialog () {\n        this.setState({ backupDialogOpen: false, progressDialogOpen: false, rawMinecraftCommandDialogOpen: true });\n    }\n    \n    openRestoreDialog () {\n        this.getMinecraftWorldBackups();\n        this.setState({ backupDialogOpen: false, progressDialogOpen: false, rawMinecraftCommandDialogOpen: false, restoreDialogOpen: true });\n    }\n    \n    restoreMinecraftWorld (worldBackup) {\n        this.setState({ backupDialogOpen: false, progressDialogOpen: true, restoreDialogOpen: false });\n        axios({\n            method: 'post',\n            url: '/api/command',\n            params: {\n                command: '/restoreWorld',\n                backupFile: worldBackup,\n                backup: false\n            }\n        }).then(() => {\n            this.setState({ backupDialogOpen: false, progressDialogOpen: false, restoreDialogOpen: false });\n            this.setState({ restoreBackup: {} });\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n            this.setState({ restoreDialogOpen: false });\n        });\n    }\n\n    updateRawCommandType (event) {\n        if (event.key === 'Enter') {\n            this.onSendCommand();\n        } else {\n            this.setState({ rawCommand: event.target.value });\n        }\n    }\n\n    updateRawCommandDialog (command) {\n        this.setState({ rawCommand: command });\n    }\n\n    render () {\n        return (\n            <div style={ styles.container }>\n                <BackupBeforeNewDialog \n                    backupAndNew = { this.backupAndNewMinecraftWorld } \n                    newOnly = { this.newMinecraftWorld }\n                    cancelDialog = { this.closeBackupDialog }\n                    open = { this.state.backupDialogOpen }\n                />\n                <ActionInProgressDialog\n                    open = { this.state.progressDialogOpen }\n                    onClose = { this.closeProgressDialog }\n                />\n                <RawMinecraftCommandDialog\n                    open = { this.state.rawMinecraftCommandDialogOpen }\n                    onClose = { this.closeRawCommandDialog }\n                    minecraftCommands = { this.props.minecraftProperties.fullHelp }\n                    updateRawCommandField = { this.updateRawCommandDialog }\n                />\n                <RestoreBackupDialog\n                    open = { this.state.restoreDialogOpen }\n                    onClose = { this.closeRestoreDialog }\n                    potentialBackups = { this.state.potentialBackups }\n                />\n                <Typography variant=\"subtitle1\">\n                    World Controls\n                </Typography>\n                <Table>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = { this.backupMinecraftWorld }>\n                                    <Backup />\n                                    Backup World\n                                </Button>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = { this.openRestoreDialog } disabled>\n                                    <Restore />\n                                    Restore World\n                                </Button>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = { this.openBackupBeforeNewDialog }>\n                                    <New />\n                                    New World\n                                </Button>\n                            </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n                <Typography variant=\"subtitle1\">\n                    Send Minecraft Command\n                </Typography>\n                <FormControl fullWidth>\n                    <InputLabel htmlFor = \"rawCommand\">\n                        Enter command. Click the Help icon for a full list of supported commands.\n                    </InputLabel>\n                    <Input id = 'rawCommand' fullWidth value = { this.state.rawCommand } onChange = { this.updateRawCommandType } onKeyPress = { this.updateRawCommandType }/>\n                    <Divider />\n                </FormControl>\n                <Tooltip title = \"List available Minecraft commands\">\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick = { this.openRawCommandDialog }>\n                        <Help />\n                    </Button>\n                </Tooltip>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick = { this.onClearCommand }>Clear Command</Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={ !this.props.minecraftProperties.started && !this.state.rawCommand === '' }\n                    onClick = { this.onSendCommand }>Send Command</Button>\n                <FormControl fullWidth>\n                    <TextField\n                        label=\"Command Output\"\n                        multiline\n                        rows=\"6\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        value={ this.state.commandOutput }\n                    />\n                </FormControl>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick = { this.onClearOutput }>Clear Output</Button>\n            </div>\n        );\n    }\n}\n\nWorldControls.propTypes = {\n    minecraftProperties: PropTypes.object.isRequired\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport axios from 'axios';\n\nimport 'typeface-roboto';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Save from '@material-ui/icons/Save';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\n\nexport default function  Preferences (props) {\n    const [apiSettings, setApiSettings] = useState(props.apiSettings);\n    // console.log(apiSettings);\n\n    const savePreferences = () => {\n        axios({\n            method: 'post',\n            url: `/api/saveApiPreferences`,\n            params: {\n                settings: JSON.stringify(apiSettings)\n            }\n        }, err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n        });\n    };\n\n    const handleChange = (event, value) => {\n        let oldApiSettings = Object.assign({}, apiSettings);\n        let newApiSettings = {autoStartMinecraft: value};\n        newApiSettings = Object.assign(oldApiSettings, newApiSettings);\n        setApiSettings(newApiSettings);\n    };\n\n    return (\n        <div>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick = { savePreferences }>\n                <Save />\n                Save\n            </Button>\n            <Table size=\"small\">\n                <TableBody>\n                    <TableRow>\n                        <TableCell>\n                            <FormControl fullWidth>\n                                <FormControlLabel control={\n                                    <Checkbox\n                                        checked={ apiSettings.autoStartMinecraft }\n                                        onChange={ handleChange }\n                                    />\n                                } label=\"Auto-start Minecraft with this website?\" />\n                            </FormControl>\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>\n                            <FormControl fullWidth>\n                                <InputLabel\n                                    htmlFor=\"{ ipAddress }\">\n                                    The IP address to listen on.\n                                </InputLabel>\n                                <Input\n                                    id = { \"ipAddress\" }\n                                    value = { apiSettings.ipAddress }\n                                    fullWidth\n                                    // onChange = { updatePropertyType }\n                                    // onKeyPress = { updatePropertyType }/>\n                                />\n                            </FormControl>\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>\n                            <FormControl fullWidth>\n                                <InputLabel\n                                    htmlFor=\"{ ipPort }\">\n                                    The IP port to listen on.\n                                </InputLabel>\n                                <Input\n                                    id = { \"ipPort\" }\n                                    value = { apiSettings.ipPort }\n                                    fullWidth\n                                    // onChange = { updatePropertyType }\n                                    // onKeyPress = { updatePropertyType }/>\n                                />\n                            </FormControl>\n                        </TableCell>\n                    </TableRow>\n                </TableBody>\n            </Table>\n        </div>\n    );\n}\n\nPreferences.propTypes = {\n    apiSettings: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport 'typeface-roboto';\nimport Help from '@material-ui/icons/Help';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\n\nclass About extends React.Component {\n    render () {\n        let minecraftProperties = this.props.minecraftProperties;\n        const GB = 1024 ** 3;\n        let mem = minecraftProperties.nodeInfo ? minecraftProperties.nodeInfo.mem / GB : 'Unknown';\n\n        return (\n            <div>\n                <Table>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"h6\">\n                                    <a href={ minecraftProperties.eulaUrl } target=\"_blank\" rel=\"noopener noreferrer\">Minecraft End User License Agreement</a>\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n                <Table size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Contributors\n                                </Typography>\n                            </TableCell>\n                            <TableCell> </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Project Owner\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography>\n                                    nickrnet\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Authors\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography>\n                                    nickrnet, DevBonBon\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Testing\n                                </Typography>\n                            </TableCell>\n                            <TableCell> </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n                <Table size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    System Information\n                                </Typography>\n                            </TableCell>\n                            <TableCell> </TableCell>\n                            <TableCell> </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    CPU\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography>\n                                    { minecraftProperties.nodeInfo ? minecraftProperties.nodeInfo.cpus[0].model + ', ' + minecraftProperties.nodeInfo.cpus.length + ' cores' : 'Unknown' }\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Tooltip title = \"Logical CPUs, both physical and virtual\">\n                                    <Help />\n                                </Tooltip>\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    RAM\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography>\n                                    { mem } GB\n                                </Typography>\n                            </TableCell>\n                            <TableCell> </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    NodeJS Version\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography>\n                                    { minecraftProperties.nodeInfo ? minecraftProperties.nodeInfo.version : 'Unknown' }\n                                </Typography>\n                            </TableCell>\n                            <TableCell> </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n                {/* <div>\n                    <script type=\"text/javascript\">\n                        amzn_assoc_ad_type = \"banner\";\n                        amzn_assoc_marketplace = \"amazon\";\n                        amzn_assoc_region = \"US\";\n                        amzn_assoc_placement = \"assoc_banner_placement_default\";\n                        amzn_assoc_banner_type = \"ez\";\n                        amzn_assoc_p = \"9\";\n                        amzn_assoc_width = \"180\";\n                        amzn_assoc_height = \"150\";\n                        amzn_assoc_tracking_id = \"nickrnet-20\";\n                        amzn_assoc_linkid = \"2c598468f363378d5fb52de183d72a89\";\n                    </script>\n                    <script src=\"https://z-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&Operation=GetScript&ID=OneJS&WS=1\"></script>\n                </div>\n                <p>\n                    Support this project by making purchases from Amazon.\n                </p>\n                <iframe src=\"https://rcm-na.amazon-adsystem.com/e/cm?o=1&p=9&l=ez&f=ifr&linkID=94a6a8bcf4c0832533e2ed9b53ea4ccc&t=nickrnet-20&tracking_id=nickrnet-20\" width=\"180\" height=\"150\" scrolling=\"no\" border=\"1\" marginWidth=\"0\" title=\"Amazon\" style={ styles.container } frameBorder=\"0\"></iframe> */}\n            </div>\n        );\n    }\n}\n\nAbout.propTypes = {\n    minecraftProperties: PropTypes.object.isRequired\n};\n\nexport default About;\n","import React from 'react';\n\nimport axios from 'axios';\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport AppBar from '@material-ui/core/AppBar';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nimport Dashboard from './Dashboard/Dashboard.js';\nimport Players from './Players/Players.js';\nimport ServerControls from './ServerControls/ServerControls.js';\nimport WorldControls from './ServerControls/WorldControls.js';\nimport Preferences from './Preferences/Preferences.js';\nimport About from './About/About.js';\n\nconst debug = false;\n\nexport default class App extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n            debug: debug,\n            ipInfo: {},\n            apiSettings: {},\n            minecraftStatus: {},\n            minecraftStatusMessage: '',\n            eulaOpen: false,\n            minecraftProperties: {},\n            playerInfo: {},\n            value: 0\n        };\n        if (debug) {\n            console.log('App state:', this.state);\n        }\n        this.handleAcceptEula = this.handleAcceptEula.bind(this);\n        this.handleDeclineEula = this.handleDeclineEula.bind(this);\n        this.getIpInfo = this.getIpInfo.bind(this);\n        this.getMinecraftServerProperties = this.getMinecraftServerProperties.bind(this);\n        this.getMinecraftStatus = this.getMinecraftStatus.bind(this);\n        this.startMinecraftStatus = this.startMinecraftStatus.bind(this);\n        this.stopMinecraftStatus = this.stopMinecraftStatus.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.stopMinecraftStatus = this.stopMinecraftStatus.bind(this);\n\n        this.startMinecraftStatus();\n    }\n    \n    getTheme () {\n        const theme = createMuiTheme({\n            \"tableRowColumn\": {\n                \"height\": 60\n            },\n            \"container\": {\n                \"margin\": 10,\n                \"fontFamily\": '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n                \"fontSize\": '0.95rem'\n            },\n            \"overrides\": {\n                MuiButton: {\n                    root: {\n                        margin: \"10px\"\n                    }\n                }\n            }\n        });\n        \n        return theme;\n    }\n\n    componentWillUnmount () {\n        if (debug) {\n            console.log('Application shutting down.');\n        }\n        this.stopMinecraftStatus();\n    }\n    \n    handleChange (event, value) {\n        this.setState({ value });\n    }\n\n    getIpInfo () {\n        let ipInfo;\n\n        axios(`/api/ipInfo`).then(res => {\n            ipInfo = res.data;\n            this.setState({ ipInfo });\n        });\n    }\n\n    getMinecraftStatus (pingWait) {\n        let minecraftStatusMessage = \"\",\n            normalPingTime = 5 * 1000,\n            appendTime = 5 * 1000,\n            maxTime = 120 * 1000,\n            pingTime;\n\n        // normally ping every 5 seconds\n        // if a fast ping was requested (from constructor/DidMount), honor it\n        // once trouble hits, add 5 seconds until 2 minutes is reached, then reset to 60 seconds\n        // once re/successful, reset to 60 seconds\n        if (!pingWait) {\n            pingTime = normalPingTime;\n        } else if (pingWait < 1000) {\n            pingTime = pingWait;\n        } else if (pingWait > maxTime) {\n            pingTime = normalPingTime;\n        } else {\n            pingTime = pingWait;\n        }\n\n        if (this.statusTimerId) {\n            clearTimeout(this.statusTimerId);\n        }\n\n        this.statusTimerId = setTimeout(() => {\n            axios(`/api/status`).then(res => {\n                let apiSettings = res.data.apiSettings;\n                let minecraftProperties = res.data.minecraftProperties;\n                this.setState({ apiSettings });\n                this.setState({ minecraftProperties });\n                if (!minecraftProperties.settings.javaHome || !minecraftProperties.settings.javaPath) {\n                    minecraftStatusMessage = `Java is not properly installed.`;\n                } else if (!minecraftProperties.started) {\n                    minecraftStatusMessage = `Minecraft is not running.`;\n                } else if (!minecraftProperties.acceptedEula) {\n                    minecraftStatusMessage = `The Minecraft EULA needs to be accepted.`;\n                }\n                this.setState({ minecraftStatusMessage });\n\n                if (debug) {\n                    console.log('Setting Minecraft status poller to run in', pingTime/1000, 'seconds.');\n                }\n                this.getMinecraftStatus();\n            },\n            err => {\n                let minecraftStatus = {};\n\n                this.setState({ minecraftStatus });\n                pingTime = pingTime + appendTime;\n\n                if (debug) {\n                    console.log('Error occurred:', err);\n                    console.log('Application state:', this.state);\n                    console.log('Setting Minecraft status poller to run in', pingTime/1000, 'seconds.');\n                }\n                this.getMinecraftStatus(pingTime);\n            });\n        }, pingTime);\n    }\n  \n    getMinecraftServerProperties () {\n        if (debug) {\n            console.log('Retrieving Minecraft Server properties.');\n        }\n\n        axios(`/api/properties`).then(res => {\n            let minecraftServerProperties = res.data;\n            minecraftServerProperties = minecraftServerProperties.properties;\n            this.setState({ minecraftServerProperties });\n            if (debug) {\n                console.log('MinecraftServer properties:', minecraftServerProperties);\n            }\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n        }).catch(e => {\n            console.log('An error occurred getting the server properties:', e);\n        });\n    }\n  \n    handleAcceptEula () {\n        axios({\n            method: 'post',\n            url: '/api/acceptEula'\n        }).then(() => {\n            this.setState({ eulaOpen: false });\n        }, error => {\n            console.log('error:', error);\n            this.setState({ eulaOpen: false });\n        }).catch(error => {\n            console.log('error:', error);\n            this.setState({ eulaOpen: false });\n        });\n    }\n  \n    handleDeclineEula () {\n        axios({\n            method: 'post',\n            url: '/api/stop'\n        }).then(() => {\n            this.setState({ eulaOpen: false });\n        }, error => {\n            console.log('error:', error);\n            this.setState({ eulaOpen: false });\n        }).catch(error => {\n            console.log('error:', error);\n            this.setState({ eulaOpen: false });\n        });\n    }\n\n    runOnce () {\n        this.getIpInfo();\n        this.getMinecraftServerProperties();\n    }\n\n    startMinecraftStatus () {\n        this.runOnce();\n        this.getMinecraftStatus(25);\n    }\n\n    stopMinecraftStatus () {\n        if (debug) {\n            console.log('Stopping Minecraft server poller.');\n        }\n\n        if (this.statusTimerId) {\n            clearTimeout(this.statusTimerId);\n        }\n\n        if (this.playersTimerId) {\n            clearTimeout(this.playersTimerId);\n        }\n    }\n    \n    render () {\n        let minecraftProperties = this.state.minecraftProperties;\n\n        return (\n            <MuiThemeProvider theme={ this.getTheme() }>\n                <AppBar position=\"static\">\n                    <Tabs\n                        value = { this.state.value }\n                        onChange = { this.handleChange }\n                        centered>\n                        <Tab label=\"Dashboard\" />\n                        <Tab label=\"Players\" />\n                        <Tab label=\"World Controls\" />\n                        <Tab label=\"Server Controls\" />\n                        <Tab label=\"Preferences\" />\n                        <Tab label=\"About\" />\n                    </Tabs>\n                </AppBar>\n                { this.state.value === 0 && <Dashboard\n                    ipInfo = { this.state.ipInfo }\n                    minecraftProperties = { minecraftProperties }\n                /> }\n                { this.state.value === 1 && <Players\n                    minecraftProperties = { minecraftProperties }\n                /> }\n                { this.state.value === 2 && <WorldControls\n                    minecraftProperties = { minecraftProperties }\n                    startMinecraftStatus = { this.startMinecraftStatus }\n                    stopMinecraftStatus = { this.stopMinecraftStatus }\n                /> }\n                { this.state.value === 3 && <ServerControls\n                    minecraftProperties = { minecraftProperties }\n                    startMinecraftStatus = { this.startMinecraftStatus }\n                    stopMinecraftStatus = { this.stopMinecraftStatus }\n                /> }\n                { this.state.value === 4 && <Preferences \n                    apiSettings = { this.state.apiSettings }\n                /> }\n                { this.state.value === 5 && <About\n                    minecraftProperties = { minecraftProperties }\n                /> }\n                <Snackbar\n                    anchorOrigin = {\n                        {\n                            vertical: 'bottom',\n                            horizontal: 'left' \n                        }\n                    }\n                    open = { !minecraftProperties.started }\n                    message = { this.state.minecraftStatusMessage }\n                />\n            </MuiThemeProvider>\n        );\n    }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}