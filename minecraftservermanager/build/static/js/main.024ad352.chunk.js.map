{"version":3,"sources":["Dashboard/ServerSummary.js","Dashboard/PlayerListItem.js","Dashboard/PlayersSummary.js","Dashboard/Dashboard.js","Players/PlayerListItem.js","Players/Players.js","ServerControls/ActionInProgressDialog.js","ServerControls/ConfirmVersionDialog.js","ServerControls/ConfirmRestartDialog.js","ServerControls/ServerProperties.js","ServerControls/ServerControls.js","ServerControls/BackupBeforeNewDialog.js","ServerControls/RawMinecraftCommandDialog.js","ServerControls/BackupItem.js","ServerControls/RestoreBackupDialog.js","ServerControls/WorldControls.js","Preferences/Preferences.js","About/About.js","App.js","registerServiceWorker.js","index.js"],"names":["styles","container","margin","fontFamily","fontSize","ServerSummary","handleAcceptEula","axios","method","url","catch","error","console","log","react_default","a","createElement","Button","onClick","this","color","autoFocus","minecraftProperties","props","acceptedEula","Tooltip","title","CheckCircle_default","Error_default","started","updateAvailable","AssignmentLate_default","detectedVersion","major","TableCell","Typography","minor","release","rightNow","Date","now","uptime","startTime","seconds","h","Math","floor","m","s","filter","join","formatTime","style","variant","Table","size","TableBody","TableRow","minecraftOnline","minecraftUpdate","minecraftEulaAcceptedStatus","minecraftAcceptEulaButton","minecraftVersion","ipInfo","address","port","minecraftUptime","React","Component","PlayerListItem","player","name","PlayersSummary","online","PlayerListItem_PlayerListItem","key","playerInfo","players","summary","TableHead","map","displayPlayerListItems","Dashboard","Dashboard_ServerSummary","PlayersSummary_PlayersSummary","banPlayer","pardonPlayer","kickPlayer","opPlayer","deopPlayer","whitelistPlayer","SignalWifi4Bar_default","SignalWifiOff_default","opped","VerifiedUser_default","banned","whitelisted","PlaylistAdd_default","IconButton","Players","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","found","state","forEach","p","params","command","then","err","Players_PlayerListItem_PlayerListItem","ActionInProgressDialog","onClose","other","objectWithoutProperties","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","ConfirmVersionDialog","selectedVersionToInstall","onNo","onYes","version","full","ConfirmRestartDialog","ServerProperties","currentMinecraftProperties","assign","serverProperties","_useState","useState","_useState2","slicedToArray","dirtyProps","setDirtyProps","_useState3","_useState4","progressDialogOpen","setProgressDialogOpen","_useState5","_useState6","restartDialogOpen","setRestartDialogOpen","_useState7","_useState8","setServerProperties","openProgressDialog","closeRestartDialog","refreshProperties","res","data","properties","updatePropertyType","event","property","newMinecraftProps","changed","length","target","id","value","open","newProperties","JSON","stringify","Cached_default","disabled","Save_default","Undo_default","maxHeight","overflow","FormControl","fullWidth","InputLabel","htmlFor","Input","onChange","onKeyPress","ServerControls","versionDialogOpen","versionToInstall","checkVersionToInstall","closeProgressDialog","closeVersionDialog","handleVersionConfirmation","installMinecraft","restartMinecraft","selectVersionToInstall","startMinecraft","stopMinecraft","setState","MenuItem","_this2","startMinecraftStatus","_this3","releaseVersions","versions","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","releaseVersion","return","_this4","_this5","PlayArrow_default","Stop_default","Autorenew_default","Select","displayReleaseVersions","BackupBeforeNewDialog","cancelDialog","newOnly","backupAndNew","RawMinecraftCommandDialog","closeDialog","listCommands","updateRawCommandField","ListItem","button","ListItemText","primary","Divider","fullScreen","Close_default","List","dense","minecraftCommands","BackupItem","backup","fileName","worldName","date","time","RestoreBackupDialog","backupValue","BackupItem_BackupItem","potentialBackups","native","inputProps","displayBackupItems","FormHelperText","WorldControls","backupDialogOpen","commandOutput","helpDialogOpen","rawMinecraftCommandDialogOpen","rawCommand","restoreDialogOpen","restoreBackup","backupAndNewMinecraftWorld","backupAndRestoreMinecraftWorld","backupMinecraftWorld","closeBackupDialog","closeRawCommandDialog","closeRestoreDialog","getMinecraftWorldBackups","newMinecraftWorld","onClearCommand","onClearOutput","onSendCommand","openBackupBeforeNewDialog","openRawCommandDialog","openRestoreDialog","restoreMinecraftWorld","updateRawCommandDialog","updateRawCommandType","worldBackup","filename","backupList","response","output","_this6","backupFile","BackupBeforeNewDialog_BackupBeforeNewDialog","RawMinecraftCommandDialog_RawMinecraftCommandDialog","fullHelp","RestoreBackupDialog_RestoreBackupDialog","Backup_default","Restore_default","Public_default","Help_default","TextField","label","multiline","rows","Preferences","About","GB","pow","mem","nodeInfo","href","eulaUrl","rel","cpus","model","debug","App","minecraftStatus","eulaOpen","handleDeclineEula","getIpInfo","getMinecraftServerProperties","getMinecraftStatus","stopMinecraftStatus","handleChange","createMuiTheme","tableRowColumn","height","overrides","MuiButton","root","pingWait","pingTime","statusTimerId","clearTimeout","setTimeout","minecraftServerProperties","e","runOnce","playersTimerId","MuiThemeProvider","theme","getTheme","AppBar","position","Tabs","centered","Tab","src_Dashboard_Dashboard","Players_Players","WorldControls_WorldControls","src_ServerControls_ServerControls","src_Preferences_Preferences","src_About_About","Snackbar","anchorOrigin","vertical","horizontal","message","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","App_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.024ad352.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\n\nimport 'typeface-roboto';\nimport Button from '@material-ui/core/Button';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\n\nimport CheckCircle from '@material-ui/icons/CheckCircle';\nimport Error from '@material-ui/icons/Error';\nimport AssignmentLate from '@material-ui/icons/AssignmentLate';\n\nconst styles = {\n    container: {\n        margin: 10,\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontSize: '0.95rem'\n    }\n};\n\nfunction formatTime (seconds) {\n    const h = Math.floor(seconds / 3600);\n    const m = Math.floor((seconds % 3600) / 60);\n    const s = Math.floor(seconds % 60);\n    return [\n        h,\n        m > 9 ? m : '0' + m,\n        s > 9 ? s : '0' + s,\n    ].filter(s => s).join(':');\n}\n\nclass ServerSummary extends React.Component {\n    handleAcceptEula = () => {\n        axios({\n            method: 'post',\n            url: '/api/acceptEula'\n        }).catch(error => {\n            console.log('An error occurred accepting the EULA:', error);\n        });\n    };\n\n    minecraftAcceptEulaButton () {\n        return (\n            <Button onClick = { this.handleAcceptEula } color=\"primary\" autoFocus>\n                Accept\n            </Button>\n        );\n    }\n    minecraftEulaAcceptedStatus () {\n        let minecraftProperties = this.props.minecraftProperties;\n        \n        if (minecraftProperties && minecraftProperties.acceptedEula) {\n            return (\n                <div>\n                    <Tooltip title=\"Accepted\">\n                        <CheckCircle />\n                    </Tooltip>\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    <Tooltip title=\"Not accepted\">\n                        <Error />\n                    </Tooltip>\n                </div>\n            );\n        }\n    }\n\n    minecraftOnline () {\n        let minecraftProperties = this.props.minecraftProperties;\n        \n        if (minecraftProperties && minecraftProperties.started) {\n            return (\n                <div>\n                    <Tooltip title=\"Running\">\n                        <CheckCircle />\n                    </Tooltip>\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    <Tooltip title=\"Minecraft is not running\">\n                        <Error />\n                    </Tooltip>\n                </div>\n            );\n        }\n    }\n    \n    minecraftUpdate () {\n        let minecraftProperties = this.props.minecraftProperties;\n    \n        if (minecraftProperties && minecraftProperties.updateAvailable) {\n            return (\n                <div>\n                    <Tooltip title=\"Update Available\">\n                        <AssignmentLate />\n                    </Tooltip>\n                </div>\n            );\n        } else {\n            return <div></div>;\n        }\n    }\n    \n    minecraftVersion () {\n        let minecraftProperties = this.props.minecraftProperties;\n    \n        if (minecraftProperties && minecraftProperties.detectedVersion && minecraftProperties.detectedVersion.major) {\n            return (\n                <TableCell>\n                    <Typography>\n                        { minecraftProperties.detectedVersion.major + '.' + minecraftProperties.detectedVersion.minor + '.' + minecraftProperties.detectedVersion.release }\n                    </Typography>\n                </TableCell>\n            );\n        } else {\n            return <TableCell></TableCell>;\n        }\n    }\n\n    minecraftUptime () {\n        let minecraftProperties = this.props.minecraftProperties;\n        let rightNow = Date.now();\n        let uptime = 0;\n    \n        if (minecraftProperties && minecraftProperties.started && minecraftProperties.startTime > 0) {\n            uptime = (rightNow - minecraftProperties.startTime)/1000;\n            return (\n                <TableCell>\n                    <Typography>\n                        { formatTime(uptime) }\n                    </Typography>\n                </TableCell>\n            );\n        } else {\n            return(\n                <TableCell></TableCell>\n            );\n        }\n    }\n\n    render () {\n        return (\n            <div style={ styles.container }>\n                <Typography variant=\"subtitle1\">\n                    Server Information\n                </Typography>\n                <Table size=\"small\">\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Minecraft Status\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                { this.minecraftOnline() }\n                            </TableCell>\n                            <TableCell>\n                                { this.minecraftUpdate() }\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    EULA Accepted\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                { this.minecraftEulaAcceptedStatus() }\n                            </TableCell>\n                            <TableCell>{ this.props.minecraftProperties.acceptedEula ? <div></div> : this.minecraftAcceptEulaButton() }</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Minecraft Version\n                                </Typography>\n                            </TableCell>\n                            { this.minecraftVersion() }\n                            <TableCell></TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Server Address\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography>\n                                    { this.props.ipInfo.address ? this.props.ipInfo.address + ':' + this.props.ipInfo.port : 'Not known.' }\n                                </Typography>\n                            </TableCell>\n                            <TableCell></TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Server Uptime\n                                </Typography>\n                            </TableCell>\n                            { this.minecraftUptime() }\n                            <TableCell></TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nServerSummary.propTypes = {\n    ipInfo: PropTypes.object.isRequired,\n    minecraftProperties: PropTypes.object.isRequired\n};\n\nexport default ServerSummary;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport 'typeface-roboto';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\n\nexport default class PlayerListItem extends React.Component {\n\n    render () {\n        let player = this.props.player || {};\n\n        return (\n            <TableRow>\n                <TableCell>\n                    <Typography>\n                        { player.name }\n                    </Typography>\n                </TableCell>\n            </TableRow>\n        );\n    }\n}\n\nPlayerListItem.propTypes = {\n    player: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport 'typeface-roboto';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\n\nimport PlayerListItem from './PlayerListItem';\n\nconst styles = {\n    container: {\n        margin: 10,\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontSize: '0.95rem'\n    }\n};\n\nexport default class PlayersSummary extends React.Component {\n    displayPlayerListItems (player) {\n        if (player.online) {\n            return (\n                <PlayerListItem\n                    key = { player.key }\n                    player = { player }\n                />\n            );\n        }\n    }\n\n    render () {\n        let minecraftProperties = this.props.minecraftProperties;\n        let playerInfo = minecraftProperties.playerInfo;\n        let players = [];\n        let summary = '';\n\n        if (playerInfo) {\n            players = playerInfo.players;\n            summary = playerInfo.summary;\n        }\n        \n        return (\n            <div style = { styles.container }>\n                <Typography variant=\"subtitle1\">\n                    Connected Players\n                </Typography>\n                <Table size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    { summary ? summary : 'Waiting on Minecraft server...' }\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n                </Table>\n                <Table>\n                    <TableBody>\n                        { players.map(this.displayPlayerListItems) }\n                    </TableBody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nPlayersSummary.propTypes = {\n    minecraftProperties: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ServerSummary from './ServerSummary.js';\nimport PlayersSummary from './PlayersSummary.js';\n\nconst styles = {\n    container: {\n        margin: 10,\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontSize: '0.95rem'\n    }\n};\n\nclass Dashboard extends React.Component {\n    render () {\n        return (\n            <div style={ styles.container }>\n                <ServerSummary ipInfo = { this.props.ipInfo } minecraftProperties = { this.props.minecraftProperties } />\n                <PlayersSummary minecraftProperties = { this.props.minecraftProperties } />\n            </div>\n        );\n    }\n}\n\nDashboard.propTypes = {\n    ipInfo: PropTypes.object.isRequired,\n    minecraftProperties: PropTypes.object.isRequired\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport 'typeface-roboto';\nimport Ban from '@material-ui/icons/Error';\nimport IconButton from '@material-ui/core/IconButton';\nimport Kick from '@material-ui/icons/Error';\nimport NetworkOnline from '@material-ui/icons/SignalWifi4Bar';\nimport NetworkOffline from '@material-ui/icons/SignalWifiOff';\nimport OpStatus from '@material-ui/icons/VerifiedUser';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport WhitelistIcon from '@material-ui/icons/PlaylistAdd';\n\nexport default class PlayerListItem extends React.Component {\n\n    banPlayer () {\n        this.props.banPlayer(this.props.player.name);\n    }\n    pardonPlayer () {\n        this.props.pardonPlayer(this.props.player.name);\n    }\n    kickPlayer () {\n        this.props.kickPlayer(this.props.player.name);\n    }\n    opPlayer () {\n        this.props.opPlayer(this.props.player.name);\n    }\n    deopPlayer () {\n        this.props.deopPlayer(this.props.player.name);\n    }\n    whitelistPlayer () {\n        this.props.whitelistPlayer(this.props.player.name);\n    }\n\n    render () {\n        let player = this.props.player;\n\n        return (\n            <TableRow>\n                <TableCell>\n                    <Typography>\n                        { player.name }\n                    </Typography>\n                </TableCell>\n                <TableCell>{ player.online ? \n                    <Tooltip title=\"Online\">\n                        <NetworkOnline />\n                    </Tooltip> : \n                    <Tooltip title=\"Offline\">\n                        <NetworkOffline />\n                    </Tooltip>\n                }{ player.opped ?\n                    <Tooltip title=\"Opped\">\n                        <OpStatus />\n                    </Tooltip> : <span></span>\n                }{ player.banned ?\n                    <Tooltip title=\"Banned\">\n                        <Ban />\n                    </Tooltip> : <span></span>\n                }{ player.whitelisted ?\n                    <Tooltip title=\"Whitelisted\">\n                        <WhitelistIcon />\n                    </Tooltip> : <span></span>\n                }</TableCell>\n                <TableCell>\n                    { player.banned ?\n                        <IconButton onClick = { this.pardonPlayer }>\n                            <Tooltip title=\"Pardon\">\n                                <Ban />\n                            </Tooltip>\n                        </IconButton> : \n                        <IconButton onClick = { this.banPlayer }>\n                            <Tooltip title=\"Ban\">\n                                <Ban />\n                            </Tooltip>\n                        </IconButton>\n                    }\n                    <IconButton onClick = { this.kickPlayer }>\n                        <Tooltip title=\"Kick\">\n                            <Kick />\n                        </Tooltip>\n                    </IconButton>\n                    { player.opped ?\n                        <IconButton onClick = { this.deopPlayer }>\n                            <Tooltip title=\"De Op\">\n                                <OpStatus />\n                            </Tooltip>\n                        </IconButton> : \n                        <IconButton onClick = { this.opPlayer }>\n                            <Tooltip title=\"Op\">\n                                <OpStatus />\n                            </Tooltip>\n                        </IconButton>\n                    }\n                    { !player.whitelisted ?\n                        <IconButton onClick = { this.whitelistPlayer }>\n                            <Tooltip title=\"Whitelist\">\n                                <WhitelistIcon />\n                            </Tooltip>\n                        </IconButton> : <div></div>\n                    }\n                </TableCell>\n            </TableRow>\n        );\n    }\n}\n\nPlayerListItem.propTypes = {\n    player: PropTypes.object.isRequired,\n    whitelistPlayer: PropTypes.func.isRequired,\n    deopPlayer: PropTypes.func.isRequired,\n    opPlayer: PropTypes.func.isRequired,\n    kickPlayer: PropTypes.func.isRequired,\n    pardonPlayer: PropTypes.func.isRequired,\n    banPlayer: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport axios from 'axios';\n\nimport 'typeface-roboto';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\n\nimport PlayerListItem from './PlayerListItem';\n\nconst styles = {\n    container: {\n        margin: 10,\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontSize: '0.95rem'\n    }\n};\n\nexport default class Players extends React.Component {\n    constructor(props) {\n        super(props);\n        this.banPlayer = this.banPlayer.bind(this);\n        this.deopPlayer = this.deopPlayer.bind(this);\n        this.displayPlayerListItems = this.displayPlayerListItems.bind(this);\n        this.kickPlayer = this.kickPlayer.bind(this);\n        this.opPlayer = this.opPlayer.bind(this);\n        this.pardonPlayer = this.pardonPlayer.bind(this);\n        this.whitelistPlayer = this.whitelistPlayer.bind(this);\n    }\n\n    banPlayer (player) {\n        let found = false,\n            players = this.state.players;\n\n        players.forEach(p => {\n            if (p.name === player) {\n                found = true;\n            }\n        });\n        \n        if (found) {\n            axios({\n                method: 'post',\n                url: '/api/command',\n                params: {\n                    command: '/ban ' + player\n                }\n            }).then(() => {\n                return;\n            },\n            err => {\n                console.log('An error occurred contacting the Minecraft server.', err);\n            });\n        }\n    }\n\n    pardonPlayer (player) {\n        let found = false,\n            players = this.state.players;\n\n        players.forEach(p => {\n            if (p.name === player) {\n                found = true;\n            }\n        });\n\n        if (found) {\n            axios({\n                method: 'post',\n                url: '/api/command',\n                params: {\n                    command: '/pardon ' + player\n                }\n            }).then(() => {\n                return;\n            },\n            err => {\n                console.log('An error occurred contacting the Minecraft server.', err);\n            });\n        }\n    }\n\n    kickPlayer (player) {\n        let found = false,\n            players = this.state.players;\n\n        players.forEach(p => {\n            if (p.name === player) {\n                found = true;\n            }\n        });\n\n        if (found) {\n            axios({\n                method: 'post',\n                url: '/api/command',\n                params: {\n                    command: '/kick ' + player\n                }\n            }).then(() => {\n                return;\n            },\n            err => {\n                console.log('An error occurred contacting the Minecraft server.', err);\n            });\n        }\n    }\n\n    opPlayer (player) {\n        let found = false,\n            players = this.state.players;\n\n        players.forEach(p => {\n            if (p.name === player) {\n                found = true;\n            }\n        });\n\n        if (found) {\n            axios({\n                method: 'post',\n                url: '/api/command',\n                params: {\n                    command: '/op ' + player\n                }\n            }).then(() => {\n                return;\n            },\n            err => {\n                console.log('An error occurred contacting the Minecraft server.', err);\n            });\n        }\n    }\n\n    deopPlayer (player) {\n        let found = false,\n            players = this.state.players;\n\n        players.forEach(p => {\n            if (p.name === player) {\n                found = true;\n            }\n        });\n\n        if (found) {\n            axios({\n                method: 'post',\n                url: '/api/command',\n                params: {\n                    command: '/deop ' + player\n                }\n            }).then(() => {\n                return;\n            },\n            err => {\n                console.log('An error occurred contacting the Minecraft server.', err);\n            });\n        }\n    }\n\n    whitelistPlayer (player) {\n        let found = false,\n            players = this.state.players;\n\n        players.forEach(p => {\n            if (p.name === player) {\n                found = true;\n            }\n        });\n\n        if (found) {\n            axios({\n                method: 'post',\n                url: '/api/command',\n                params: {\n                    command: '/whitelist ' + player\n                }\n            }).then(() => {\n                return;\n            },\n            err => {\n                console.log('An error occurred contacting the Minecraft server.', err);\n            });\n        }\n    }\n\n    displayPlayerListItems (player) {\n        return (\n            <PlayerListItem\n                key = { player.key }\n                player = { player }\n                banPlayer = { this.banPlayer }\n                pardonPlayer = { this.pardonPlayer }\n                kickPlayer = { this.kickPlayer }\n                opPlayer = { this.opPlayer }\n                deopPlayer = { this.deopPlayer }\n                whitelistPlayer = { this.whitelistPlayer }\n            />\n        );\n    }\n\n    render () {\n        let minecraftProperties = this.props.minecraftProperties;\n        let playerInfo = minecraftProperties.playerInfo;\n        let players = [];\n        let summary = '';\n        if (playerInfo && playerInfo.players) {\n            summary = playerInfo.summary;\n            players = playerInfo.players;\n        }\n        \n        return (\n            <div style = { styles.container }>\n                <Typography variant=\"subtitle1\">\n                    { summary ? summary : 'Waiting on Minecraft server...' }\n                </Typography>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Player\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Status\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Actions\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        { players.map(this.displayPlayerListItems) }\n                    </TableBody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nPlayers.propTypes = {\n    minecraftProperties: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\n\nexport default function ActionInProgressDialog (props) {\n    const { onClose, ...other } = props;\n    return (\n        <Dialog { ...other }>\n            <DialogTitle>Please Wait</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Requested action in progress...\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    onClick = { onClose }\n                    variant=\"contained\"\n                    color = \"primary\"\n                    autoFocus>\n                    Close\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nActionInProgressDialog.propTypes = {\n    onClose: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\n\nexport default function ConfirmVersionDialog (props) {\n    const { detectedVersion, selectedVersionToInstall, onNo, onYes, ...other } = props;\n    // console.log('props:', props);\n    let version = \"\";\n\n    if (detectedVersion && detectedVersion.full) {\n        version = detectedVersion.full;\n    }\n    // TODO: Detect \"downgrade\".\n    return (\n        <Dialog { ...other }>\n            <DialogTitle>Confirm Version Change</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    The current running version is { version }, but the\n                    selected version is { selectedVersionToInstall ? selectedVersionToInstall.full : 'unknown' }. Changing\n                    to a lower version may delete the current world.\n                </DialogContentText>\n                <DialogContentText>\n                    Continue?\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    onClick = { onNo }\n                    color = \"primary\"\n                    variant=\"contained\"\n                    autoFocus>\n                    No\n                </Button>\n                <Button\n                    onClick = { onYes }\n                    color = \"primary\"\n                    variant=\"contained\">\n                    Yes\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nConfirmVersionDialog.propTypes = {\n    detectedVersion: PropTypes.object,\n    selectedVersionToInstall: PropTypes.object,\n    onNo: PropTypes.func.isRequired,\n    onYes: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\n\nexport default function ConfirmRestartDialog (props) {\n    const { onNo, onYes, ...other } = props;\n\n    return (\n        <Dialog { ...other }>\n            <DialogTitle>Confirm Minecraft Restart</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Saving new properties will restart the Minecraft server.\n                </DialogContentText>\n                <DialogContentText>\n                    Continue?\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    onClick = { onNo }\n                    color = \"primary\"\n                    variant=\"contained\"\n                    autoFocus>\n                    No\n                </Button>\n                <Button\n                    onClick = { onYes }\n                    color = \"primary\"\n                    variant=\"contained\">\n                    Yes\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nConfirmRestartDialog.propTypes = {\n    onNo: PropTypes.func.isRequired,\n    onYes: PropTypes.func.isRequired\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport axios from 'axios';\n\nimport 'typeface-roboto';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Refresh from '@material-ui/icons/Cached';\nimport Save from '@material-ui/icons/Save';\nimport Undo from '@material-ui/icons/Undo';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Typography from '@material-ui/core/Typography';\n\nimport ActionInProgressDialog from './ActionInProgressDialog.js';\nimport ConfirmRestartDialog from './ConfirmRestartDialog.js';\n\nexport default function ServerProperties (props) {\n    let currentMinecraftProperties = Object.assign([], props.minecraftProperties.serverProperties);\n    const [dirtyProps, setDirtyProps] = useState(false);\n    const [progressDialogOpen, setProgressDialogOpen] = useState(false);\n    const [restartDialogOpen, setRestartDialogOpen] = useState(false);\n    const [serverProperties, setServerProperties] = useState(props.minecraftProperties.serverProperties);\n    \n    const openProgressDialog = () => {\n        setProgressDialogOpen(true);\n    };\n    \n    const closeProgressDialog = () => {\n        setProgressDialogOpen(false);\n    };\n    \n    const openRestartDialog = () => {\n        setRestartDialogOpen(true);\n    };\n    \n    const closeRestartDialog = () => {\n        setRestartDialogOpen(false);\n    };\n\n    const refreshProperties = () => {\n        openProgressDialog();\n        axios({\n            method: 'get',\n            url: `/api/refreshServerProperties`\n        }).then(res => {\n            setServerProperties(res.data.properties);\n            currentMinecraftProperties = Object.assign({}, res.data.properties);\n            setDirtyProps(false);\n            setProgressDialogOpen(false);\n        }, err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n            setProgressDialogOpen(false);\n        });\n    };\n\n    const saveProperties = () => {\n        closeRestartDialog();\n        openProgressDialog();\n        let newProperties = JSON.stringify(serverProperties);\n        axios({\n            method: 'post',\n            url: `/api/saveMinecraftProperties`,\n            params: {\n                newProperties: newProperties\n            }\n        }).then(() => {\n            refreshProperties();\n        }, err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n            refreshProperties();\n        });\n    };\n\n    const undoPropertyEdits = () => {\n        setServerProperties(currentMinecraftProperties);\n        setDirtyProps(false);\n    };\n\n    const updatePropertyType = (event) => {\n        let newMinecraftProps = Object.assign([], serverProperties);\n        let changed = false;\n        let property;\n        for (let p = 0; p < newMinecraftProps.length; p++) {\n            property = newMinecraftProps[p];\n            if (property.name === event.target.id) {\n                if (property.value !== event.target.value) {\n                    property.value = event.target.value;\n                    changed = true;\n                }\n                break;\n            }\n        }\n        if (changed){\n            setServerProperties(newMinecraftProps);\n            setDirtyProps(true);\n        }\n    };\n\n    return (\n        <div>\n            <ActionInProgressDialog\n                open = { progressDialogOpen }\n                onClose = { closeProgressDialog }\n            />\n            <ConfirmRestartDialog\n                open = { restartDialogOpen }\n                onNo = { closeRestartDialog }\n                onYes = { saveProperties }\n            />\n            <Typography variant=\"subtitle1\">\n                Server Properties\n            </Typography>\n            <Typography>\n                Change Minecraft server properties. When finished, click <strong>Save</strong>.&nbsp;\n                <Typography variant=\"caption\">\n                    (Saving changes will require a Minecraft restart.)\n                </Typography>\n            </Typography>\n            <Typography>\n                <strong>Undo</strong> will reset all fields to the current running settings.\n            </Typography>\n            <Typography>\n                <strong>Refresh</strong> reads current values from the Minecraft server files.\n            </Typography>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={ refreshProperties }>\n                <Refresh />\n                Refresh\n            </Button>\n            <Button\n                disabled = { !dirtyProps }\n                variant=\"contained\"\n                color=\"primary\"\n                onClick = { openRestartDialog }>\n                <Save />\n                Save\n            </Button>\n            <Button\n                disabled = { !dirtyProps }\n                variant=\"contained\"\n                color=\"primary\"\n                onClick = { undoPropertyEdits }>\n                <Undo />\n                Undo\n            </Button>\n            <div style={{maxHeight: \"100vh\", overflow: \"auto\"}}>\n                <Table size=\"small\">\n                    <TableBody>\n                        <TableRow><TableCell></TableCell></TableRow>\n                        { serverProperties && serverProperties.length ? serverProperties.map(property => {\n                            return (\n                                <TableRow key={ property.name }>\n                                    <TableCell>\n                                        <FormControl fullWidth>\n                                            <InputLabel\n                                                htmlFor=\"{ property.name }\">\n                                                { property.name }\n                                            </InputLabel>\n                                            <Input\n                                                id = { property.name }\n                                                value = { property.value }\n                                                fullWidth\n                                                onChange = { updatePropertyType }\n                                                onKeyPress = { updatePropertyType }/>\n                                        </FormControl>\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        }) : <TableRow><TableCell>Waiting on Minecraft server...</TableCell></TableRow> }\n                    </TableBody>\n                </Table>\n            </div>\n        </div>\n    );\n}\n\nServerProperties.propTypes = {\n    minecraftProperties: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport axios from 'axios';\n\nimport 'typeface-roboto';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Restart from '@material-ui/icons/Autorenew';\nimport Select from '@material-ui/core/Select';\nimport Start from '@material-ui/icons/PlayArrow';\nimport Stop from '@material-ui/icons/Stop';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport UpdateAvailable from '@material-ui/icons/AssignmentLate';\n\nimport ActionInProgressDialog from './ActionInProgressDialog.js';\nimport ConfirmVersionDialog from './ConfirmVersionDialog.js';\nimport ServerProperties from './ServerProperties.js';\nimport { Tooltip } from '@material-ui/core';\n\nconst styles = {\n    container: {\n        margin: 10,\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontSize: '0.95rem'\n    }\n};\n\nclass ServerControls extends React.Component {\n    constructor (props) {\n        super(props);\n\n        let detectedVersion = props.minecraftProperties.detectedVersion;\n        if (!detectedVersion || !detectedVersion.full) {\n            detectedVersion = { full: 'latest' };\n        }\n        \n        this.state = {\n            progressDialogOpen: false,\n            versionDialogOpen: false,\n            versionToInstall: detectedVersion\n        };\n        this.checkVersionToInstall = this.checkVersionToInstall.bind(this);\n        this.closeProgressDialog = this.closeProgressDialog.bind(this);\n        this.closeVersionDialog = this.closeVersionDialog.bind(this);\n        this.handleVersionConfirmation = this.handleVersionConfirmation.bind(this);\n        this.openProgressDialog = this.openProgressDialog.bind(this);\n        this.installMinecraft = this.installMinecraft.bind(this);\n        this.restartMinecraft = this.restartMinecraft.bind(this);\n        this.selectVersionToInstall = this.selectVersionToInstall.bind(this);\n        this.startMinecraft = this.startMinecraft.bind(this);\n        this.stopMinecraft = this.stopMinecraft.bind(this);\n    }\n    \n    openProgressDialog () {\n        this.setState({ progressDialogOpen: true });\n    }\n    \n    closeProgressDialog () {\n        this.setState({ progressDialogOpen: false });\n    }\n\n    closeVersionDialog () {\n        this.setState({ versionToInstall: this.props.minecraftProperties.detectedVersion });\n        this.setState({ versionDialogOpen: false });\n    }\n    \n    checkVersionToInstall () {\n        if (this.state.versionToInstall.full !== this.props.minecraftProperties.detectedVersion.full) {\n            this.setState({ versionDialogOpen: true });\n        }\n    }\n\n    displayReleaseVersions (version) {\n        return (\n            <MenuItem\n                key={ version.id }\n                value={ version.id }>\n                { version.id }\n            </MenuItem>\n        );\n    }\n\n    handleVersionConfirmation (value) {\n        if (value && typeof value === 'string') {\n            this.setState({ versionToInstall: {full: value} });\n        }\n        this.setState({ versionDialogOpen: false });\n        this.installMinecraft();\n    }\n\n    installMinecraft () {\n        this.setState({ progressDialogOpen: true });\n        // this.props.stopMinecraftStatus();\n        axios({\n            method: 'post',\n            url: `/api/install`,\n            params: {\n                version: this.state.versionToInstall.full\n            }\n        }).then(() => {\n            this.props.startMinecraftStatus();\n            this.setState({ progressDialogOpen: false });\n            this.selectVersionToInstall({target: {value: this.props.minecraftProperties.detectedVersion}});\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n        });\n    }\n\n    restartMinecraft () {\n        this.setState({ progressDialogOpen: true });\n        // this.props.stopMinecraftStatus();\n        axios({\n            method: 'post',\n            url: `/api/restart`\n        }).then(() => {\n            this.props.startMinecraftStatus();\n            this.setState({ progressDialogOpen: false });\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n        });\n    }\n\n    selectVersionToInstall (selectedVersionToInstall) {\n        let minecraftProperties = this.props.minecraftProperties,\n            releaseVersions = {},\n            versionToInstall = '';\n\n        if (minecraftProperties.versions) {\n            releaseVersions = minecraftProperties.versions.releaseVersions;\n        }\n        \n        if (releaseVersions && releaseVersions.length) {\n            for (let releaseVersion of releaseVersions) {\n                if (releaseVersion.id === selectedVersionToInstall.target.value) {\n                    versionToInstall = { full: releaseVersion.id };\n                    break;\n                }\n            }\n            if (!versionToInstall) {\n                versionToInstall = { full: 'latest' };\n            }\n            this.setState({ versionToInstall });\n        }\n    }\n    \n    startMinecraft () {\n        this.setState({ progressDialogOpen: true });\n        axios({\n            method: 'post',\n            url: `/api/start`\n        }).then(() => {\n            this.props.startMinecraftStatus();\n            this.setState({ progressDialogOpen: false });\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n        });\n    }\n  \n    stopMinecraft () {\n        this.setState({ progressDialogOpen: true });\n        axios({\n            method: 'post',\n            url: `/api/stop`\n        }).then(() => {\n            // this.props.stopMinecraftStatus();\n            this.setState({ progressDialogOpen: false });\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n        });\n    }\n\n    render () {\n        let minecraftProperties = this.props.minecraftProperties;\n\n        return (\n            <div style={ styles.container }>\n                <ActionInProgressDialog\n                    open = { this.state.progressDialogOpen }\n                    onClose = { this.closeProgressDialog }\n                />\n                <ConfirmVersionDialog\n                    open = { this.state.versionDialogOpen }\n                    onNo = { this.closeVersionDialog }\n                    onYes = { this.handleVersionConfirmation }\n                    detectedVersion = { minecraftProperties.detectedVersion }\n                    selectedVersionToInstall = { this.state.versionToInstall }\n                />\n                <Typography variant=\"subtitle1\">\n                    Server Controls\n                </Typography>\n                <Table>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <Button\n                                    onClick={ this.startMinecraft }\n                                    disabled={ minecraftProperties.started }\n                                    variant=\"contained\"\n                                    color=\"primary\">\n                                    <Start />\n                                    Start\n                                </Button>\n                                <Button\n                                    onClick = { this.stopMinecraft }\n                                    disabled = { !minecraftProperties.started }\n                                    variant=\"contained\"\n                                    color=\"primary\">\n                                    <Stop />\n                                    Stop\n                                </Button>\n                                <Button\n                                    onClick = { this.restartMinecraft }\n                                    disabled = { !minecraftProperties.started }\n                                    variant=\"contained\"\n                                    color=\"primary\">\n                                    <Restart />\n                                    Restart\n                                </Button>\n                            </TableCell>\n                            <TableCell>\n                                <Button\n                                    onClick = { this.checkVersionToInstall }\n                                    variant=\"contained\"\n                                    color=\"primary\">\n                                    Install\n                                </Button>\n                                <Select\n                                    value={ this.state.versionToInstall.full }\n                                    onChange={ this.selectVersionToInstall }>\n                                    <MenuItem value=\"latest\">\n                                        <em>latest</em>\n                                    </MenuItem>\n                                    { minecraftProperties.versions && minecraftProperties.versions.releaseVersions ? minecraftProperties.versions.releaseVersions.map(this.displayReleaseVersions) : <div></div> }\n                                </Select>\n                            </TableCell>\n                            <TableCell>\n                                { minecraftProperties.updateAvailable ?\n                                    <Tooltip\n                                        title=\"Update Available\">\n                                        <Button>\n                                            <UpdateAvailable />\n                                        </Button>\n                                    </Tooltip> : <div></div>\n                                }\n                                <Button\n                                    disabled\n                                    variant=\"contained\"\n                                    color=\"primary\">\n                                    Check for updates\n                                </Button>\n                            </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n                <ServerProperties minecraftProperties = { minecraftProperties }/>\n            </div>\n        );\n    }\n}\n\nServerControls.propTypes = {\n    minecraftProperties: PropTypes.object.isRequired,\n    startMinecraftStatus: PropTypes.func.isRequired,\n    stopMinecraftStatus: PropTypes.func.isRequired\n};\n\nexport default ServerControls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Button from '@material-ui/core/Button';\n    \nexport default class BackupBeforeNewDialog extends React.Component {\n\n    render () {\n        return (\n            <Dialog open = { this.props.open }>\n                <DialogContent>\n                    <DialogContentText>\n                        Would you like to backup the world first?\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick = { this.props.cancelDialog } color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick = { this.props.newOnly } color=\"primary\">\n                        No\n                    </Button>\n                    <Button onClick = { this.props.backupAndNew } color=\"primary\" autoFocus>\n                        Yes\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nBackupBeforeNewDialog.propTypes = {\n    open: PropTypes.bool.isRequired,\n    cancelDialog: PropTypes.func.isRequired,\n    newOnly: PropTypes.func.isRequired,\n    backupAndNew: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '@material-ui/core/Button';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nconst styles = {\n    container: {\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontSize: '0.95rem'\n    }\n};\n    \nexport default class RawMinecraftCommandDialog extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.closeDialog = this.closeDialog.bind(this);\n        this.listCommands = this.listCommands.bind(this);\n    }\n\n    closeDialog (command) {\n        this.props.updateRawCommandField(command);\n        this.props.onClose();\n    }\n\n    listCommands (command) {\n        return (\n            <ListItem key = { command.key } button onClick = { () => { this.closeDialog(command.command); } }>\n                <ListItemText primary = { command.command } />\n                <Divider />\n            </ListItem>\n        );\n    }\n\n    render () {\n        return (\n            <Dialog fullScreen open = { this.props.open } style = { styles.container } >\n                <DialogTitle>\n                    <IconButton onClick = { this.props.onClose }>\n                        <CloseIcon />\n                    </IconButton>\n                    Available Minecraft Commands\n                </DialogTitle>\n                <DialogContent>\n                    <List dense={ true }>\n                        { this.props.minecraftCommands ? this.props.minecraftCommands.map(this.listCommands) : <div></div> }\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick = { this.props.onClose } color=\"primary\">\n                        Cancel\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nRawMinecraftCommandDialog.propTypes = {\n    minecraftCommands: PropTypes.array.isRequired,\n    open: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    updateRawCommandField: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class BackupItem extends React.Component {\n    render () {\n        let backup = this.props.backup;\n\n        return (\n            <option value = { backup.fileName }>{ backup.worldName }: Taken { backup.date } at { backup.time }</option>\n        );\n    }\n}\n\nBackupItem.propTypes = {\n    backup: PropTypes.object.isRequired\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Select from '@material-ui/core/Select';\n\nimport BackupItem from './BackupItem';\n\nexport default class RestoreBackupDialog extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            backupValue: \"\"\n        };\n    }\n\n    displayBackupItems (backup) {\n        return (\n            <BackupItem\n                key = { backup.fileName }\n                backup = { backup }\n            />\n        );\n    }\n\n    render () {\n        let potentialBackups = this.props.potentialBackups;\n        \n        return (\n            <Dialog\n                open = { this.props.open }>\n                <DialogContent>\n                    <FormControl>\n                        <Select\n                            native\n                            inputProps = {{\n                                id: 'backup',\n                            }}\n                            value = { this.state.backupValue } >\n                            { potentialBackups.map(this.displayBackupItems) }\n                        </Select>\n                    </FormControl>\n                    <FormHelperText>Choose a backup to restore</FormHelperText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick = { this.props.onClose } color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick = { this.props.onClose } color=\"primary\" autoFocus>\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nRestoreBackupDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n    potentialBackups: PropTypes.array.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport axios from 'axios';\n\nimport 'typeface-roboto';\nimport Backup from '@material-ui/icons/Backup';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport FormControl from '@material-ui/core/FormControl';\nimport Help from '@material-ui/icons/Help';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport New from '@material-ui/icons/Public';\nimport Restore from '@material-ui/icons/Restore';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\n\nimport BackupBeforeNewDialog from './BackupBeforeNewDialog.js';\nimport ActionInProgressDialog from './ActionInProgressDialog.js';\nimport RawMinecraftCommandDialog from './RawMinecraftCommandDialog.js';\nimport RestoreBackupDialog from './RestoreBackupDialog.js';\n\nconst styles = {\n    container: {\n        margin: 10,\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontSize: '0.95rem'\n    }\n};\n    \nexport default class WorldControls extends React.Component {\n    constructor (props) {\n        super(props);\n        \n        this.state = {\n            backupDialogOpen: false,\n            commandOutput: '',\n            helpDialogOpen: false,\n            potentialBackups: [],\n            progressDialogOpen: false,\n            rawMinecraftCommandDialogOpen: false,\n            rawCommand: '',\n            restoreDialogOpen: false,\n            restoreBackup: {  }\n        };\n        this.backupAndNewMinecraftWorld = this.backupAndNewMinecraftWorld.bind(this);\n        this.backupAndRestoreMinecraftWorld = this.backupAndRestoreMinecraftWorld.bind(this);\n        this.backupMinecraftWorld = this.backupMinecraftWorld.bind(this);\n        this.closeBackupDialog = this.closeBackupDialog.bind(this);\n        this.closeProgressDialog = this.closeProgressDialog.bind(this);\n        this.closeRawCommandDialog = this.closeRawCommandDialog.bind(this);\n        this.closeRestoreDialog = this.closeRestoreDialog.bind(this);\n        this.getMinecraftWorldBackups = this.getMinecraftWorldBackups.bind(this);\n        this.newMinecraftWorld = this.newMinecraftWorld.bind(this);\n        this.onClearCommand = this.onClearCommand.bind(this);\n        this.onClearOutput = this.onClearOutput.bind(this);\n        this.onSendCommand = this.onSendCommand.bind(this);\n        this.openBackupBeforeNewDialog = this.openBackupBeforeNewDialog.bind(this);\n        this.openProgressDialog = this.openProgressDialog.bind(this);\n        this.openRawCommandDialog = this.openRawCommandDialog.bind(this);\n        this.openRestoreDialog = this.openRestoreDialog.bind(this);\n        this.restoreMinecraftWorld = this.restoreMinecraftWorld.bind(this);\n        this.updateRawCommandDialog = this.updateRawCommandDialog.bind(this);\n        this.updateRawCommandType = this.updateRawCommandType.bind(this);\n    }\n\n    backupAndNewMinecraftWorld () {\n        // TODO Fix issue of if failed backup then don't nuke\n        this.backupMinecraftWorld();\n        this.newMinecraftWorld();\n    }\n\n    backupAndRestoreMinecraftWorld () {\n        // TODO Fix issue of if failed backup then don't nuke\n        this.backupMinecraftWorld();\n        this.restoreMinecraftWorld();\n    }\n      \n    backupMinecraftWorld () {\n        this.setState({ backupDialogOpen: false, progressDialogOpen: true,  restoreDialogOpen: false });\n        axios({\n            method: 'post',\n            url: '/api/backupWorld'\n        }).then(() => {\n            this.setState({ progressDialogOpen: false });\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n            this.setState({ progressDialogOpen: false });\n        });\n    }\n    \n    closeBackupDialog () {\n        this.setState({ backupDialogOpen: false });\n    }\n    \n    closeProgressDialog () {\n        this.setState({ progressDialogOpen: false });\n    }\n\n    closeRawCommandDialog () {\n        this.setState({ rawMinecraftCommandDialogOpen: false });\n    }\n    \n    closeRestoreDialog (worldBackup) {\n        if (worldBackup.filename) {\n            this.setState({ restoreBackup: worldBackup });\n            console.log('Would restore world: ', worldBackup);\n            this.setState({ restoreDialogOpen: false });\n            this.restoreMinecraftWorld(worldBackup);\n        } else {\n            this.setState({ restoreDialogOpen: false });\n        }\n    }\n\n    getMinecraftWorldBackups () {\n        axios({\n            method: 'get',\n            url: `/api/listWorldBackups`\n        }).then(res => {\n            let backupList = res.data.backupList;\n            console.log('backupList response:', backupList);\n            if (backupList.length) {\n                this.setState({ potentialBackups: backupList });\n                this.setState({ restoreDialogOpen: true });\n            } else {\n                // TODO: Show error\n                this.setState({ potentialBackups: [{key: 'nothingtoseehere', fileName: 'nope', worldName: '', date: ''}] });\n                console.log('An error occurred getting backups from the Minecraft server.', backupList);\n            }\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n            this.setState({ restoreDialogOpen: false });\n        });\n    }\n    \n    newMinecraftWorld () {\n        this.setState({ backupDialogOpen: false, progressDialogOpen: true,  restoreDialogOpen: false });\n        axios({\n            method: 'post',\n            url: '/api/newWorld',\n            params: {\n                backup: false\n            }\n        }).then(() => {\n            this.setState({ progressDialogOpen: false });\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n            this.setState({ progressDialogOpen: false });\n        });\n    }\n\n    onClearCommand () {\n        this.setState({ rawCommand: '' });\n    }\n\n    onClearOutput () {\n        this.setState({ commandOutput: '' });\n    }\n    \n    onSendCommand () {\n        if (this.state.rawCommand) {\n            axios({\n                method: 'post',\n                url: '/api/command',\n                params: {\n                    command: this.state.rawCommand\n                }\n            }).then(response => {\n                let commandOutput = response.data.output;\n                this.setState({ rawCommand: '' });\n                this.setState({ commandOutput });\n            },\n            err => {\n                console.log('An error occurred contacting the Minecraft server.', err);\n                this.setState({ progressDialogOpen: false });\n            });\n        }\n    }\n    \n    openBackupBeforeNewDialog () {\n        this.setState({ backupDialogOpen: true, progressDialogOpen: false, rawMinecraftCommandDialogOpen: false });\n    }\n    \n    openProgressDialog () {\n        this.setState({ backupDialogOpen: false, progressDialogOpen: true, rawMinecraftCommandDialogOpen: false });\n    }\n\n    openRawCommandDialog () {\n        this.setState({ backupDialogOpen: false, progressDialogOpen: false, rawMinecraftCommandDialogOpen: true });\n    }\n    \n    openRestoreDialog () {\n        this.getMinecraftWorldBackups();\n        this.setState({ backupDialogOpen: false, progressDialogOpen: false, rawMinecraftCommandDialogOpen: false, restoreDialogOpen: true });\n    }\n    \n    restoreMinecraftWorld (worldBackup) {\n        this.setState({ backupDialogOpen: false, progressDialogOpen: true, restoreDialogOpen: false });\n        axios({\n            method: 'post',\n            url: '/api/command',\n            params: {\n                command: '/restoreWorld',\n                backupFile: worldBackup,\n                backup: false\n            }\n        }).then(() => {\n            this.setState({ backupDialogOpen: false, progressDialogOpen: false, restoreDialogOpen: false });\n            this.setState({ restoreBackup: {} });\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n            this.setState({ restoreDialogOpen: false });\n        });\n    }\n\n    updateRawCommandType (event) {\n        if (event.key === 'Enter') {\n            this.onSendCommand();\n        } else {\n            this.setState({ rawCommand: event.target.value });\n        }\n    }\n\n    updateRawCommandDialog (command) {\n        this.setState({ rawCommand: command });\n    }\n\n    render () {\n        return (\n            <div style={ styles.container }>\n                <BackupBeforeNewDialog \n                    backupAndNew = { this.backupAndNewMinecraftWorld } \n                    newOnly = { this.newMinecraftWorld }\n                    cancelDialog = { this.closeBackupDialog }\n                    open = { this.state.backupDialogOpen }\n                />\n                <ActionInProgressDialog\n                    open = { this.state.progressDialogOpen }\n                    onClose = { this.closeProgressDialog }\n                />\n                <RawMinecraftCommandDialog\n                    open = { this.state.rawMinecraftCommandDialogOpen }\n                    onClose = { this.closeRawCommandDialog }\n                    minecraftCommands = { this.props.minecraftProperties.fullHelp }\n                    updateRawCommandField = { this.updateRawCommandDialog }\n                />\n                <RestoreBackupDialog\n                    open = { this.state.restoreDialogOpen }\n                    onClose = { this.closeRestoreDialog }\n                    potentialBackups = { this.state.potentialBackups }\n                />\n                <Typography variant=\"subtitle1\">\n                    World Controls\n                </Typography>\n                <Table>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = { this.backupMinecraftWorld }>\n                                    <Backup />\n                                    Backup World\n                                </Button>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = { this.openRestoreDialog } disabled>\n                                    <Restore />\n                                    Restore World\n                                </Button>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = { this.openBackupBeforeNewDialog }>\n                                    <New />\n                                    New World\n                                </Button>\n                            </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n                <Typography variant=\"subtitle1\">\n                    Send Minecraft Command\n                </Typography>\n                <FormControl fullWidth>\n                    <InputLabel htmlFor = \"rawCommand\">\n                        Enter command. Click the Help icon for a full list of supported commands.\n                    </InputLabel>\n                    <Input id = 'rawCommand' fullWidth value = { this.state.rawCommand } onChange = { this.updateRawCommandType } onKeyPress = { this.updateRawCommandType }/>\n                    <Divider />\n                </FormControl>\n                <Tooltip title = \"List available Minecraft commands\">\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick = { this.openRawCommandDialog }>\n                        <Help />\n                    </Button>\n                </Tooltip>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick = { this.onClearCommand }>Clear Command</Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={ !this.props.minecraftProperties.started && !this.state.rawCommand === '' }\n                    onClick = { this.onSendCommand }>Send Command</Button>\n                <FormControl fullWidth>\n                    <TextField\n                        label=\"Command Output\"\n                        multiline\n                        rows=\"6\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        value={ this.state.commandOutput }\n                    />\n                </FormControl>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick = { this.onClearOutput }>Clear Output</Button>\n            </div>\n        );\n    }\n}\n\nWorldControls.propTypes = {\n    minecraftProperties: PropTypes.object.isRequired\n};\n","import React, { Component } from 'react';\n\nconst styles = {\n    container: {\n        margin: 10,\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontSize: '.95rem'\n    }\n};\n\nclass Preferences extends Component {\n    render () {\n        return (\n            <div style={styles.container}>\n                <p>\n                    Preferences will go here to handle Minecraft startup and status timers.\n                </p>\n            </div>\n        );\n    }\n}\n\nexport default Preferences;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport 'typeface-roboto';\nimport Help from '@material-ui/icons/Help';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\n\nclass About extends React.Component {\n    render () {\n        let minecraftProperties = this.props.minecraftProperties;\n        const GB = 1024 ** 3;\n        let mem = minecraftProperties.nodeInfo ? minecraftProperties.nodeInfo.mem / GB : 'Unknown';\n\n        return (\n            <div>\n                <Table>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"h6\">\n                                    <a href={ minecraftProperties.eulaUrl } target=\"_blank\" rel=\"noopener noreferrer\">Minecraft End User License Agreement</a>\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n                <Table size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Contributors\n                                </Typography>\n                            </TableCell>\n                            <TableCell> </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Project Owner\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography>\n                                    nickrnet\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Authors\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography>\n                                    nickrnet, DevBonBon\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Testing\n                                </Typography>\n                            </TableCell>\n                            <TableCell> </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n                <Table size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    System Information\n                                </Typography>\n                            </TableCell>\n                            <TableCell> </TableCell>\n                            <TableCell> </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    CPU\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography>\n                                    { minecraftProperties.nodeInfo ? minecraftProperties.nodeInfo.cpus[0].model + ', ' + minecraftProperties.nodeInfo.cpus.length + ' cores' : 'Unknown' }\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Tooltip title = \"Logical CPUs, both physical and virtual\">\n                                    <Help />\n                                </Tooltip>\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    RAM\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography>\n                                    { mem } GB\n                                </Typography>\n                            </TableCell>\n                            <TableCell> </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    NodeJS Version\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography>\n                                    { minecraftProperties.nodeInfo ? minecraftProperties.nodeInfo.version : 'Unknown' }\n                                </Typography>\n                            </TableCell>\n                            <TableCell> </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n                {/* <div>\n                    <script type=\"text/javascript\">\n                        amzn_assoc_ad_type = \"banner\";\n                        amzn_assoc_marketplace = \"amazon\";\n                        amzn_assoc_region = \"US\";\n                        amzn_assoc_placement = \"assoc_banner_placement_default\";\n                        amzn_assoc_banner_type = \"ez\";\n                        amzn_assoc_p = \"9\";\n                        amzn_assoc_width = \"180\";\n                        amzn_assoc_height = \"150\";\n                        amzn_assoc_tracking_id = \"nickrnet-20\";\n                        amzn_assoc_linkid = \"2c598468f363378d5fb52de183d72a89\";\n                    </script>\n                    <script src=\"https://z-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&Operation=GetScript&ID=OneJS&WS=1\"></script>\n                </div>\n                <p>\n                    Support this project by making purchases from Amazon.\n                </p>\n                <iframe src=\"https://rcm-na.amazon-adsystem.com/e/cm?o=1&p=9&l=ez&f=ifr&linkID=94a6a8bcf4c0832533e2ed9b53ea4ccc&t=nickrnet-20&tracking_id=nickrnet-20\" width=\"180\" height=\"150\" scrolling=\"no\" border=\"1\" marginWidth=\"0\" title=\"Amazon\" style={ styles.container } frameBorder=\"0\"></iframe> */}\n            </div>\n        );\n    }\n}\n\nAbout.propTypes = {\n    minecraftProperties: PropTypes.object.isRequired\n};\n\nexport default About;\n","import React from 'react';\n\nimport axios from 'axios';\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport AppBar from '@material-ui/core/AppBar';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nimport Dashboard from './Dashboard/Dashboard.js';\nimport Players from './Players/Players.js';\nimport ServerControls from './ServerControls/ServerControls.js';\nimport WorldControls from './ServerControls/WorldControls.js';\nimport Preferences from './Preferences/Preferences.js';\nimport About from './About/About.js';\n\nconst debug = false;\n\nexport default class App extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n            debug: debug,\n            ipInfo: {},\n            minecraftStatus: {},\n            eulaOpen: false,\n            minecraftProperties: {},\n            playerInfo: {},\n            value: 0\n        };\n        if (debug) {\n            console.log('App state:', this.state);\n        }\n        this.handleAcceptEula = this.handleAcceptEula.bind(this);\n        this.handleDeclineEula = this.handleDeclineEula.bind(this);\n        this.getIpInfo = this.getIpInfo.bind(this);\n        this.getMinecraftServerProperties = this.getMinecraftServerProperties.bind(this);\n        this.getMinecraftStatus = this.getMinecraftStatus.bind(this);\n        this.startMinecraftStatus = this.startMinecraftStatus.bind(this);\n        this.stopMinecraftStatus = this.stopMinecraftStatus.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.stopMinecraftStatus = this.stopMinecraftStatus.bind(this);\n\n        this.startMinecraftStatus();\n    }\n    \n    getTheme () {\n        const theme = createMuiTheme({\n            \"tableRowColumn\": {\n                \"height\": 60\n            },\n            \"container\": {\n                \"margin\": 10,\n                \"fontFamily\": '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n                \"fontSize\": '0.95rem'\n            },\n            \"overrides\": {\n                MuiButton: {\n                    root: {\n                        margin: \"10px\"\n                    }\n                }\n            }\n        });\n        \n        return theme;\n    }\n\n    componentWillUnmount () {\n        if (debug) {\n            console.log('Application shutting down.');\n        }\n        this.stopMinecraftStatus();\n    }\n    \n    handleChange (event, value) {\n        this.setState({ value });\n    }\n\n    getIpInfo () {\n        let ipInfo;\n\n        axios(`/api/ipInfo`).then(res => {\n            ipInfo = res.data;\n            this.setState({ ipInfo });\n        });\n    }\n\n    getMinecraftStatus (pingWait) {\n        let normalPingTime = 5 * 1000,\n            appendTime = 5 * 1000,\n            maxTime = 120 * 1000,\n            pingTime;\n\n        // normally ping every 5 seconds\n        // if a fast ping was requested (from constructor/DidMount), honor it\n        // once trouble hits, add 5 seconds until 2 minutes is reached, then reset to 60 seconds\n        // once re/successful, reset to 60 seconds\n        if (!pingWait) {\n            pingTime = normalPingTime;\n        } else if (pingWait < 1000) {\n            pingTime = pingWait;\n        } else if (pingWait > maxTime) {\n            pingTime = normalPingTime;\n        } else {\n            pingTime = pingWait;\n        }\n\n        if (this.statusTimerId) {\n            clearTimeout(this.statusTimerId);\n        }\n\n        this.statusTimerId = setTimeout(() => {\n            axios(`/api/status`).then(res => {\n                let minecraftProperties = res.data;\n                this.setState({ minecraftProperties });\n\n                if (debug) {\n                    console.log('Setting Minecraft status poller to run in', pingTime/1000, 'seconds.');\n                }\n                this.getMinecraftStatus();\n            },\n            err => {\n                let minecraftStatus = {};\n\n                this.setState({ minecraftStatus });\n                pingTime = pingTime + appendTime;\n\n                if (debug) {\n                    console.log('Error occurred:', err);\n                    console.log('Application state:', this.state);\n                    console.log('Setting Minecraft status poller to run in', pingTime/1000, 'seconds.');\n                }\n                this.getMinecraftStatus(pingTime);\n            });\n        }, pingTime);\n    }\n  \n    getMinecraftServerProperties () {\n        if (debug) {\n            console.log('Retrieving Minecraft Server properties.');\n        }\n\n        axios(`/api/properties`).then(res => {\n            let minecraftServerProperties = res.data;\n            minecraftServerProperties = minecraftServerProperties.properties;\n            this.setState({ minecraftServerProperties });\n            if (debug) {\n                console.log('MinecraftServer properties:', minecraftServerProperties);\n            }\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n        }).catch(e => {\n            console.log('An error occurred getting the server properties:', e);\n        });\n    }\n  \n    handleAcceptEula () {\n        axios({\n            method: 'post',\n            url: '/api/acceptEula'\n        }).then(() => {\n            this.setState({ eulaOpen: false });\n        }, error => {\n            console.log('error:', error);\n            this.setState({ eulaOpen: false });\n        }).catch(error => {\n            console.log('error:', error);\n            this.setState({ eulaOpen: false });\n        });\n    }\n  \n    handleDeclineEula () {\n        axios({\n            method: 'post',\n            url: '/api/stop'\n        }).then(() => {\n            this.setState({ eulaOpen: false });\n        }, error => {\n            console.log('error:', error);\n            this.setState({ eulaOpen: false });\n        }).catch(error => {\n            console.log('error:', error);\n            this.setState({ eulaOpen: false });\n        });\n    }\n\n    runOnce () {\n        this.getIpInfo();\n        this.getMinecraftServerProperties();\n    }\n\n    startMinecraftStatus () {\n        this.runOnce();\n        this.getMinecraftStatus(25);\n    }\n\n    stopMinecraftStatus () {\n        if (debug) {\n            console.log('Stopping Minecraft server poller.');\n        }\n\n        if (this.statusTimerId) {\n            clearTimeout(this.statusTimerId);\n        }\n\n        if (this.playersTimerId) {\n            clearTimeout(this.playersTimerId);\n        }\n    }\n    \n    render () {\n        let minecraftProperties = this.state.minecraftProperties;\n\n        return (\n            <MuiThemeProvider theme={ this.getTheme() }>\n                <AppBar position=\"static\">\n                    <Tabs\n                        value = { this.state.value }\n                        onChange = { this.handleChange }\n                        centered>\n                        <Tab label=\"Dashboard\" />\n                        <Tab label=\"Players\" />\n                        <Tab label=\"World Controls\" />\n                        <Tab label=\"Server Controls\" />\n                        <Tab label=\"Preferences\" />\n                        <Tab label=\"About\" />\n                    </Tabs>\n                </AppBar>\n                { this.state.value === 0 && <Dashboard\n                    ipInfo = { this.state.ipInfo }\n                    minecraftProperties = { minecraftProperties }\n                /> }\n                { this.state.value === 1 && <Players\n                    minecraftProperties = { minecraftProperties }\n                /> }\n                { this.state.value === 2 && <WorldControls\n                    minecraftProperties = { minecraftProperties }\n                    startMinecraftStatus = { this.startMinecraftStatus }\n                    stopMinecraftStatus = { this.stopMinecraftStatus }\n                /> }\n                { this.state.value === 3 && <ServerControls\n                    minecraftProperties = { minecraftProperties }\n                    startMinecraftStatus = { this.startMinecraftStatus }\n                    stopMinecraftStatus = { this.stopMinecraftStatus }\n                /> }\n                { this.state.value === 4 && <Preferences /> }\n                { this.state.value === 5 && <About\n                    minecraftProperties = { minecraftProperties }\n                /> }\n                <Snackbar\n                    anchorOrigin = {\n                        {\n                            vertical: 'bottom',\n                            horizontal: 'left' \n                        }\n                    }\n                    open = { !minecraftProperties.started }\n                    message = { <span id=\"message-id\">Minecraft is currently stopped.</span> }\n                />\n            </MuiThemeProvider>\n        );\n    }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}