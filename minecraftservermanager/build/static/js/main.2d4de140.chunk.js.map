{"version":3,"sources":["Dashboard/ServerSummary.js","Dashboard/PlayerListItem.js","Dashboard/PlayersSummary.js","Dashboard/Dashboard.js","Players/PlayerListItem.js","Players/Players.js","ServerControls/ActionInProgressDialog.js","ServerControls/ConfirmVersionDialog.js","ServerControls/ConfirmRestartDialog.js","ServerControls/ServerProperties.js","ServerControls/ServerControls.js","ServerControls/BackupBeforeNewDialog.js","ServerControls/RawMinecraftCommandDialog.js","ServerControls/BackupItem.js","ServerControls/RestoreBackupDialog.js","ServerControls/WorldControls.js","Preferences/Preferences.js","About/About.js","App.js","registerServiceWorker.js","index.js"],"names":["styles","container","margin","fontFamily","fontSize","ServerSummary","minecraftProperties","this","props","acceptedEula","react_default","a","createElement","Tooltip","title","CheckCircle_default","Error_default","started","updateAvailable","AssignmentLate_default","detectedVersion","major","TableCell","Typography","minor","release","rightNow","Date","now","uptime","startTime","seconds","h","Math","floor","m","s","filter","join","formatTime","style","variant","Table","size","TableBody","TableRow","minecraftOnline","minecraftUpdate","minecraftEulaAcceptedStatus","minecraftVersion","ipInfo","address","port","minecraftUptime","React","Component","PlayerListItem","player","name","PlayersSummary","online","PlayerListItem_PlayerListItem","key","playerInfo","players","summary","TableHead","map","displayPlayerListItems","Dashboard","Dashboard_ServerSummary","PlayersSummary_PlayersSummary","SignalWifi4Bar_default","SignalWifiOff_default","opped","VerifiedUser_default","banned","whitelisted","PlaylistAdd_default","IconButton","onClick","pardonPlayer","banPlayer","kickPlayer","deopPlayer","opPlayer","whitelistPlayer","Players","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","found","forEach","p","axios","method","url","params","command","then","err","console","log","Players_PlayerListItem_PlayerListItem","ActionInProgressDialog","onClose","other","objectWithoutProperties","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","color","autoFocus","ConfirmVersionDialog","selectedVersionToInstall","onNo","onYes","version","full","ConfirmRestartDialog","ServerProperties","currentMinecraftProperties","assign","serverProperties","_useState","useState","_useState2","slicedToArray","dirtyProps","setDirtyProps","_useState3","_useState4","progressDialogOpen","setProgressDialogOpen","_useState5","_useState6","restartDialogOpen","setRestartDialogOpen","_useState7","_useState8","setServerProperties","openProgressDialog","closeRestartDialog","refreshProperties","res","data","properties","updatePropertyType","event","property","newMinecraftProps","changed","length","target","id","value","open","newProperties","JSON","stringify","Cached_default","disabled","Save_default","Undo_default","maxHeight","overflow","FormControl","fullWidth","InputLabel","htmlFor","Input","onChange","onKeyPress","ServerControls","state","versionDialogOpen","versionToInstall","checkVersionToInstall","closeProgressDialog","closeVersionDialog","handleVersionConfirmation","installMinecraft","restartMinecraft","selectVersionToInstall","startMinecraft","stopMinecraft","setState","MenuItem","catch","error","_this2","startMinecraftStatus","_this3","releaseVersions","versions","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","releaseVersion","return","_this4","_this5","PlayArrow_default","Stop_default","Autorenew_default","Select","displayReleaseVersions","handleAcceptEula","installed","BackupBeforeNewDialog","cancelDialog","newOnly","backupAndNew","RawMinecraftCommandDialog","closeDialog","listCommands","updateRawCommandField","ListItem","button","ListItemText","primary","Divider","fullScreen","Close_default","List","dense","minecraftCommands","BackupItem","backup","fileName","worldName","date","time","RestoreBackupDialog","backupValue","BackupItem_BackupItem","potentialBackups","native","inputProps","displayBackupItems","FormHelperText","WorldControls","backupDialogOpen","commandOutput","helpDialogOpen","rawMinecraftCommandDialogOpen","rawCommand","restoreDialogOpen","restoreBackup","backupAndNewMinecraftWorld","backupAndRestoreMinecraftWorld","backupMinecraftWorld","closeBackupDialog","closeRawCommandDialog","closeRestoreDialog","getMinecraftWorldBackups","newMinecraftWorld","onClearCommand","onClearOutput","onSendCommand","openBackupBeforeNewDialog","openRawCommandDialog","openRestoreDialog","restoreMinecraftWorld","updateRawCommandDialog","updateRawCommandType","worldBackup","filename","backupList","response","output","_this6","backupFile","BackupBeforeNewDialog_BackupBeforeNewDialog","RawMinecraftCommandDialog_RawMinecraftCommandDialog","fullHelp","RestoreBackupDialog_RestoreBackupDialog","Backup_default","Restore_default","Public_default","Help_default","TextField","label","multiline","rows","Preferences","apiSettings","setApiSettings","settings","FormControlLabel","control","Checkbox","checked","autoStartMinecraft","oldApiSettings","newApiSettings","ipAddress","ipPort","About","GB","pow","mem","nodeInfo","href","eulaUrl","rel","cpus","model","debug","App","minecraftStatus","eulaOpen","handleDeclineEula","getIpInfo","getMinecraftServerProperties","getMinecraftStatus","stopMinecraftStatus","handleChange","createMuiTheme","tableRowColumn","height","overrides","MuiButton","root","pingWait","pingTime","statusTimerId","clearTimeout","setTimeout","minecraftServerProperties","e","runOnce","playersTimerId","MuiThemeProvider","theme","getTheme","AppBar","position","Tabs","centered","Tab","src_Dashboard_Dashboard","Players_Players","WorldControls_WorldControls","src_ServerControls_ServerControls","src_About_About","Snackbar","anchorOrigin","vertical","horizontal","message","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","App_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2d4de140.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport 'typeface-roboto';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\n\nimport CheckCircle from '@material-ui/icons/CheckCircle';\nimport Error from '@material-ui/icons/Error';\nimport AssignmentLate from '@material-ui/icons/AssignmentLate';\n\nconst styles = {\n    container: {\n        margin: 10,\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontSize: '0.95rem'\n    }\n};\n\nfunction formatTime (seconds) {\n    const h = Math.floor(seconds / 3600);\n    const m = Math.floor((seconds % 3600) / 60);\n    const s = Math.floor(seconds % 60);\n    return [\n        h,\n        m > 9 ? m : '0' + m,\n        s > 9 ? s : '0' + s,\n    ].filter(s => s).join(':');\n}\n\nclass ServerSummary extends React.Component {\n    minecraftEulaAcceptedStatus () {\n        let minecraftProperties = this.props.minecraftProperties;\n        \n        if (minecraftProperties && minecraftProperties.acceptedEula) {\n            return (\n                <div>\n                    <Tooltip title=\"Accepted\">\n                        <CheckCircle />\n                    </Tooltip>\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    <Tooltip title=\"Not accepted\">\n                        <Error />\n                    </Tooltip>\n                </div>\n            );\n        }\n    }\n\n    minecraftOnline () {\n        let minecraftProperties = this.props.minecraftProperties;\n        \n        if (minecraftProperties && minecraftProperties.started) {\n            return (\n                <div>\n                    <Tooltip title=\"Running\">\n                        <CheckCircle />\n                    </Tooltip>\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    <Tooltip title=\"Minecraft is not running\">\n                        <Error />\n                    </Tooltip>\n                </div>\n            );\n        }\n    }\n    \n    minecraftUpdate () {\n        let minecraftProperties = this.props.minecraftProperties;\n    \n        if (minecraftProperties && minecraftProperties.updateAvailable) {\n            return (\n                <div>\n                    <Tooltip title=\"Update Available\">\n                        <AssignmentLate />\n                    </Tooltip>\n                </div>\n            );\n        } else {\n            return <div></div>;\n        }\n    }\n    \n    minecraftVersion () {\n        let minecraftProperties = this.props.minecraftProperties;\n    \n        if (minecraftProperties && minecraftProperties.detectedVersion && minecraftProperties.detectedVersion.major) {\n            return (\n                <TableCell>\n                    <Typography>\n                        { minecraftProperties.detectedVersion.major + '.' + minecraftProperties.detectedVersion.minor + '.' + minecraftProperties.detectedVersion.release }\n                    </Typography>\n                </TableCell>\n            );\n        } else {\n            return <TableCell></TableCell>;\n        }\n    }\n\n    minecraftUptime () {\n        let minecraftProperties = this.props.minecraftProperties;\n        let rightNow = Date.now();\n        let uptime = 0;\n    \n        if (minecraftProperties && minecraftProperties.started && minecraftProperties.startTime > 0) {\n            uptime = (rightNow - minecraftProperties.startTime)/1000;\n            return (\n                <TableCell>\n                    <Typography>\n                        { formatTime(uptime) }\n                    </Typography>\n                </TableCell>\n            );\n        } else {\n            return(\n                <TableCell></TableCell>\n            );\n        }\n    }\n\n    render () {\n        return (\n            <div style={ styles.container }>\n                <Typography variant=\"subtitle1\">\n                    Server Information\n                </Typography>\n                <Table size=\"small\">\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Minecraft Status\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                { this.minecraftOnline() }\n                            </TableCell>\n                            <TableCell>\n                                { this.minecraftUpdate() }\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    EULA Accepted\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                { this.minecraftEulaAcceptedStatus() }\n                            </TableCell>\n                            <TableCell></TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Minecraft Version\n                                </Typography>\n                            </TableCell>\n                            { this.minecraftVersion() }\n                            <TableCell></TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Server Address\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography>\n                                    { this.props.ipInfo.address ? this.props.ipInfo.address + ':' + this.props.ipInfo.port : 'Not known.' }\n                                </Typography>\n                            </TableCell>\n                            <TableCell></TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Server Uptime\n                                </Typography>\n                            </TableCell>\n                            { this.minecraftUptime() }\n                            <TableCell></TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nServerSummary.propTypes = {\n    ipInfo: PropTypes.object.isRequired,\n    minecraftProperties: PropTypes.object.isRequired\n};\n\nexport default ServerSummary;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport 'typeface-roboto';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\n\nexport default class PlayerListItem extends React.Component {\n\n    render () {\n        let player = this.props.player || {};\n\n        return (\n            <TableRow>\n                <TableCell>\n                    <Typography>\n                        { player.name }\n                    </Typography>\n                </TableCell>\n            </TableRow>\n        );\n    }\n}\n\nPlayerListItem.propTypes = {\n    player: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport 'typeface-roboto';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\n\nimport PlayerListItem from './PlayerListItem';\n\nconst styles = {\n    container: {\n        margin: 10,\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontSize: '0.95rem'\n    }\n};\n\nexport default class PlayersSummary extends React.Component {\n    displayPlayerListItems (player) {\n        if (player.online) {\n            return (\n                <PlayerListItem\n                    key = { player.key }\n                    player = { player }\n                />\n            );\n        }\n    }\n\n    render () {\n        let minecraftProperties = this.props.minecraftProperties;\n        let playerInfo = minecraftProperties.playerInfo;\n        let players = [];\n        let summary = '';\n\n        if (playerInfo) {\n            players = playerInfo.players;\n            summary = playerInfo.summary;\n        }\n        \n        return (\n            <div style = { styles.container }>\n                <Typography variant=\"subtitle1\">\n                    Connected Players\n                </Typography>\n                <Table size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    { summary ? summary : 'Waiting on Minecraft server...' }\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n                </Table>\n                <Table>\n                    <TableBody>\n                        { players.map(this.displayPlayerListItems) }\n                    </TableBody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nPlayersSummary.propTypes = {\n    minecraftProperties: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ServerSummary from './ServerSummary.js';\nimport PlayersSummary from './PlayersSummary.js';\n\nconst styles = {\n    container: {\n        margin: 10,\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontSize: '0.95rem'\n    }\n};\n\nclass Dashboard extends React.Component {\n    render () {\n        return (\n            <div style={ styles.container }>\n                <ServerSummary ipInfo = { this.props.ipInfo } minecraftProperties = { this.props.minecraftProperties } />\n                <PlayersSummary minecraftProperties = { this.props.minecraftProperties } />\n            </div>\n        );\n    }\n}\n\nDashboard.propTypes = {\n    ipInfo: PropTypes.object.isRequired,\n    minecraftProperties: PropTypes.object.isRequired\n};\n\nexport default Dashboard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport 'typeface-roboto';\nimport Ban from '@material-ui/icons/Error';\nimport IconButton from '@material-ui/core/IconButton';\nimport Kick from '@material-ui/icons/Error';\nimport NetworkOnline from '@material-ui/icons/SignalWifi4Bar';\nimport NetworkOffline from '@material-ui/icons/SignalWifiOff';\nimport OpStatus from '@material-ui/icons/VerifiedUser';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport WhitelistIcon from '@material-ui/icons/PlaylistAdd';\n\nexport default function PlayerListItem (props) {\n\n    const banPlayer = () => {\n        props.banPlayer(props.player.name);\n    };\n    const pardonPlayer = () => {\n        props.pardonPlayer(props.player.name);\n    };\n    const kickPlayer = () => {\n        props.kickPlayer(props.player.name);\n    };\n    const opPlayer = () => {\n        props.opPlayer(props.player.name);\n    };\n    const deopPlayer = () => {\n        props.deopPlayer(props.player.name);\n    };\n    const whitelistPlayer = () => {\n        props.whitelistPlayer(props.player.name);\n    };\n\n    return (\n        <TableRow>\n            <TableCell>\n                <Typography>\n                    { props.player.name }\n                </Typography>\n            </TableCell>\n            <TableCell>{ props.player.online ? \n                <Tooltip title=\"Online\">\n                    <NetworkOnline />\n                </Tooltip> : \n                <Tooltip title=\"Offline\">\n                    <NetworkOffline />\n                </Tooltip>\n            }{ props.player.opped ?\n                <Tooltip title=\"Opped\">\n                    <OpStatus />\n                </Tooltip> : <span></span>\n            }{ props.player.banned ?\n                <Tooltip title=\"Banned\">\n                    <Ban />\n                </Tooltip> : <span></span>\n            }{ props.player.whitelisted ?\n                <Tooltip title=\"Whitelisted\">\n                    <WhitelistIcon />\n                </Tooltip> : <span></span>\n            }</TableCell>\n            <TableCell>\n                { props.player.banned ?\n                    <IconButton onClick = { pardonPlayer }>\n                        <Tooltip title=\"Pardon\">\n                            <Ban />\n                        </Tooltip>\n                    </IconButton> : \n                    <IconButton onClick = { banPlayer }>\n                        <Tooltip title=\"Ban\">\n                            <Ban />\n                        </Tooltip>\n                    </IconButton>\n                }\n                <IconButton onClick = { kickPlayer }>\n                    <Tooltip title=\"Kick\">\n                        <Kick />\n                    </Tooltip>\n                </IconButton>\n                { props.player.opped ?\n                    <IconButton onClick = { deopPlayer }>\n                        <Tooltip title=\"De Op\">\n                            <OpStatus />\n                        </Tooltip>\n                    </IconButton> : \n                    <IconButton onClick = { opPlayer }>\n                        <Tooltip title=\"Op\">\n                            <OpStatus />\n                        </Tooltip>\n                    </IconButton>\n                }\n                { !props.player.whitelisted ?\n                    <IconButton onClick = { whitelistPlayer }>\n                        <Tooltip title=\"Whitelist\">\n                            <WhitelistIcon />\n                        </Tooltip>\n                    </IconButton> : <div></div>\n                }\n            </TableCell>\n        </TableRow>\n    );\n}\n\nPlayerListItem.propTypes = {\n    player: PropTypes.object.isRequired,\n    whitelistPlayer: PropTypes.func.isRequired,\n    deopPlayer: PropTypes.func.isRequired,\n    opPlayer: PropTypes.func.isRequired,\n    kickPlayer: PropTypes.func.isRequired,\n    pardonPlayer: PropTypes.func.isRequired,\n    banPlayer: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport axios from 'axios';\n\nimport 'typeface-roboto';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\n\nimport PlayerListItem from './PlayerListItem';\n\nconst styles = {\n    container: {\n        margin: 10,\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontSize: '0.95rem'\n    }\n};\n\nexport default class Players extends React.Component {\n    constructor(props) {\n        super(props);\n        this.banPlayer = this.banPlayer.bind(this);\n        this.deopPlayer = this.deopPlayer.bind(this);\n        this.displayPlayerListItems = this.displayPlayerListItems.bind(this);\n        this.kickPlayer = this.kickPlayer.bind(this);\n        this.opPlayer = this.opPlayer.bind(this);\n        this.pardonPlayer = this.pardonPlayer.bind(this);\n        this.whitelistPlayer = this.whitelistPlayer.bind(this);\n    }\n\n    banPlayer (player) {\n        let found = false,\n            players = this.props.minecraftProperties.playerInfo.players;\n\n        players.forEach(p => {\n            if (p.name === player) {\n                found = true;\n            }\n        });\n        \n        if (found) {\n            axios({\n                method: 'post',\n                url: '/api/command',\n                params: {\n                    command: '/ban ' + player\n                }\n            }).then(() => {\n                return;\n            },\n            err => {\n                console.log('An error occurred contacting the Minecraft server.', err);\n            });\n        }\n    }\n\n    pardonPlayer (player) {\n        let found = false,\n            players = this.props.minecraftProperties.playerInfo.players;\n\n        players.forEach(p => {\n            if (p.name === player) {\n                found = true;\n            }\n        });\n\n        if (found) {\n            axios({\n                method: 'post',\n                url: '/api/command',\n                params: {\n                    command: '/pardon ' + player\n                }\n            }).then(() => {\n                return;\n            },\n            err => {\n                console.log('An error occurred contacting the Minecraft server.', err);\n            });\n        }\n    }\n\n    kickPlayer (player) {\n        let found = false,\n            players = this.props.minecraftProperties.playerInfo.players;\n\n        players.forEach(p => {\n            if (p.name === player) {\n                found = true;\n            }\n        });\n\n        if (found) {\n            axios({\n                method: 'post',\n                url: '/api/command',\n                params: {\n                    command: '/kick ' + player\n                }\n            }).then(() => {\n                return;\n            },\n            err => {\n                console.log('An error occurred contacting the Minecraft server.', err);\n            });\n        }\n    }\n\n    opPlayer (player) {\n        let found = false,\n            players = this.props.minecraftProperties.playerInfo.players;\n\n        players.forEach(p => {\n            if (p.name === player) {\n                found = true;\n            }\n        });\n\n        if (found) {\n            axios({\n                method: 'post',\n                url: '/api/command',\n                params: {\n                    command: '/op ' + player\n                }\n            }).then(() => {\n                return;\n            },\n            err => {\n                console.log('An error occurred contacting the Minecraft server.', err);\n            });\n        }\n    }\n\n    deopPlayer (player) {\n        let found = false,\n            players = this.props.minecraftProperties.playerInfo.players;\n\n        players.forEach(p => {\n            if (p.name === player) {\n                found = true;\n            }\n        });\n\n        if (found) {\n            axios({\n                method: 'post',\n                url: '/api/command',\n                params: {\n                    command: '/deop ' + player\n                }\n            }).then(() => {\n                return;\n            },\n            err => {\n                console.log('An error occurred contacting the Minecraft server.', err);\n            });\n        }\n    }\n\n    whitelistPlayer (player) {\n        let found = false,\n            players = this.props.minecraftProperties.playerInfo.players;\n\n        players.forEach(p => {\n            if (p.name === player) {\n                found = true;\n            }\n        });\n\n        if (found) {\n            axios({\n                method: 'post',\n                url: '/api/command',\n                params: {\n                    command: '/whitelist ' + player\n                }\n            }).then(() => {\n                return;\n            },\n            err => {\n                console.log('An error occurred contacting the Minecraft server.', err);\n            });\n        }\n    }\n\n    displayPlayerListItems (player) {\n        return (\n            <PlayerListItem\n                key = { player.key }\n                player = { player }\n                banPlayer = { this.banPlayer }\n                pardonPlayer = { this.pardonPlayer }\n                kickPlayer = { this.kickPlayer }\n                opPlayer = { this.opPlayer }\n                deopPlayer = { this.deopPlayer }\n                whitelistPlayer = { this.whitelistPlayer }\n            />\n        );\n    }\n\n    render () {\n        let minecraftProperties = this.props.minecraftProperties;\n        let playerInfo = minecraftProperties.playerInfo;\n        let players = [];\n        let summary = '';\n        \n        if (playerInfo && playerInfo.players) {\n            summary = playerInfo.summary;\n            players = playerInfo.players;\n        }\n        \n        return (\n            <div style = { styles.container }>\n                <Typography variant=\"subtitle1\">\n                    { summary ? summary : 'Waiting on Minecraft server...' }\n                </Typography>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Player\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Status\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Actions\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        { players.map(this.displayPlayerListItems) }\n                    </TableBody>\n                </Table>\n            </div>\n        );\n    }\n}\n\nPlayers.propTypes = {\n    minecraftProperties: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\n\nexport default function ActionInProgressDialog (props) {\n    const { onClose, ...other } = props;\n    return (\n        <Dialog { ...other }>\n            <DialogTitle>Please Wait</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Requested action in progress...\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    onClick = { onClose }\n                    variant=\"contained\"\n                    color = \"primary\"\n                    autoFocus>\n                    Close\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nActionInProgressDialog.propTypes = {\n    onClose: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\n\nexport default function ConfirmVersionDialog (props) {\n    const { detectedVersion, selectedVersionToInstall, onNo, onYes, ...other } = props;\n    // console.log('props:', props);\n    let version = \"\";\n\n    if (detectedVersion && detectedVersion.full) {\n        version = detectedVersion.full;\n    }\n    // TODO: Detect \"downgrade\".\n    return (\n        <Dialog { ...other }>\n            <DialogTitle>Confirm Version Change</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    The current running version is { version }, but the\n                    selected version is { selectedVersionToInstall ? selectedVersionToInstall.full : 'unknown' }. Changing\n                    to a lower version may delete the current world.\n                </DialogContentText>\n                <DialogContentText>\n                    Continue?\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    onClick = { onNo }\n                    color = \"primary\"\n                    variant=\"contained\"\n                    autoFocus>\n                    No\n                </Button>\n                <Button\n                    onClick = { onYes }\n                    color = \"primary\"\n                    variant=\"contained\">\n                    Yes\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nConfirmVersionDialog.propTypes = {\n    detectedVersion: PropTypes.object,\n    selectedVersionToInstall: PropTypes.object,\n    onNo: PropTypes.func.isRequired,\n    onYes: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\n\nexport default function ConfirmRestartDialog (props) {\n    const { onNo, onYes, ...other } = props;\n\n    return (\n        <Dialog { ...other }>\n            <DialogTitle>Confirm Minecraft Restart</DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    Saving new properties will restart the Minecraft server.\n                </DialogContentText>\n                <DialogContentText>\n                    Continue?\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    onClick = { onNo }\n                    color = \"primary\"\n                    variant=\"contained\"\n                    autoFocus>\n                    No\n                </Button>\n                <Button\n                    onClick = { onYes }\n                    color = \"primary\"\n                    variant=\"contained\">\n                    Yes\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nConfirmRestartDialog.propTypes = {\n    onNo: PropTypes.func.isRequired,\n    onYes: PropTypes.func.isRequired\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport axios from 'axios';\n\nimport 'typeface-roboto';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Refresh from '@material-ui/icons/Cached';\nimport Save from '@material-ui/icons/Save';\nimport Undo from '@material-ui/icons/Undo';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Typography from '@material-ui/core/Typography';\n\nimport ActionInProgressDialog from './ActionInProgressDialog.js';\nimport ConfirmRestartDialog from './ConfirmRestartDialog.js';\n\nexport default function ServerProperties (props) {\n    let currentMinecraftProperties = Object.assign([], props.minecraftProperties.serverProperties);\n    const [dirtyProps, setDirtyProps] = useState(false);\n    const [progressDialogOpen, setProgressDialogOpen] = useState(false);\n    const [restartDialogOpen, setRestartDialogOpen] = useState(false);\n    const [serverProperties, setServerProperties] = useState(props.minecraftProperties.serverProperties);\n    \n    const openProgressDialog = () => {\n        setProgressDialogOpen(true);\n    };\n    \n    const closeProgressDialog = () => {\n        setProgressDialogOpen(false);\n    };\n    \n    const openRestartDialog = () => {\n        setRestartDialogOpen(true);\n    };\n    \n    const closeRestartDialog = () => {\n        setRestartDialogOpen(false);\n    };\n\n    const refreshProperties = () => {\n        openProgressDialog();\n        axios({\n            method: 'get',\n            url: `/api/refreshServerProperties`\n        }).then(res => {\n            setServerProperties(res.data.properties);\n            currentMinecraftProperties = Object.assign({}, res.data.properties);\n            setDirtyProps(false);\n            setProgressDialogOpen(false);\n        }, err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n            setProgressDialogOpen(false);\n        });\n    };\n\n    const saveProperties = () => {\n        closeRestartDialog();\n        openProgressDialog();\n        let newProperties = JSON.stringify(serverProperties);\n        axios({\n            method: 'post',\n            url: `/api/saveMinecraftProperties`,\n            params: {\n                newProperties: newProperties\n            }\n        }).then(() => {\n            refreshProperties();\n        }, err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n            refreshProperties();\n        });\n    };\n\n    const undoPropertyEdits = () => {\n        setServerProperties(currentMinecraftProperties);\n        setDirtyProps(false);\n    };\n\n    const updatePropertyType = (event) => {\n        let newMinecraftProps = Object.assign([], serverProperties);\n        let changed = false;\n        let property;\n        for (let p = 0; p < newMinecraftProps.length; p++) {\n            property = newMinecraftProps[p];\n            if (property.name === event.target.id) {\n                if (property.value !== event.target.value) {\n                    property.value = event.target.value;\n                    changed = true;\n                }\n                break;\n            }\n        }\n        if (changed){\n            setServerProperties(newMinecraftProps);\n            setDirtyProps(true);\n        }\n    };\n\n    return (\n        <div>\n            <ActionInProgressDialog\n                open = { progressDialogOpen }\n                onClose = { closeProgressDialog }\n            />\n            <ConfirmRestartDialog\n                open = { restartDialogOpen }\n                onNo = { closeRestartDialog }\n                onYes = { saveProperties }\n            />\n            <Typography variant=\"subtitle1\">\n                Server Properties\n            </Typography>\n            <Typography>\n                Change Minecraft server properties. When finished, click <strong>Save</strong>.&nbsp;\n                <Typography variant=\"caption\">\n                    (Saving changes will require a Minecraft restart.)\n                </Typography>\n            </Typography>\n            <Typography>\n                <strong>Undo</strong> will reset all fields to the current running settings.\n            </Typography>\n            <Typography>\n                <strong>Refresh</strong> reads current values from the Minecraft server files.\n            </Typography>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={ refreshProperties }>\n                <Refresh />\n                Refresh\n            </Button>\n            <Button\n                disabled = { !dirtyProps }\n                variant=\"contained\"\n                color=\"primary\"\n                onClick = { openRestartDialog }>\n                <Save />\n                Save\n            </Button>\n            <Button\n                disabled = { !dirtyProps }\n                variant=\"contained\"\n                color=\"primary\"\n                onClick = { undoPropertyEdits }>\n                <Undo />\n                Undo\n            </Button>\n            <div style={{maxHeight: \"100vh\", overflow: \"auto\"}}>\n                <Table size=\"small\">\n                    <TableBody>\n                        <TableRow><TableCell></TableCell></TableRow>\n                        { serverProperties && serverProperties.length ? serverProperties.map(property => {\n                            return (\n                                <TableRow key={ property.name }>\n                                    <TableCell>\n                                        <FormControl fullWidth>\n                                            <InputLabel\n                                                htmlFor=\"{ property.name }\">\n                                                { property.name }\n                                            </InputLabel>\n                                            <Input\n                                                id = { property.name }\n                                                value = { property.value }\n                                                fullWidth\n                                                onChange = { updatePropertyType }\n                                                onKeyPress = { updatePropertyType }/>\n                                        </FormControl>\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        }) : <TableRow><TableCell>Waiting on Minecraft server...</TableCell></TableRow> }\n                    </TableBody>\n                </Table>\n            </div>\n        </div>\n    );\n}\n\nServerProperties.propTypes = {\n    minecraftProperties: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport axios from 'axios';\n\nimport 'typeface-roboto';\nimport Button from '@material-ui/core/Button';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Restart from '@material-ui/icons/Autorenew';\nimport Select from '@material-ui/core/Select';\nimport Start from '@material-ui/icons/PlayArrow';\nimport Stop from '@material-ui/icons/Stop';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport UpdateAvailable from '@material-ui/icons/AssignmentLate';\n\nimport ActionInProgressDialog from './ActionInProgressDialog.js';\nimport ConfirmVersionDialog from './ConfirmVersionDialog.js';\nimport ServerProperties from './ServerProperties.js';\nimport { Tooltip } from '@material-ui/core';\n\nconst styles = {\n    container: {\n        margin: 10,\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontSize: '0.95rem'\n    }\n};\n\nclass ServerControls extends React.Component {\n    constructor (props) {\n        super(props);\n\n        let detectedVersion = props.minecraftProperties.detectedVersion;\n        if (!detectedVersion || !detectedVersion.full) {\n            detectedVersion = { full: 'latest' };\n        }\n        \n        this.state = {\n            progressDialogOpen: false,\n            versionDialogOpen: false,\n            versionToInstall: detectedVersion\n        };\n        this.checkVersionToInstall = this.checkVersionToInstall.bind(this);\n        this.closeProgressDialog = this.closeProgressDialog.bind(this);\n        this.closeVersionDialog = this.closeVersionDialog.bind(this);\n        this.handleVersionConfirmation = this.handleVersionConfirmation.bind(this);\n        this.openProgressDialog = this.openProgressDialog.bind(this);\n        this.installMinecraft = this.installMinecraft.bind(this);\n        this.restartMinecraft = this.restartMinecraft.bind(this);\n        this.selectVersionToInstall = this.selectVersionToInstall.bind(this);\n        this.startMinecraft = this.startMinecraft.bind(this);\n        this.stopMinecraft = this.stopMinecraft.bind(this);\n    }\n    \n    openProgressDialog () {\n        this.setState({ progressDialogOpen: true });\n    }\n    \n    closeProgressDialog () {\n        this.setState({ progressDialogOpen: false });\n    }\n\n    closeVersionDialog () {\n        this.setState({ versionToInstall: this.props.minecraftProperties.detectedVersion });\n        this.setState({ versionDialogOpen: false });\n    }\n    \n    checkVersionToInstall () {\n        if (this.props.minecraftProperties.detectedVersion.full && this.state.versionToInstall.full !== this.props.minecraftProperties.detectedVersion.full) {\n            this.setState({ versionDialogOpen: true });\n        } else {\n            this.installMinecraft();\n        }\n    }\n\n    displayReleaseVersions (version) {\n        return (\n            <MenuItem\n                key={ version.id }\n                value={ version.id }>\n                { version.id }\n            </MenuItem>\n        );\n    }\n    \n    handleAcceptEula () {\n        axios({\n            method: 'post',\n            url: '/api/acceptEula'\n        }).catch(error => {\n            console.log('An error occurred accepting the EULA:', error);\n        });\n    }\n\n    handleVersionConfirmation (value) {\n        if (value && typeof value === 'string') {\n            this.setState({ versionToInstall: {full: value} });\n        }\n        this.setState({ versionDialogOpen: false });\n        this.installMinecraft();\n    }\n\n    installMinecraft () {\n        this.setState({ progressDialogOpen: true });\n        // this.props.stopMinecraftStatus();\n        axios({\n            method: 'post',\n            url: `/api/install`,\n            params: {\n                version: this.state.versionToInstall.full\n            }\n        }).then(() => {\n            this.props.startMinecraftStatus();\n            this.setState({ progressDialogOpen: false });\n            this.selectVersionToInstall({target: {value: this.props.minecraftProperties.detectedVersion}});\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n        });\n    }\n\n    restartMinecraft () {\n        this.setState({ progressDialogOpen: true });\n        // this.props.stopMinecraftStatus();\n        axios({\n            method: 'post',\n            url: `/api/restart`\n        }).then(() => {\n            this.props.startMinecraftStatus();\n            this.setState({ progressDialogOpen: false });\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n        });\n    }\n\n    selectVersionToInstall (selectedVersionToInstall) {\n        let minecraftProperties = this.props.minecraftProperties,\n            releaseVersions = {},\n            versionToInstall = '';\n\n        if (minecraftProperties.versions) {\n            releaseVersions = minecraftProperties.versions.release;\n        }\n        \n        if (releaseVersions && releaseVersions.length) {\n            for (let releaseVersion of releaseVersions) {\n                if (releaseVersion.id === selectedVersionToInstall.target.value) {\n                    versionToInstall = { full: releaseVersion.id };\n                    break;\n                }\n            }\n            if (!versionToInstall) {\n                versionToInstall = { full: 'latest' };\n            }\n            this.setState({ versionToInstall });\n        }\n    }\n    \n    startMinecraft () {\n        this.setState({ progressDialogOpen: true });\n        axios({\n            method: 'post',\n            url: `/api/start`\n        }).then(() => {\n            this.props.startMinecraftStatus();\n            this.setState({ progressDialogOpen: false });\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n        });\n    }\n  \n    stopMinecraft () {\n        this.setState({ progressDialogOpen: true });\n        axios({\n            method: 'post',\n            url: `/api/stop`\n        }).then(() => {\n            // this.props.stopMinecraftStatus();\n            this.setState({ progressDialogOpen: false });\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n        });\n    }\n\n    render () {\n        let minecraftProperties = this.props.minecraftProperties;\n\n        return (\n            <div style={ styles.container }>\n                <ActionInProgressDialog\n                    open = { this.state.progressDialogOpen }\n                    onClose = { this.closeProgressDialog }\n                />\n                <ConfirmVersionDialog\n                    open = { this.state.versionDialogOpen }\n                    onNo = { this.closeVersionDialog }\n                    onYes = { this.handleVersionConfirmation }\n                    detectedVersion = { minecraftProperties.detectedVersion }\n                    selectedVersionToInstall = { this.state.versionToInstall }\n                />\n                <Typography variant=\"subtitle1\">\n                    Server Controls\n                </Typography>\n                <Table>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <Button\n                                    onClick={ this.startMinecraft }\n                                    disabled={ minecraftProperties.started }\n                                    variant=\"contained\"\n                                    color=\"primary\">\n                                    <Start />\n                                    Start\n                                </Button>\n                                <Button\n                                    onClick = { this.stopMinecraft }\n                                    disabled = { !minecraftProperties.started }\n                                    variant=\"contained\"\n                                    color=\"primary\">\n                                    <Stop />\n                                    Stop\n                                </Button>\n                                <Button\n                                    onClick = { this.restartMinecraft }\n                                    disabled = { !minecraftProperties.started }\n                                    variant=\"contained\"\n                                    color=\"primary\">\n                                    <Restart />\n                                    Restart\n                                </Button>\n                            </TableCell>\n                            <TableCell>\n                                <Button\n                                    onClick = { this.checkVersionToInstall }\n                                    variant=\"contained\"\n                                    color=\"primary\">\n                                    Install\n                                </Button>\n                                <Select\n                                    value={ this.state.versionToInstall.full }\n                                    onChange={ this.selectVersionToInstall }>\n                                    <MenuItem key=\"latest\" value=\"latest\">\n                                        <em>latest</em>\n                                    </MenuItem>\n                                    { minecraftProperties.versions && minecraftProperties.versions.release ? minecraftProperties.versions.release.map(this.displayReleaseVersions) : <div></div> }\n                                </Select>\n                            </TableCell>\n                            <TableCell>\n                                <Button\n                                    onClick = { this.handleAcceptEula }\n                                    disabled = { !minecraftProperties.installed || minecraftProperties.acceptedEula }\n                                    variant=\"contained\"\n                                    color=\"primary\">\n                                    Accept EULA\n                                </Button>\n                            </TableCell>\n                            <TableCell>\n                                { minecraftProperties.updateAvailable ?\n                                    <Tooltip\n                                        title=\"Update Available\">\n                                        <Button>\n                                            <UpdateAvailable />\n                                        </Button>\n                                    </Tooltip> : <div></div>\n                                }\n                                <Button\n                                    disabled\n                                    variant=\"contained\"\n                                    color=\"primary\">\n                                    Check for updates\n                                </Button>\n                            </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n                <ServerProperties minecraftProperties = { minecraftProperties }/>\n            </div>\n        );\n    }\n}\n\nServerControls.propTypes = {\n    minecraftProperties: PropTypes.object.isRequired,\n    startMinecraftStatus: PropTypes.func.isRequired,\n    stopMinecraftStatus: PropTypes.func.isRequired\n};\n\nexport default ServerControls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Button from '@material-ui/core/Button';\n    \nexport default class BackupBeforeNewDialog extends React.Component {\n\n    render () {\n        return (\n            <Dialog open = { this.props.open }>\n                <DialogContent>\n                    <DialogContentText>\n                        Would you like to backup the world first?\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick = { this.props.cancelDialog } color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick = { this.props.newOnly } color=\"primary\">\n                        No\n                    </Button>\n                    <Button onClick = { this.props.backupAndNew } color=\"primary\" autoFocus>\n                        Yes\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nBackupBeforeNewDialog.propTypes = {\n    open: PropTypes.bool.isRequired,\n    cancelDialog: PropTypes.func.isRequired,\n    newOnly: PropTypes.func.isRequired,\n    backupAndNew: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '@material-ui/core/Button';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nconst styles = {\n    container: {\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontSize: '0.95rem'\n    }\n};\n    \nexport default class RawMinecraftCommandDialog extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.closeDialog = this.closeDialog.bind(this);\n        this.listCommands = this.listCommands.bind(this);\n    }\n\n    closeDialog (command) {\n        this.props.updateRawCommandField(command);\n        this.props.onClose();\n    }\n\n    listCommands (command) {\n        return (\n            <ListItem key = { command.key } button onClick = { () => { this.closeDialog(command.command); } }>\n                <ListItemText primary = { command.command } />\n                <Divider />\n            </ListItem>\n        );\n    }\n\n    render () {\n        return (\n            <Dialog fullScreen open = { this.props.open } style = { styles.container } >\n                <DialogTitle>\n                    <IconButton onClick = { this.props.onClose }>\n                        <CloseIcon />\n                    </IconButton>\n                    Available Minecraft Commands\n                </DialogTitle>\n                <DialogContent>\n                    <List dense={ true }>\n                        { this.props.minecraftCommands ? this.props.minecraftCommands.map(this.listCommands) : <div></div> }\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick = { this.props.onClose } color=\"primary\">\n                        Cancel\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nRawMinecraftCommandDialog.propTypes = {\n    minecraftCommands: PropTypes.array.isRequired,\n    open: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    updateRawCommandField: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class BackupItem extends React.Component {\n    render () {\n        let backup = this.props.backup;\n\n        return (\n            <option value = { backup.fileName }>{ backup.worldName }: Taken { backup.date } at { backup.time }</option>\n        );\n    }\n}\n\nBackupItem.propTypes = {\n    backup: PropTypes.object.isRequired\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Select from '@material-ui/core/Select';\n\nimport BackupItem from './BackupItem';\n\nexport default class RestoreBackupDialog extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            backupValue: \"\"\n        };\n    }\n\n    displayBackupItems (backup) {\n        return (\n            <BackupItem\n                key = { backup.fileName }\n                backup = { backup }\n            />\n        );\n    }\n\n    render () {\n        let potentialBackups = this.props.potentialBackups;\n        \n        return (\n            <Dialog\n                open = { this.props.open }>\n                <DialogContent>\n                    <FormControl>\n                        <Select\n                            native\n                            inputProps = {{\n                                id: 'backup',\n                            }}\n                            value = { this.state.backupValue } >\n                            { potentialBackups.map(this.displayBackupItems) }\n                        </Select>\n                    </FormControl>\n                    <FormHelperText>Choose a backup to restore</FormHelperText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick = { this.props.onClose } color=\"primary\">\n                        Cancel\n                    </Button>\n                    <Button onClick = { this.props.onClose } color=\"primary\" autoFocus>\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    }\n}\n\nRestoreBackupDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n    potentialBackups: PropTypes.array.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport axios from 'axios';\n\nimport 'typeface-roboto';\nimport Backup from '@material-ui/icons/Backup';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport FormControl from '@material-ui/core/FormControl';\nimport Help from '@material-ui/icons/Help';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport New from '@material-ui/icons/Public';\nimport Restore from '@material-ui/icons/Restore';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\n\nimport BackupBeforeNewDialog from './BackupBeforeNewDialog.js';\nimport ActionInProgressDialog from './ActionInProgressDialog.js';\nimport RawMinecraftCommandDialog from './RawMinecraftCommandDialog.js';\nimport RestoreBackupDialog from './RestoreBackupDialog.js';\n\nconst styles = {\n    container: {\n        margin: 10,\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        fontSize: '0.95rem'\n    }\n};\n    \nexport default class WorldControls extends React.Component {\n    constructor (props) {\n        super(props);\n        \n        this.state = {\n            backupDialogOpen: false,\n            commandOutput: '',\n            helpDialogOpen: false,\n            potentialBackups: [],\n            progressDialogOpen: false,\n            rawMinecraftCommandDialogOpen: false,\n            rawCommand: '',\n            restoreDialogOpen: false,\n            restoreBackup: {  }\n        };\n        this.backupAndNewMinecraftWorld = this.backupAndNewMinecraftWorld.bind(this);\n        this.backupAndRestoreMinecraftWorld = this.backupAndRestoreMinecraftWorld.bind(this);\n        this.backupMinecraftWorld = this.backupMinecraftWorld.bind(this);\n        this.closeBackupDialog = this.closeBackupDialog.bind(this);\n        this.closeProgressDialog = this.closeProgressDialog.bind(this);\n        this.closeRawCommandDialog = this.closeRawCommandDialog.bind(this);\n        this.closeRestoreDialog = this.closeRestoreDialog.bind(this);\n        this.getMinecraftWorldBackups = this.getMinecraftWorldBackups.bind(this);\n        this.newMinecraftWorld = this.newMinecraftWorld.bind(this);\n        this.onClearCommand = this.onClearCommand.bind(this);\n        this.onClearOutput = this.onClearOutput.bind(this);\n        this.onSendCommand = this.onSendCommand.bind(this);\n        this.openBackupBeforeNewDialog = this.openBackupBeforeNewDialog.bind(this);\n        this.openProgressDialog = this.openProgressDialog.bind(this);\n        this.openRawCommandDialog = this.openRawCommandDialog.bind(this);\n        this.openRestoreDialog = this.openRestoreDialog.bind(this);\n        this.restoreMinecraftWorld = this.restoreMinecraftWorld.bind(this);\n        this.updateRawCommandDialog = this.updateRawCommandDialog.bind(this);\n        this.updateRawCommandType = this.updateRawCommandType.bind(this);\n    }\n\n    backupAndNewMinecraftWorld () {\n        // TODO Fix issue of if failed backup then don't nuke\n        this.backupMinecraftWorld();\n        this.newMinecraftWorld();\n    }\n\n    backupAndRestoreMinecraftWorld () {\n        // TODO Fix issue of if failed backup then don't nuke\n        this.backupMinecraftWorld();\n        this.restoreMinecraftWorld();\n    }\n      \n    backupMinecraftWorld () {\n        this.setState({ backupDialogOpen: false, progressDialogOpen: true,  restoreDialogOpen: false });\n        axios({\n            method: 'post',\n            url: '/api/backupWorld'\n        }).then(() => {\n            this.setState({ progressDialogOpen: false });\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n            this.setState({ progressDialogOpen: false });\n        });\n    }\n    \n    closeBackupDialog () {\n        this.setState({ backupDialogOpen: false });\n    }\n    \n    closeProgressDialog () {\n        this.setState({ progressDialogOpen: false });\n    }\n\n    closeRawCommandDialog () {\n        this.setState({ rawMinecraftCommandDialogOpen: false });\n    }\n    \n    closeRestoreDialog (worldBackup) {\n        if (worldBackup.filename) {\n            this.setState({ restoreBackup: worldBackup });\n            console.log('Would restore world: ', worldBackup);\n            this.setState({ restoreDialogOpen: false });\n            this.restoreMinecraftWorld(worldBackup);\n        } else {\n            this.setState({ restoreDialogOpen: false });\n        }\n    }\n\n    getMinecraftWorldBackups () {\n        axios({\n            method: 'get',\n            url: `/api/listWorldBackups`\n        }).then(res => {\n            let backupList = res.data.backupList;\n            console.log('backupList response:', backupList);\n            if (backupList.length) {\n                this.setState({ potentialBackups: backupList });\n                this.setState({ restoreDialogOpen: true });\n            } else {\n                // TODO: Show error\n                this.setState({ potentialBackups: [{key: 'nothingtoseehere', fileName: 'nope', worldName: '', date: ''}] });\n                console.log('An error occurred getting backups from the Minecraft server.', backupList);\n            }\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n            this.setState({ restoreDialogOpen: false });\n        });\n    }\n    \n    newMinecraftWorld () {\n        this.setState({ backupDialogOpen: false, progressDialogOpen: true,  restoreDialogOpen: false });\n        axios({\n            method: 'post',\n            url: '/api/newWorld',\n            params: {\n                backup: false\n            }\n        }).then(() => {\n            this.setState({ progressDialogOpen: false });\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n            this.setState({ progressDialogOpen: false });\n        });\n    }\n\n    onClearCommand () {\n        this.setState({ rawCommand: '' });\n    }\n\n    onClearOutput () {\n        this.setState({ commandOutput: '' });\n    }\n    \n    onSendCommand () {\n        if (this.state.rawCommand) {\n            axios({\n                method: 'post',\n                url: '/api/command',\n                params: {\n                    command: this.state.rawCommand\n                }\n            }).then(response => {\n                let commandOutput = response.data.output;\n                this.setState({ rawCommand: '' });\n                this.setState({ commandOutput });\n            },\n            err => {\n                console.log('An error occurred contacting the Minecraft server.', err);\n                this.setState({ progressDialogOpen: false });\n            });\n        }\n    }\n    \n    openBackupBeforeNewDialog () {\n        this.setState({ backupDialogOpen: true, progressDialogOpen: false, rawMinecraftCommandDialogOpen: false });\n    }\n    \n    openProgressDialog () {\n        this.setState({ backupDialogOpen: false, progressDialogOpen: true, rawMinecraftCommandDialogOpen: false });\n    }\n\n    openRawCommandDialog () {\n        this.setState({ backupDialogOpen: false, progressDialogOpen: false, rawMinecraftCommandDialogOpen: true });\n    }\n    \n    openRestoreDialog () {\n        this.getMinecraftWorldBackups();\n        this.setState({ backupDialogOpen: false, progressDialogOpen: false, rawMinecraftCommandDialogOpen: false, restoreDialogOpen: true });\n    }\n    \n    restoreMinecraftWorld (worldBackup) {\n        this.setState({ backupDialogOpen: false, progressDialogOpen: true, restoreDialogOpen: false });\n        axios({\n            method: 'post',\n            url: '/api/command',\n            params: {\n                command: '/restoreWorld',\n                backupFile: worldBackup,\n                backup: false\n            }\n        }).then(() => {\n            this.setState({ backupDialogOpen: false, progressDialogOpen: false, restoreDialogOpen: false });\n            this.setState({ restoreBackup: {} });\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n            this.setState({ restoreDialogOpen: false });\n        });\n    }\n\n    updateRawCommandType (event) {\n        if (event.key === 'Enter') {\n            this.onSendCommand();\n        } else {\n            this.setState({ rawCommand: event.target.value });\n        }\n    }\n\n    updateRawCommandDialog (command) {\n        this.setState({ rawCommand: command });\n    }\n\n    render () {\n        return (\n            <div style={ styles.container }>\n                <BackupBeforeNewDialog \n                    backupAndNew = { this.backupAndNewMinecraftWorld } \n                    newOnly = { this.newMinecraftWorld }\n                    cancelDialog = { this.closeBackupDialog }\n                    open = { this.state.backupDialogOpen }\n                />\n                <ActionInProgressDialog\n                    open = { this.state.progressDialogOpen }\n                    onClose = { this.closeProgressDialog }\n                />\n                <RawMinecraftCommandDialog\n                    open = { this.state.rawMinecraftCommandDialogOpen }\n                    onClose = { this.closeRawCommandDialog }\n                    minecraftCommands = { this.props.minecraftProperties.fullHelp }\n                    updateRawCommandField = { this.updateRawCommandDialog }\n                />\n                <RestoreBackupDialog\n                    open = { this.state.restoreDialogOpen }\n                    onClose = { this.closeRestoreDialog }\n                    potentialBackups = { this.state.potentialBackups }\n                />\n                <Typography variant=\"subtitle1\">\n                    World Controls\n                </Typography>\n                <Table>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = { this.backupMinecraftWorld }>\n                                    <Backup />\n                                    Backup World\n                                </Button>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = { this.openRestoreDialog } disabled>\n                                    <Restore />\n                                    Restore World\n                                </Button>\n                                <Button\n                                    variant=\"contained\"\n                                    color=\"primary\"\n                                    onClick = { this.openBackupBeforeNewDialog }>\n                                    <New />\n                                    New World\n                                </Button>\n                            </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n                <Typography variant=\"subtitle1\">\n                    Send Minecraft Command\n                </Typography>\n                <FormControl fullWidth>\n                    <InputLabel htmlFor = \"rawCommand\">\n                        Enter command. Click the Help icon for a full list of supported commands.\n                    </InputLabel>\n                    <Input id = 'rawCommand' fullWidth value = { this.state.rawCommand } onChange = { this.updateRawCommandType } onKeyPress = { this.updateRawCommandType }/>\n                    <Divider />\n                </FormControl>\n                <Tooltip title = \"List available Minecraft commands\">\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick = { this.openRawCommandDialog }>\n                        <Help />\n                    </Button>\n                </Tooltip>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick = { this.onClearCommand }>Clear Command</Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={ !this.props.minecraftProperties.started && !this.state.rawCommand === '' }\n                    onClick = { this.onSendCommand }>Send Command</Button>\n                <FormControl fullWidth>\n                    <TextField\n                        label=\"Command Output\"\n                        multiline\n                        rows=\"6\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        value={ this.state.commandOutput }\n                    />\n                </FormControl>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick = { this.onClearOutput }>Clear Output</Button>\n            </div>\n        );\n    }\n}\n\nWorldControls.propTypes = {\n    minecraftProperties: PropTypes.object.isRequired\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport axios from 'axios';\n\nimport 'typeface-roboto';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Save from '@material-ui/icons/Save';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\n\nexport default function  Preferences (props) {\n    const [apiSettings, setApiSettings] = useState(props.apiSettings);\n    // console.log(apiSettings);\n\n    const savePreferences = () => {\n        axios({\n            method: 'post',\n            url: `/api/saveApiPreferences`,\n            params: {\n                settings: JSON.stringify(apiSettings)\n            }\n        }, err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n        });\n    };\n\n    const handleChange = (event, value) => {\n        let oldApiSettings = Object.assign({}, apiSettings);\n        let newApiSettings = {autoStartMinecraft: value};\n        newApiSettings = Object.assign(oldApiSettings, newApiSettings);\n        setApiSettings(newApiSettings);\n    };\n\n    return (\n        <div>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick = { savePreferences }>\n                <Save />\n                Save\n            </Button>\n            <Table size=\"small\">\n                <TableBody>\n                    <TableRow>\n                        <TableCell>\n                            <FormControl fullWidth>\n                                <FormControlLabel control={\n                                    <Checkbox\n                                        checked={ apiSettings.autoStartMinecraft }\n                                        onChange={ handleChange }\n                                    />\n                                } label=\"Auto-start Minecraft with this website?\" />\n                            </FormControl>\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>\n                            <FormControl fullWidth>\n                                <InputLabel\n                                    htmlFor=\"{ ipAddress }\">\n                                    The IP address to listen on.\n                                </InputLabel>\n                                <Input\n                                    id = { \"ipAddress\" }\n                                    value = { apiSettings.ipAddress }\n                                    fullWidth\n                                    // onChange = { updatePropertyType }\n                                    // onKeyPress = { updatePropertyType }/>\n                                />\n                            </FormControl>\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>\n                            <FormControl fullWidth>\n                                <InputLabel\n                                    htmlFor=\"{ ipPort }\">\n                                    The IP port to listen on.\n                                </InputLabel>\n                                <Input\n                                    id = { \"ipPort\" }\n                                    value = { apiSettings.ipPort }\n                                    fullWidth\n                                    // onChange = { updatePropertyType }\n                                    // onKeyPress = { updatePropertyType }/>\n                                />\n                            </FormControl>\n                        </TableCell>\n                    </TableRow>\n                </TableBody>\n            </Table>\n        </div>\n    );\n}\n\nPreferences.propTypes = {\n    apiSettings: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport 'typeface-roboto';\nimport Help from '@material-ui/icons/Help';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\n\nclass About extends React.Component {\n    render () {\n        let minecraftProperties = this.props.minecraftProperties;\n        const GB = 1024 ** 3;\n        let mem = minecraftProperties.nodeInfo ? minecraftProperties.nodeInfo.mem / GB : 'Unknown';\n\n        return (\n            <div>\n                <Table>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"h6\">\n                                    <a href={ minecraftProperties.eulaUrl } target=\"_blank\" rel=\"noopener noreferrer\">Minecraft End User License Agreement</a>\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n                <Table size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Contributors\n                                </Typography>\n                            </TableCell>\n                            <TableCell> </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Project Owner\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography>\n                                    nickrnet\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Authors\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography>\n                                    nickrnet, DevBonBon\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    Testing\n                                </Typography>\n                            </TableCell>\n                            <TableCell> </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n                <Table size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    System Information\n                                </Typography>\n                            </TableCell>\n                            <TableCell> </TableCell>\n                            <TableCell> </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    CPU\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography>\n                                    { minecraftProperties.nodeInfo ? minecraftProperties.nodeInfo.cpus[0].model + ', ' + minecraftProperties.nodeInfo.cpus.length + ' cores' : 'Unknown' }\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Tooltip title = \"Logical CPUs, both physical and virtual\">\n                                    <Help />\n                                </Tooltip>\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    RAM\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography>\n                                    { mem } GB\n                                </Typography>\n                            </TableCell>\n                            <TableCell> </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant=\"subtitle2\">\n                                    NodeJS Version\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography>\n                                    { minecraftProperties.nodeInfo ? minecraftProperties.nodeInfo.version : 'Unknown' }\n                                </Typography>\n                            </TableCell>\n                            <TableCell> </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n                {/* <div>\n                    <script type=\"text/javascript\">\n                        amzn_assoc_ad_type = \"banner\";\n                        amzn_assoc_marketplace = \"amazon\";\n                        amzn_assoc_region = \"US\";\n                        amzn_assoc_placement = \"assoc_banner_placement_default\";\n                        amzn_assoc_banner_type = \"ez\";\n                        amzn_assoc_p = \"9\";\n                        amzn_assoc_width = \"180\";\n                        amzn_assoc_height = \"150\";\n                        amzn_assoc_tracking_id = \"nickrnet-20\";\n                        amzn_assoc_linkid = \"2c598468f363378d5fb52de183d72a89\";\n                    </script>\n                    <script src=\"https://z-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&Operation=GetScript&ID=OneJS&WS=1\"></script>\n                </div>\n                <p>\n                    Support this project by making purchases from Amazon.\n                </p>\n                <iframe src=\"https://rcm-na.amazon-adsystem.com/e/cm?o=1&p=9&l=ez&f=ifr&linkID=94a6a8bcf4c0832533e2ed9b53ea4ccc&t=nickrnet-20&tracking_id=nickrnet-20\" width=\"180\" height=\"150\" scrolling=\"no\" border=\"1\" marginWidth=\"0\" title=\"Amazon\" style={ styles.container } frameBorder=\"0\"></iframe> */}\n            </div>\n        );\n    }\n}\n\nAbout.propTypes = {\n    minecraftProperties: PropTypes.object.isRequired\n};\n\nexport default About;\n","import React from 'react';\n\nimport axios from 'axios';\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport AppBar from '@material-ui/core/AppBar';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nimport Dashboard from './Dashboard/Dashboard.js';\nimport Players from './Players/Players.js';\nimport ServerControls from './ServerControls/ServerControls.js';\nimport WorldControls from './ServerControls/WorldControls.js';\nimport Preferences from './Preferences/Preferences.js';\nimport About from './About/About.js';\n\nconst debug = false;\n\nexport default class App extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n            debug: debug,\n            ipInfo: {},\n            apiSettings: {},\n            minecraftStatus: {},\n            eulaOpen: false,\n            minecraftProperties: {},\n            playerInfo: {},\n            value: 0\n        };\n        if (debug) {\n            console.log('App state:', this.state);\n        }\n        this.handleAcceptEula = this.handleAcceptEula.bind(this);\n        this.handleDeclineEula = this.handleDeclineEula.bind(this);\n        this.getIpInfo = this.getIpInfo.bind(this);\n        this.getMinecraftServerProperties = this.getMinecraftServerProperties.bind(this);\n        this.getMinecraftStatus = this.getMinecraftStatus.bind(this);\n        this.startMinecraftStatus = this.startMinecraftStatus.bind(this);\n        this.stopMinecraftStatus = this.stopMinecraftStatus.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.stopMinecraftStatus = this.stopMinecraftStatus.bind(this);\n\n        this.startMinecraftStatus();\n    }\n    \n    getTheme () {\n        const theme = createMuiTheme({\n            \"tableRowColumn\": {\n                \"height\": 60\n            },\n            \"container\": {\n                \"margin\": 10,\n                \"fontFamily\": '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n                \"fontSize\": '0.95rem'\n            },\n            \"overrides\": {\n                MuiButton: {\n                    root: {\n                        margin: \"10px\"\n                    }\n                }\n            }\n        });\n        \n        return theme;\n    }\n\n    componentWillUnmount () {\n        if (debug) {\n            console.log('Application shutting down.');\n        }\n        this.stopMinecraftStatus();\n    }\n    \n    handleChange (event, value) {\n        this.setState({ value });\n    }\n\n    getIpInfo () {\n        let ipInfo;\n\n        axios(`/api/ipInfo`).then(res => {\n            ipInfo = res.data;\n            this.setState({ ipInfo });\n        });\n    }\n\n    getMinecraftStatus (pingWait) {\n        let normalPingTime = 5 * 1000,\n            appendTime = 5 * 1000,\n            maxTime = 120 * 1000,\n            pingTime;\n\n        // normally ping every 5 seconds\n        // if a fast ping was requested (from constructor/DidMount), honor it\n        // once trouble hits, add 5 seconds until 2 minutes is reached, then reset to 60 seconds\n        // once re/successful, reset to 60 seconds\n        if (!pingWait) {\n            pingTime = normalPingTime;\n        } else if (pingWait < 1000) {\n            pingTime = pingWait;\n        } else if (pingWait > maxTime) {\n            pingTime = normalPingTime;\n        } else {\n            pingTime = pingWait;\n        }\n\n        if (this.statusTimerId) {\n            clearTimeout(this.statusTimerId);\n        }\n\n        this.statusTimerId = setTimeout(() => {\n            axios(`/api/status`).then(res => {\n                let apiSettings = res.data.apiSettings;\n                let minecraftProperties = res.data.minecraftProperties;\n                this.setState({ apiSettings });\n                this.setState({ minecraftProperties });\n\n                if (debug) {\n                    console.log('Setting Minecraft status poller to run in', pingTime/1000, 'seconds.');\n                }\n                this.getMinecraftStatus();\n            },\n            err => {\n                let minecraftStatus = {};\n\n                this.setState({ minecraftStatus });\n                pingTime = pingTime + appendTime;\n\n                if (debug) {\n                    console.log('Error occurred:', err);\n                    console.log('Application state:', this.state);\n                    console.log('Setting Minecraft status poller to run in', pingTime/1000, 'seconds.');\n                }\n                this.getMinecraftStatus(pingTime);\n            });\n        }, pingTime);\n    }\n  \n    getMinecraftServerProperties () {\n        if (debug) {\n            console.log('Retrieving Minecraft Server properties.');\n        }\n\n        axios(`/api/properties`).then(res => {\n            let minecraftServerProperties = res.data;\n            minecraftServerProperties = minecraftServerProperties.properties;\n            this.setState({ minecraftServerProperties });\n            if (debug) {\n                console.log('MinecraftServer properties:', minecraftServerProperties);\n            }\n        },\n        err => {\n            console.log('An error occurred contacting the Minecraft server.', err);\n        }).catch(e => {\n            console.log('An error occurred getting the server properties:', e);\n        });\n    }\n  \n    handleAcceptEula () {\n        axios({\n            method: 'post',\n            url: '/api/acceptEula'\n        }).then(() => {\n            this.setState({ eulaOpen: false });\n        }, error => {\n            console.log('error:', error);\n            this.setState({ eulaOpen: false });\n        }).catch(error => {\n            console.log('error:', error);\n            this.setState({ eulaOpen: false });\n        });\n    }\n  \n    handleDeclineEula () {\n        axios({\n            method: 'post',\n            url: '/api/stop'\n        }).then(() => {\n            this.setState({ eulaOpen: false });\n        }, error => {\n            console.log('error:', error);\n            this.setState({ eulaOpen: false });\n        }).catch(error => {\n            console.log('error:', error);\n            this.setState({ eulaOpen: false });\n        });\n    }\n\n    runOnce () {\n        this.getIpInfo();\n        this.getMinecraftServerProperties();\n    }\n\n    startMinecraftStatus () {\n        this.runOnce();\n        this.getMinecraftStatus(25);\n    }\n\n    stopMinecraftStatus () {\n        if (debug) {\n            console.log('Stopping Minecraft server poller.');\n        }\n\n        if (this.statusTimerId) {\n            clearTimeout(this.statusTimerId);\n        }\n\n        if (this.playersTimerId) {\n            clearTimeout(this.playersTimerId);\n        }\n    }\n    \n    render () {\n        let minecraftProperties = this.state.minecraftProperties;\n\n        return (\n            <MuiThemeProvider theme={ this.getTheme() }>\n                <AppBar position=\"static\">\n                    <Tabs\n                        value = { this.state.value }\n                        onChange = { this.handleChange }\n                        centered>\n                        <Tab label=\"Dashboard\" />\n                        <Tab label=\"Players\" />\n                        <Tab label=\"World Controls\" />\n                        <Tab label=\"Server Controls\" />\n                        <Tab label=\"Preferences\" />\n                        <Tab label=\"About\" />\n                    </Tabs>\n                </AppBar>\n                { this.state.value === 0 && <Dashboard\n                    ipInfo = { this.state.ipInfo }\n                    minecraftProperties = { minecraftProperties }\n                /> }\n                { this.state.value === 1 && <Players\n                    minecraftProperties = { minecraftProperties }\n                /> }\n                { this.state.value === 2 && <WorldControls\n                    minecraftProperties = { minecraftProperties }\n                    startMinecraftStatus = { this.startMinecraftStatus }\n                    stopMinecraftStatus = { this.stopMinecraftStatus }\n                /> }\n                { this.state.value === 3 && <ServerControls\n                    minecraftProperties = { minecraftProperties }\n                    startMinecraftStatus = { this.startMinecraftStatus }\n                    stopMinecraftStatus = { this.stopMinecraftStatus }\n                /> }\n                { this.state.value === 4 && <Preferences \n                    apiSettings = { this.state.apiSettings }\n                /> }\n                { this.state.value === 5 && <About\n                    minecraftProperties = { minecraftProperties }\n                /> }\n                <Snackbar\n                    anchorOrigin = {\n                        {\n                            vertical: 'bottom',\n                            horizontal: 'left' \n                        }\n                    }\n                    open = { !minecraftProperties.started }\n                    message = { <span id=\"message-id\">Minecraft is currently stopped.</span> }\n                />\n            </MuiThemeProvider>\n        );\n    }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}